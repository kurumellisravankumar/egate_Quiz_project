{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/egate_Quiz_project/src/Pages/MainQuizFunctionality/QuestionsFunctionality.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { Link, useParams, useNavigate } from \"react-router-dom\";\n// import PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\n// import \"../Paper/Paper.css\";\n// import ButtonsFunctionality from \"./ButtonsFunctionality\";\n// import TestResultsPage from \"./TestResultsPage\";\n\n// const QuestionsFunctionality = ({ answeredQuestions }) => {\n\n//     const [selectedSubject, setSelectedSubject] = useState(null);\n\n//     const handleSubjectSelect = (subject) => {\n//         // Set the selected subject when a subject button is clicked\n//         setSelectedSubject(subject);\n//     };\n\n//     const [questionData, setQuestionData] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//     const [Subjects, setSubjects] = useState([]);\n//     const { testCreationTableId, subjectId } = useParams();\n//     const [sections, setSections] = useState([]);\n\n//     const [questionStatus, setQuestionStatus] = useState(\n//         Array(questionData.length).fill(\"notAnswered\")\n//     );\n\n//     const [answeredCount, setAnsweredCount] = useState(0);\n//     const [notAnsweredCount, setNotAnsweredCount] = useState(0);\n//     const [answeredmarkedForReviewCount, setAnsweredmarkedForReviewCount] =\n//         useState(0);\n//     const [markedForReviewCount, setMarkedForReviewCount] = useState(0);\n//     const [VisitedCount, setVisitedCount] = useState(0);\n\n//     const updateCounters = () => {\n//         let answered = 0;\n//         let notAnswered = 0;\n//         let marked = 0;\n//         let markedForReview = 0;\n//         let Visited = 0;\n\n//         questionStatus.forEach((status) => {\n//             if (status === \"answered\") {\n//                 answered++;\n//             } else if (status === \"notAnswered\") {\n//                 notAnswered++;\n//             } else if (status === \"marked\") {\n//                 marked++;\n//             } else if (status === \"Answered but marked for review\") {\n//                 markedForReview++;\n//             } else if (status === \"notVisited\") {\n//                 Visited++;\n//             }\n//         });\n\n//         setAnsweredCount(answered);\n//         setNotAnsweredCount(notAnswered);\n//         setAnsweredmarkedForReviewCount(marked);\n//         setMarkedForReviewCount(markedForReview);\n//         setVisitedCount(Visited);\n//     };\n\n//     // ---------------------------------Timer code Start--------------------------------\n//     const [timer, setTimer] = useState(0);\n//     const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\n\n//     const formatTime = (seconds) => {\n//         const hours = Math.floor(seconds / 3600);\n\n//         const minutes = Math.floor((seconds % 3600) / 60);\n\n//         const remainingSeconds = seconds % 60;\n\n//         return `${hours > 9 ? hours : \"0\" + hours}:${minutes > 9 ? minutes : \"0\" + minutes\n//             }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n//     };\n\n//     useEffect(() => {\n//         // Set the timer to the saved value for the current question\n//         setTimer(timers[currentQuestionIndex] || 0);\n//         let interval;\n//         interval = setInterval(() => {\n//             setTimer((prevTimer) => prevTimer + 1);\n//         }, 1000);\n//         // Clear the interval when the component unmounts or when the user moves to the next question\n//         return () => {\n//             clearInterval(interval);\n//         };\n//     }, [currentQuestionIndex, timers]);\n//     // ------------------------------------Timer code end--------------------------------\n\n//     useEffect(() => {\n//         const fetchSubjects = async () => {\n//             try {\n//                 const response = await fetch(\n//                     `http://localhost:4009/subjects/${testCreationTableId}`\n//                 );\n//                 const data = await response.json();\n//                 setSubjects(data);\n//             } catch (error) {\n//                 console.error(error);\n//             }\n//         };\n\n//         const fetchSections = async () => {\n//             try {\n//                 const response = await fetch(\n//                     `http://localhost:4009/fetchSections/${testCreationTableId}`\n//                 );\n//                 const data = await response.json();\n//                 setSections(data);\n//             } catch (error) {\n//                 console.error(error);\n//             }\n//         };\n\n//         const fetchQuestionData = async () => {\n//             try {\n//                 const response = await fetch(\n//                     `http://localhost:4009/getPaperData/${testCreationTableId}`\n//                 );\n//                 const data = await response.json();\n\n//                 // Check if the data has both 'questions' and 'options' properties\n//                 if (data && data.questions && data.options) {\n//                     // Assuming both questions and options are arrays, you might want to merge them\n//                     const mergedData = data.questions.map((question, index) => ({\n//                         ...question,\n//                         options: data.options.slice(index * 4, (index + 1) * 4), // Assuming 4 options per question\n//                     }));\n\n//                     setQuestionData(mergedData);\n//                     setQuestionStatus([\n//                         \"notAnswered\",\n//                         ...Array(mergedData.length - 1).fill(\"notVisited\"),\n//                     ]);\n//                 } else {\n//                     console.error(\"API response does not have expected structure:\", data);\n//                 }\n//             } catch (error) {\n//                 console.error(error);\n//             }\n//         };\n\n//         fetchSubjects();\n//         fetchSections();\n//         fetchQuestionData();\n//     }, [testCreationTableId]);\n\n//     useEffect(() => {\n//         // Call the updateCounters function initially when the component mounts\n//         updateCounters();\n//     }, [questionStatus]);\n\n//     const [selectedAnswers, setSelectedAnswers] = useState(\n//         Array(questionData.length).fill(\"\")\n//     );\n\n//     const onAnswerSelected = (OptionLetter) => {\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//         setSelectedAnswers(updatedSelectedAnswers);\n\n//     };\n\n//     const [activeQuestion, setActiveQuestion] = useState(0);\n\n//     const markForReview = () => {\n//         // Update questionStatus for the marked question\n//         const updatedQuestionStatus = [...questionStatus];\n//         if (selectedAnswers[activeQuestion]) {\n//             updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n//             if (selectedAnswers[activeQuestion] === \"Answered but marked for review\") {\n//                 updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n//             }\n//         } else if (!selectedAnswers[activeQuestion]) {\n//             updatedQuestionStatus[activeQuestion] = \"marked\";\n//         }\n\n//         setQuestionStatus(updatedQuestionStatus);\n//     };\n\n//     const clearResponse = () => {\n//         // Clear the selected answer\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[currentQuestionIndex] = \"\";\n//         setSelectedAnswers(updatedSelectedAnswers);\n\n//         // Update the question status to \"notAnswered\"\n//         setQuestionStatus((prevQuestionStatus) => {\n//             const currentStatus = prevQuestionStatus[currentQuestionIndex];\n//             if (currentStatus === \"answered\") {\n//                 return [\n//                     ...prevQuestionStatus.slice(0, currentQuestionIndex),\n//                     \"notAnswered\",\n//                     ...prevQuestionStatus.slice(currentQuestionIndex + 1),\n//                 ];\n//             }\n//             return prevQuestionStatus;\n//         });\n//     };\n\n//     const goToPreviousQuestion = () => {\n//         setCurrentQuestionIndex((prevIndex) => {\n//             // Save the current timer value for the question\n//             const updatedTimers = [...timers];\n//             updatedTimers[prevIndex] = timer;\n//             setTimers(updatedTimers);\n//             // Move to the previous question\n//             return prevIndex - 1;\n//         });\n\n//         setActiveQuestion((prevActiveQuestion) => prevActiveQuestion - 1);\n//     };\n\n//     const handleNextClick = () => {\n\n//         setCurrentQuestionIndex((prevIndex) => {\n//             // Save the current timer value for the question\n\n//             const updatedTimers = [...timers];\n\n//             updatedTimers[prevIndex] = timer;\n\n//             setTimers(updatedTimers);\n//             return prevIndex + 1;\n//         });\n\n//         const updatedQuestionStatus = [...questionStatus];\n\n//         if (activeQuestion < questionData.length - 1) {\n//             // Check the status of the next question\n//             const nextQuestionStatus = questionStatus[activeQuestion + 1];\n\n//             if (nextQuestionStatus === \"answered\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"answered\";\n//             } else if (nextQuestionStatus === \"notAnswered\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n//             } else if (!markForReview() === false) {\n//                 markForReview();\n//             }\n\n//             setActiveQuestion((prevActiveQuestion) => prevActiveQuestion + 1);\n//         }\n\n//         updateCounters();\n\n//         // Set status of the next question (if any) to \"notAnswered\"\n\n//         if (activeQuestion < questionData.length - 1) {\n//             const updatedQuestionStatus = [...questionStatus];\n//             const nextQuestionStatus = questionStatus[activeQuestion + 1];\n\n//             if (nextQuestionStatus === \"notVisited\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n//             }\n\n//             if (selectedAnswers[activeQuestion] === \"answered\") {\n//                 updatedQuestionStatus[activeQuestion] = \"answered\";\n//             } else if (markForReview() === true) {\n//                 updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n//             } else if (markForReview() === false) {\n//                 updatedQuestionStatus[activeQuestion] = \"marked\";\n//             }\n\n//             if (nextQuestionStatus === \"notAnswered\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n//             }\n\n//             setQuestionStatus(updatedQuestionStatus);\n//         }\n\n//             // Update the question status to \"answered\" only if an answer has been selected\n//     if (selectedAnswers[activeQuestion]) {\n//         setQuestionStatus((prevQuestionStatus) => {\n//             const currentStatus = prevQuestionStatus[activeQuestion];\n//             if (currentStatus === \"notAnswered\") {\n//                 return [\n//                     ...prevQuestionStatus.slice(0, activeQuestion),\n//                     \"answered\",\n//                     ...prevQuestionStatus.slice(activeQuestion + 1),\n//                 ];\n//             }\n//             return prevQuestionStatus;\n//         });\n//     }\n\n//     };\n\n//     const [accuracy, setAccuracy] = useState(0);\n//     const [averageScore, setAverageScore] = useState(0);\n//     const [topScore, setTopScore] = useState(0);\n//     const [liveRank, setLiveRank] = useState(0);\n\n//     const calculateQuestionCounts = () => {\n//         let answered = 0;\n//         let notAnswered = 0;\n//         let markedForReview = 0;\n//         let answeredmarkedForReviewCount = 0;\n//         let VisitedCount = 0;\n\n//         questionStatus.forEach((status, index) => {\n//             if (status === \"answered\") {\n//                 answered++;\n//             } else if (status === \"notAnswered\") {\n//                 notAnswered++;\n//             } else if (status === \"marked\") {\n//                 markedForReview++;\n//             } else if (status === \"Answered but marked for review\") {\n//                 answeredmarkedForReviewCount++;\n//             } else if (status === \"notVisited\") {\n//                 VisitedCount++;\n//             }\n//         });\n\n//         return {\n//             answered,\n//             notAnswered,\n//             markedForReview,\n//             answeredmarkedForReviewCount,\n//             VisitedCount,\n//         };\n//     };\n\n//     const [showResult, setShowResult] = useState(false);\n//     const navigate = useNavigate();\n\n//     const handleSubmit = () => {\n//         window.alert(\"Your Test has been Submitted!! Click Ok to See Result.\");\n\n//         // Call the function to get question counts\n//         const {\n//             answered,\n//             notAnswered,\n//             markedForReview,\n//             answeredmarkedForReviewCount,\n//             VisitedCount,\n//         } = calculateQuestionCounts();\n\n//         // Add any additional logic you need for submitting the exam\n//         // For example, you might want to send this data to the server.\n//          // Redirect to the result page\n//          navigate(\"/result\", {\n//             state: {\n//               answeredCount: answered,\n//               notAnsweredCount: notAnswered,\n//               markedForReviewCount: markedForReview,\n//               answeredmarkedForReviewCount: answeredmarkedForReviewCount,\n//               VisitedCount: VisitedCount,\n//             },\n//         });\n//     };\n\n//     const handleQuestionSelect = (questionNumber) => {\n//         setCurrentQuestionIndex(questionNumber - 1);\n//         setActiveQuestion(questionNumber - 1);\n//     };\n\n//     return (\n\n//         <div className=\"Main-Page\">\n//            {showResult ? (\n//         // Render the ResultPage component here\n//         <TestResultsPage\n//           answeredCount={answeredCount}\n//           notAnsweredCount={notAnsweredCount}\n//           markedForReviewCount={markedForReviewCount}\n//           answeredmarkedForReviewCount={answeredmarkedForReviewCount}\n//           VisitedCount={VisitedCount}\n//         />\n//       ) : (\n//         <div>\n//         <div>\n//             <PaperHeader />\n//         </div>\n//         <div className=\"QUESTIONS_CONTAINER\">\n//             <div className=\"QUESTIONS_CONTAINER_subpart\">\n//             <div className=\"subjects\">\n//             {Subjects.map((subjectTitle, index) => (\n//                 <li key={index}>\n//                     <Link ><button className=\"subject-btn\" onClick={() => handleSubjectSelect(subjectTitle.subjectName)}>{subjectTitle.subjectName}</button></Link>\n//                     {/* <button className=\"subject-btn\">{subjectTitle.subjectName}</button> */}\n//                 </li>\n//             ))}\n\n//         </div>\n\n//         <div className=\"second-header\">\n//             <div className=\"single-select-question\">\n//                 {sections.map((sectionTitle, index) => (\n//                     <li key={index}>\n//                         <p>{sectionTitle.sectionName}</p>\n\n//                     </li>\n//                 ))}\n//                 {/* Single Select Question */}\n//             </div>\n//             <div className=\"right-header\">\n//                 <div className=\"marks\">\n//                     Marks: <div className=\"plus-mark\">+1</div>\n//                     <div className=\"minus-mark\">-1</div>\n//                 </div>\n//                 <div>Timer: {formatTime(timer)}</div>\n//             </div>\n//         </div>\n\n//         <div className=\"Question_No_heading\">\n//             <p>  Question No. {currentQuestionIndex + 1}  of {questionData.length}</p>\n//         </div>\n\n//         <div  className=\"_quizexampart \">\n// {questionData.length > 0 && (\n//             <div className=\"quizexampart_q_O_container\">\n//                 <h4>\n//                     {/* {currentQuestionIndex + 1}. */}\n\n//                     <img\n//                         src={`data:image/png;base64,${questionData[currentQuestionIndex].question_img}`}\n//                         alt={`Question ${currentQuestionIndex + 1}`}\n//                     />\n//                 </h4>\n\n//                 {questionData[currentQuestionIndex].options.map(\n//                     (OptionImage, optionIndex) => (\n//                         <li key={optionIndex}>\n//                             <input\n//                                 type=\"radio\"\n//                                 name={`question-${currentQuestionIndex}-option`}\n//                                 value={optionIndex}\n//                                 checked={\n//                                     selectedAnswers[currentQuestionIndex] === optionIndex\n//                                 }\n//                                 onChange={() => onAnswerSelected(optionIndex)}\n//                             />\n//                             {OptionImage && OptionImage.option_img && (\n//                                 <img\n//                                     key={OptionImage.question_id}\n//                                     src={`data:image/png;base64,${OptionImage.option_img}`}\n//                                     alt={`Option ${optionIndex + 1}`}\n//                                 />\n//                             )}\n//                         </li>\n//                     )\n//                 )}\n//                 <div className=\"flex-right\">\n//                     <button className=\"clear-btn\" onClick={markForReview}>\n//                         Mark for Review & Next\n//                     </button>\n//                     <button className=\"clear-btn\" onClick={clearResponse}>\n//                         Clear Response\n//                     </button>\n//                     <button\n//                         className=\"previous-btn\"\n//                         onClick={goToPreviousQuestion}\n//                         disabled={currentQuestionIndex === 0}\n//                     >\n//                         <i className=\"fa-solid fa-angles-left\"></i> Previous\n//                     </button>\n//                     <button className=\"save-btn\" onClick={handleNextClick}>\n//                         Next <i className=\"fa-solid fa-angles-right\"></i>\n//                     </button>\n//                 </div>\n//             </div>\n//         )}\n// </div>\n//             </div>\n\n// <div className=\"rightsidebar\">\n//                 <ButtonsFunctionality\n//                     onQuestionSelect={handleQuestionSelect}\n//                     questionStatus={questionStatus}\n//                     setQuestionStatus={setQuestionStatus}\n//                     answeredCount={answeredCount}\n//                     notAnsweredCount={notAnsweredCount}\n//                     answeredmarkedForReviewCount={answeredmarkedForReviewCount}\n//                     markedForReviewCount={markedForReviewCount}\n//                     VisitedCount={VisitedCount}\n//                     selectedSubject={selectedSubject}\n//                     questionData={questionData}\n//                 />\n//                 <button onClick={handleSubmit} id=\"resume_btn\">\n//                     Submit\n//                 </button>\n//             </div>\n\n//         </div>\n\n//     </div>\n//       )}\n\n//         </div>\n//     )\n// }\n\n// export default QuestionsFunctionality\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport ButtonsFunctionality from \"./ButtonsFunctionality\";\nimport TestResultsPage from \"./TestResultsPage\";\nimport \"../Paper/Paper.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionsFunctionality = ({\n  answeredQuestions\n}) => {\n  _s();\n  const [selectedSubject, setSelectedSubject] = useState(null);\n  const [data, setData] = useState(null);\n  const [questionStatus, setQuestionStatus] = useState(Array.isArray(data) ? Array(data.questions.length).fill(\"notAnswered\") : []);\n  const [answeredCount, setAnsweredCount] = useState(0);\n  const [notAnsweredCount, setNotAnsweredCount] = useState(0);\n  const [answeredmarkedForReviewCount, setAnsweredmarkedForReviewCount] = useState(0);\n  const [markedForReviewCount, setMarkedForReviewCount] = useState(0);\n  const [VisitedCount, setVisitedCount] = useState(0);\n  const navigate = useNavigate();\n  const [activeQuestion, setActiveQuestion] = useState(0);\n  const calculateQuestionCounts = () => {\n    let answered = 0;\n    let notAnswered = 0;\n    let markedForReview = 0;\n    let answeredmarkedForReviewCount = 0;\n    let VisitedCount = 0;\n    questionStatus.forEach((status, index) => {\n      if (status === \"answered\") {\n        answered++;\n      } else if (status === \"notAnswered\") {\n        notAnswered++;\n      } else if (status === \"marked\") {\n        markedForReview++;\n      } else if (status === \"Answered but marked for review\") {\n        answeredmarkedForReviewCount++;\n      } else if (status === \"notVisited\") {\n        VisitedCount++;\n      }\n    });\n    return {\n      answered,\n      notAnswered,\n      markedForReview,\n      answeredmarkedForReviewCount,\n      VisitedCount\n    };\n  };\n  const handleSubmit = () => {\n    window.alert(\"Your Test has been Submitted!! Click Ok to See Result.\");\n    const {\n      answered,\n      notAnswered,\n      markedForReview,\n      answeredmarkedForReviewCount,\n      VisitedCount\n    } = calculateQuestionCounts();\n    navigate(\"/result\", {\n      state: {\n        answeredCount: answered,\n        notAnsweredCount: notAnswered,\n        markedForReviewCount: markedForReview,\n        answeredmarkedForReviewCount: answeredmarkedForReviewCount,\n        VisitedCount: VisitedCount\n      }\n    });\n  };\n  const handleQuestionSelect = questionNumber => {\n    setCurrentQuestionIndex(questionNumber - 1);\n    setActiveQuestion(questionNumber - 1);\n  };\n  const {\n    subjectId,\n    testCreationTableId\n  } = useParams();\n  const [Subjects, setSubjects] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [sections, setSections] = useState([]);\n  const [selectedAnswersMap, setSelectedAnswersMap] = useState({});\n  const [markedQuestions, setMarkedQuestions] = useState([]);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [timer, setTimer] = useState(0);\n  const [timers, setTimers] = useState(Array(data));\n  useEffect(() => {\n    const fetchData = async (selectedSubjectId = null) => {\n      let subjectsData; // Define subjectsData here\n\n      try {\n        const responseSubjects = await fetch(`http://localhost:4009/subjects/${testCreationTableId}`);\n        subjectsData = await responseSubjects.json();\n        setSubjects(subjectsData);\n        console.log(subjectsData);\n        const leastSubjectId = subjectsData.length > 0 ? Math.min(...subjectsData.map(subject => subject.subjectId)) : null;\n        const defaultSubjectId = selectedSubjectId || subjectId || leastSubjectId;\n        const response = await fetch(`http://localhost:4009/getPaperData/${testCreationTableId}/${defaultSubjectId}`);\n        const result = await response.json();\n        setData(result);\n        const linkUrl = `/subjects/${testCreationTableId}/${subjectId || leastSubjectId}`;\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData(selectedSubject);\n  }, [testCreationTableId, subjectId, selectedSubject]);\n  useEffect(() => {\n    const fetchSections = async () => {\n      try {\n        const response = await fetch(`http://localhost:4009/fetchSections/${testCreationTableId}`);\n        const data = await response.json();\n        setSections(data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchSections();\n  }, [testCreationTableId]);\n  const handleSubjectSelect = async selectedSubjectId => {\n    setSelectedSubject(selectedSubjectId);\n\n    // Fetch data for the selected subject\n    await fetchData(selectedSubjectId);\n  };\n  const handleNextClick = () => {\n    setCurrentQuestionIndex(prevIndex => prevIndex < data.questions.length - 1 ? prevIndex + 1 : prevIndex);\n  };\n  const handlePreviousClick = () => {\n    setCurrentQuestionIndex(prevIndex => prevIndex > 0 ? prevIndex - 1 : prevIndex);\n  };\n  const formatTime = seconds => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor(seconds % 3600 / 60);\n    const remainingSeconds = seconds % 60;\n    return `${hours > 9 ? hours : \"0\" + hours}:${minutes > 9 ? minutes : \"0\" + minutes}:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n  };\n  useEffect(() => {\n    setTimer(timers[currentQuestionIndex] || 0);\n    let interval;\n    interval = setInterval(() => {\n      setTimer(prevTimer => prevTimer + 1);\n    }, 1000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [currentQuestionIndex, timers]);\n  const onAnswerSelected = optionIndex => {\n    const updatedSelectedAnswers = [...selectedAnswers];\n    updatedSelectedAnswers[currentQuestionIndex] = optionIndex;\n    setSelectedAnswersMap(prevMap => ({\n      ...prevMap,\n      [data.subjectId]: updatedSelectedAnswers\n    }));\n    setSelectedAnswers(updatedSelectedAnswers);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"subjects\",\n      children: Subjects.map(subjectTitle => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSubjectSelect(subjectTitle.subjectId),\n          className: \"subject-btn\",\n          children: subjectTitle.subjectName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 760,\n          columnNumber: 13\n        }, this)\n      }, subjectTitle.subjectId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 759,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 757,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 756,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionsFunctionality, \"Qy/iK46QZckoQcAUgjlZ4VSZwN0=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = QuestionsFunctionality;\nexport default QuestionsFunctionality;\nvar _c;\n$RefreshReg$(_c, \"QuestionsFunctionality\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","ButtonsFunctionality","TestResultsPage","jsxDEV","_jsxDEV","QuestionsFunctionality","answeredQuestions","_s","selectedSubject","setSelectedSubject","data","setData","questionStatus","setQuestionStatus","Array","isArray","questions","length","fill","answeredCount","setAnsweredCount","notAnsweredCount","setNotAnsweredCount","answeredmarkedForReviewCount","setAnsweredmarkedForReviewCount","markedForReviewCount","setMarkedForReviewCount","VisitedCount","setVisitedCount","navigate","activeQuestion","setActiveQuestion","calculateQuestionCounts","answered","notAnswered","markedForReview","forEach","status","index","handleSubmit","window","alert","state","handleQuestionSelect","questionNumber","setCurrentQuestionIndex","subjectId","testCreationTableId","Subjects","setSubjects","currentQuestionIndex","sections","setSections","selectedAnswersMap","setSelectedAnswersMap","markedQuestions","setMarkedQuestions","selectedAnswers","setSelectedAnswers","timer","setTimer","timers","setTimers","fetchData","selectedSubjectId","subjectsData","responseSubjects","fetch","json","console","log","leastSubjectId","Math","min","map","subject","defaultSubjectId","response","result","linkUrl","error","fetchSections","handleSubjectSelect","handleNextClick","prevIndex","handlePreviousClick","formatTime","seconds","hours","floor","minutes","remainingSeconds","interval","setInterval","prevTimer","clearInterval","onAnswerSelected","optionIndex","updatedSelectedAnswers","prevMap","children","className","subjectTitle","onClick","subjectName","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/user/Documents/egate_Quiz_project/src/Pages/MainQuizFunctionality/QuestionsFunctionality.jsx"],"sourcesContent":["\n// import React, { useState, useEffect } from \"react\";\n// import { Link, useParams, useNavigate } from \"react-router-dom\";\n// import PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\n// import \"../Paper/Paper.css\";\n// import ButtonsFunctionality from \"./ButtonsFunctionality\";\n// import TestResultsPage from \"./TestResultsPage\";\n\n\n\n\n// const QuestionsFunctionality = ({ answeredQuestions }) => {\n\n//     const [selectedSubject, setSelectedSubject] = useState(null);\n\n//     const handleSubjectSelect = (subject) => {\n//         // Set the selected subject when a subject button is clicked\n//         setSelectedSubject(subject);\n//     };\n\n//     const [questionData, setQuestionData] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//     const [Subjects, setSubjects] = useState([]);\n//     const { testCreationTableId, subjectId } = useParams();\n//     const [sections, setSections] = useState([]);\n\n\n//     const [questionStatus, setQuestionStatus] = useState(\n//         Array(questionData.length).fill(\"notAnswered\")\n//     );\n\n//     const [answeredCount, setAnsweredCount] = useState(0);\n//     const [notAnsweredCount, setNotAnsweredCount] = useState(0);\n//     const [answeredmarkedForReviewCount, setAnsweredmarkedForReviewCount] =\n//         useState(0);\n//     const [markedForReviewCount, setMarkedForReviewCount] = useState(0);\n//     const [VisitedCount, setVisitedCount] = useState(0);\n\n\n//     const updateCounters = () => {\n//         let answered = 0;\n//         let notAnswered = 0;\n//         let marked = 0;\n//         let markedForReview = 0;\n//         let Visited = 0;\n\n//         questionStatus.forEach((status) => {\n//             if (status === \"answered\") {\n//                 answered++;\n//             } else if (status === \"notAnswered\") {\n//                 notAnswered++;\n//             } else if (status === \"marked\") {\n//                 marked++;\n//             } else if (status === \"Answered but marked for review\") {\n//                 markedForReview++;\n//             } else if (status === \"notVisited\") {\n//                 Visited++;\n//             }\n//         });\n\n//         setAnsweredCount(answered);\n//         setNotAnsweredCount(notAnswered);\n//         setAnsweredmarkedForReviewCount(marked);\n//         setMarkedForReviewCount(markedForReview);\n//         setVisitedCount(Visited);\n//     };\n\n\n//     // ---------------------------------Timer code Start--------------------------------\n//     const [timer, setTimer] = useState(0);\n//     const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\n\n//     const formatTime = (seconds) => {\n//         const hours = Math.floor(seconds / 3600);\n\n//         const minutes = Math.floor((seconds % 3600) / 60);\n\n//         const remainingSeconds = seconds % 60;\n\n//         return `${hours > 9 ? hours : \"0\" + hours}:${minutes > 9 ? minutes : \"0\" + minutes\n//             }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n//     };\n\n//     useEffect(() => {\n//         // Set the timer to the saved value for the current question\n//         setTimer(timers[currentQuestionIndex] || 0);\n//         let interval;\n//         interval = setInterval(() => {\n//             setTimer((prevTimer) => prevTimer + 1);\n//         }, 1000);\n//         // Clear the interval when the component unmounts or when the user moves to the next question\n//         return () => {\n//             clearInterval(interval);\n//         };\n//     }, [currentQuestionIndex, timers]);\n//     // ------------------------------------Timer code end--------------------------------\n\n\n//     useEffect(() => {\n//         const fetchSubjects = async () => {\n//             try {\n//                 const response = await fetch(\n//                     `http://localhost:4009/subjects/${testCreationTableId}`\n//                 );\n//                 const data = await response.json();\n//                 setSubjects(data);\n//             } catch (error) {\n//                 console.error(error);\n//             }\n//         };\n\n\n\n\n//         const fetchSections = async () => {\n//             try {\n//                 const response = await fetch(\n//                     `http://localhost:4009/fetchSections/${testCreationTableId}`\n//                 );\n//                 const data = await response.json();\n//                 setSections(data);\n//             } catch (error) {\n//                 console.error(error);\n//             }\n//         };\n\n\n\n\n\n\n//         const fetchQuestionData = async () => {\n//             try {\n//                 const response = await fetch(\n//                     `http://localhost:4009/getPaperData/${testCreationTableId}`\n//                 );\n//                 const data = await response.json();\n\n//                 // Check if the data has both 'questions' and 'options' properties\n//                 if (data && data.questions && data.options) {\n//                     // Assuming both questions and options are arrays, you might want to merge them\n//                     const mergedData = data.questions.map((question, index) => ({\n//                         ...question,\n//                         options: data.options.slice(index * 4, (index + 1) * 4), // Assuming 4 options per question\n//                     }));\n\n//                     setQuestionData(mergedData);\n//                     setQuestionStatus([\n//                         \"notAnswered\",\n//                         ...Array(mergedData.length - 1).fill(\"notVisited\"),\n//                     ]);\n//                 } else {\n//                     console.error(\"API response does not have expected structure:\", data);\n//                 }\n//             } catch (error) {\n//                 console.error(error);\n//             }\n//         };\n\n\n//         fetchSubjects();\n//         fetchSections();\n//         fetchQuestionData();\n//     }, [testCreationTableId]);\n\n\n//     useEffect(() => {\n//         // Call the updateCounters function initially when the component mounts\n//         updateCounters();\n//     }, [questionStatus]);\n\n\n\n//     const [selectedAnswers, setSelectedAnswers] = useState(\n//         Array(questionData.length).fill(\"\")\n//     );\n\n\n\n\n\n\n//     const onAnswerSelected = (OptionLetter) => {\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//         setSelectedAnswers(updatedSelectedAnswers);\n\n//     };\n\n//     const [activeQuestion, setActiveQuestion] = useState(0);\n\n\n//     const markForReview = () => {\n//         // Update questionStatus for the marked question\n//         const updatedQuestionStatus = [...questionStatus];\n//         if (selectedAnswers[activeQuestion]) {\n//             updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n//             if (selectedAnswers[activeQuestion] === \"Answered but marked for review\") {\n//                 updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n//             }\n//         } else if (!selectedAnswers[activeQuestion]) {\n//             updatedQuestionStatus[activeQuestion] = \"marked\";\n//         }\n\n//         setQuestionStatus(updatedQuestionStatus);\n//     };\n\n\n\n\n\n//     const clearResponse = () => {\n//         // Clear the selected answer\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[currentQuestionIndex] = \"\";\n//         setSelectedAnswers(updatedSelectedAnswers);\n\n//         // Update the question status to \"notAnswered\"\n//         setQuestionStatus((prevQuestionStatus) => {\n//             const currentStatus = prevQuestionStatus[currentQuestionIndex];\n//             if (currentStatus === \"answered\") {\n//                 return [\n//                     ...prevQuestionStatus.slice(0, currentQuestionIndex),\n//                     \"notAnswered\",\n//                     ...prevQuestionStatus.slice(currentQuestionIndex + 1),\n//                 ];\n//             }\n//             return prevQuestionStatus;\n//         });\n//     };\n\n\n//     const goToPreviousQuestion = () => {\n//         setCurrentQuestionIndex((prevIndex) => {\n//             // Save the current timer value for the question\n//             const updatedTimers = [...timers];\n//             updatedTimers[prevIndex] = timer;\n//             setTimers(updatedTimers);\n//             // Move to the previous question\n//             return prevIndex - 1;\n//         });\n\n//         setActiveQuestion((prevActiveQuestion) => prevActiveQuestion - 1);\n//     };\n\n\n//     const handleNextClick = () => {\n\n\n//         setCurrentQuestionIndex((prevIndex) => {\n//             // Save the current timer value for the question\n\n//             const updatedTimers = [...timers];\n\n//             updatedTimers[prevIndex] = timer;\n\n//             setTimers(updatedTimers);\n//             return prevIndex + 1;\n//         });\n\n//         const updatedQuestionStatus = [...questionStatus];\n\n//         if (activeQuestion < questionData.length - 1) {\n//             // Check the status of the next question\n//             const nextQuestionStatus = questionStatus[activeQuestion + 1];\n\n//             if (nextQuestionStatus === \"answered\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"answered\";\n//             } else if (nextQuestionStatus === \"notAnswered\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n//             } else if (!markForReview() === false) {\n//                 markForReview();\n//             }\n\n//             setActiveQuestion((prevActiveQuestion) => prevActiveQuestion + 1);\n//         }\n\n//         updateCounters();\n\n\n\n//         // Set status of the next question (if any) to \"notAnswered\"\n\n//         if (activeQuestion < questionData.length - 1) {\n//             const updatedQuestionStatus = [...questionStatus];\n//             const nextQuestionStatus = questionStatus[activeQuestion + 1];\n\n//             if (nextQuestionStatus === \"notVisited\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n//             }\n\n//             if (selectedAnswers[activeQuestion] === \"answered\") {\n//                 updatedQuestionStatus[activeQuestion] = \"answered\";\n//             } else if (markForReview() === true) {\n//                 updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n//             } else if (markForReview() === false) {\n//                 updatedQuestionStatus[activeQuestion] = \"marked\";\n//             }\n\n//             if (nextQuestionStatus === \"notAnswered\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n//             }\n\n//             setQuestionStatus(updatedQuestionStatus);\n//         }\n\n\n\n//             // Update the question status to \"answered\" only if an answer has been selected\n//     if (selectedAnswers[activeQuestion]) {\n//         setQuestionStatus((prevQuestionStatus) => {\n//             const currentStatus = prevQuestionStatus[activeQuestion];\n//             if (currentStatus === \"notAnswered\") {\n//                 return [\n//                     ...prevQuestionStatus.slice(0, activeQuestion),\n//                     \"answered\",\n//                     ...prevQuestionStatus.slice(activeQuestion + 1),\n//                 ];\n//             }\n//             return prevQuestionStatus;\n//         });\n//     }\n\n//     };\n\n\n//     const [accuracy, setAccuracy] = useState(0);\n//     const [averageScore, setAverageScore] = useState(0);\n//     const [topScore, setTopScore] = useState(0);\n//     const [liveRank, setLiveRank] = useState(0);\n\n//     const calculateQuestionCounts = () => {\n//         let answered = 0;\n//         let notAnswered = 0;\n//         let markedForReview = 0;\n//         let answeredmarkedForReviewCount = 0;\n//         let VisitedCount = 0;\n\n//         questionStatus.forEach((status, index) => {\n//             if (status === \"answered\") {\n//                 answered++;\n//             } else if (status === \"notAnswered\") {\n//                 notAnswered++;\n//             } else if (status === \"marked\") {\n//                 markedForReview++;\n//             } else if (status === \"Answered but marked for review\") {\n//                 answeredmarkedForReviewCount++;\n//             } else if (status === \"notVisited\") {\n//                 VisitedCount++;\n//             }\n//         });\n\n//         return {\n//             answered,\n//             notAnswered,\n//             markedForReview,\n//             answeredmarkedForReviewCount,\n//             VisitedCount,\n//         };\n//     };\n\n\n//     const [showResult, setShowResult] = useState(false);\n//     const navigate = useNavigate();\n\n\n//     const handleSubmit = () => {\n//         window.alert(\"Your Test has been Submitted!! Click Ok to See Result.\");\n\n\n\n//         // Call the function to get question counts\n//         const {\n//             answered,\n//             notAnswered,\n//             markedForReview,\n//             answeredmarkedForReviewCount,\n//             VisitedCount,\n//         } = calculateQuestionCounts();\n\n\n//         // Add any additional logic you need for submitting the exam\n//         // For example, you might want to send this data to the server.\n//          // Redirect to the result page\n//          navigate(\"/result\", {\n//             state: {\n//               answeredCount: answered,\n//               notAnsweredCount: notAnswered,\n//               markedForReviewCount: markedForReview,\n//               answeredmarkedForReviewCount: answeredmarkedForReviewCount,\n//               VisitedCount: VisitedCount,\n//             },\n//         });\n//     };\n\n\n\n//     const handleQuestionSelect = (questionNumber) => {\n//         setCurrentQuestionIndex(questionNumber - 1);\n//         setActiveQuestion(questionNumber - 1);\n//     };\n\n\n\n\n\n\n\n//     return (\n\n//         <div className=\"Main-Page\">\n//            {showResult ? (\n//         // Render the ResultPage component here\n//         <TestResultsPage\n//           answeredCount={answeredCount}\n//           notAnsweredCount={notAnsweredCount}\n//           markedForReviewCount={markedForReviewCount}\n//           answeredmarkedForReviewCount={answeredmarkedForReviewCount}\n//           VisitedCount={VisitedCount}\n//         />\n//       ) : (\n//         <div>\n//         <div>\n//             <PaperHeader />\n//         </div>\n//         <div className=\"QUESTIONS_CONTAINER\">\n//             <div className=\"QUESTIONS_CONTAINER_subpart\">\n//             <div className=\"subjects\">\n//             {Subjects.map((subjectTitle, index) => (\n//                 <li key={index}>\n//                     <Link ><button className=\"subject-btn\" onClick={() => handleSubjectSelect(subjectTitle.subjectName)}>{subjectTitle.subjectName}</button></Link>\n//                     {/* <button className=\"subject-btn\">{subjectTitle.subjectName}</button> */}\n//                 </li>\n//             ))}\n\n//         </div>\n\n\n//         <div className=\"second-header\">\n//             <div className=\"single-select-question\">\n//                 {sections.map((sectionTitle, index) => (\n//                     <li key={index}>\n//                         <p>{sectionTitle.sectionName}</p>\n\n//                     </li>\n//                 ))}\n//                 {/* Single Select Question */}\n//             </div>\n//             <div className=\"right-header\">\n//                 <div className=\"marks\">\n//                     Marks: <div className=\"plus-mark\">+1</div>\n//                     <div className=\"minus-mark\">-1</div>\n//                 </div>\n//                 <div>Timer: {formatTime(timer)}</div>\n//             </div>\n//         </div>\n\n\n//         <div className=\"Question_No_heading\">\n//             <p>  Question No. {currentQuestionIndex + 1}  of {questionData.length}</p>\n//         </div>\n\n\n//         <div  className=\"_quizexampart \">\n// {questionData.length > 0 && (\n//             <div className=\"quizexampart_q_O_container\">\n//                 <h4>\n//                     {/* {currentQuestionIndex + 1}. */}\n\n//                     <img\n//                         src={`data:image/png;base64,${questionData[currentQuestionIndex].question_img}`}\n//                         alt={`Question ${currentQuestionIndex + 1}`}\n//                     />\n//                 </h4>\n\n//                 {questionData[currentQuestionIndex].options.map(\n//                     (OptionImage, optionIndex) => (\n//                         <li key={optionIndex}>\n//                             <input\n//                                 type=\"radio\"\n//                                 name={`question-${currentQuestionIndex}-option`}\n//                                 value={optionIndex}\n//                                 checked={\n//                                     selectedAnswers[currentQuestionIndex] === optionIndex\n//                                 }\n//                                 onChange={() => onAnswerSelected(optionIndex)}\n//                             />\n//                             {OptionImage && OptionImage.option_img && (\n//                                 <img\n//                                     key={OptionImage.question_id}\n//                                     src={`data:image/png;base64,${OptionImage.option_img}`}\n//                                     alt={`Option ${optionIndex + 1}`}\n//                                 />\n//                             )}\n//                         </li>\n//                     )\n//                 )}\n//                 <div className=\"flex-right\">\n//                     <button className=\"clear-btn\" onClick={markForReview}>\n//                         Mark for Review & Next\n//                     </button>\n//                     <button className=\"clear-btn\" onClick={clearResponse}>\n//                         Clear Response\n//                     </button>\n//                     <button\n//                         className=\"previous-btn\"\n//                         onClick={goToPreviousQuestion}\n//                         disabled={currentQuestionIndex === 0}\n//                     >\n//                         <i className=\"fa-solid fa-angles-left\"></i> Previous\n//                     </button>\n//                     <button className=\"save-btn\" onClick={handleNextClick}>\n//                         Next <i className=\"fa-solid fa-angles-right\"></i>\n//                     </button>\n//                 </div>\n//             </div>\n//         )}\n// </div>\n//             </div>\n\n\n// <div className=\"rightsidebar\">\n//                 <ButtonsFunctionality\n//                     onQuestionSelect={handleQuestionSelect}\n//                     questionStatus={questionStatus}\n//                     setQuestionStatus={setQuestionStatus}\n//                     answeredCount={answeredCount}\n//                     notAnsweredCount={notAnsweredCount}\n//                     answeredmarkedForReviewCount={answeredmarkedForReviewCount}\n//                     markedForReviewCount={markedForReviewCount}\n//                     VisitedCount={VisitedCount}\n//                     selectedSubject={selectedSubject}\n//                     questionData={questionData}\n//                 />\n//                 <button onClick={handleSubmit} id=\"resume_btn\">\n//                     Submit\n//                 </button>\n//             </div>\n\n//         </div>\n\n\n\n\n\n//     </div>\n//       )}\n\n\n\n\n//         </div>\n//     )\n// }\n\n// export default QuestionsFunctionality\n\n\n\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport ButtonsFunctionality from \"./ButtonsFunctionality\";\nimport TestResultsPage from \"./TestResultsPage\";\nimport \"../Paper/Paper.css\";\n\nconst QuestionsFunctionality = ({ answeredQuestions }) => {\n  const [selectedSubject, setSelectedSubject] = useState(null);\n  const [data, setData] = useState(null);\n\n  const [questionStatus, setQuestionStatus] = useState(\n    Array.isArray(data) ? Array(data.questions.length).fill(\"notAnswered\") : []\n  );\n\n  const [answeredCount, setAnsweredCount] = useState(0);\n  const [notAnsweredCount, setNotAnsweredCount] = useState(0);\n  const [answeredmarkedForReviewCount, setAnsweredmarkedForReviewCount] =\n    useState(0);\n  const [markedForReviewCount, setMarkedForReviewCount] = useState(0);\n  const [VisitedCount, setVisitedCount] = useState(0);\n\n  const navigate = useNavigate();\n  const [activeQuestion, setActiveQuestion] = useState(0);\n\n  const calculateQuestionCounts = () => {\n    let answered = 0;\n    let notAnswered = 0;\n    let markedForReview = 0;\n    let answeredmarkedForReviewCount = 0;\n    let VisitedCount = 0;\n\n    questionStatus.forEach((status, index) => {\n      if (status === \"answered\") {\n        answered++;\n      } else if (status === \"notAnswered\") {\n        notAnswered++;\n      } else if (status === \"marked\") {\n        markedForReview++;\n      } else if (status === \"Answered but marked for review\") {\n        answeredmarkedForReviewCount++;\n      } else if (status === \"notVisited\") {\n        VisitedCount++;\n      }\n    });\n\n    return {\n      answered,\n      notAnswered,\n      markedForReview,\n      answeredmarkedForReviewCount,\n      VisitedCount,\n    };\n  };\n\n  const handleSubmit = () => {\n    window.alert(\"Your Test has been Submitted!! Click Ok to See Result.\");\n\n    const {\n      answered,\n      notAnswered,\n      markedForReview,\n      answeredmarkedForReviewCount,\n      VisitedCount,\n    } = calculateQuestionCounts();\n\n    navigate(\"/result\", {\n      state: {\n        answeredCount: answered,\n        notAnsweredCount: notAnswered,\n        markedForReviewCount: markedForReview,\n        answeredmarkedForReviewCount: answeredmarkedForReviewCount,\n        VisitedCount: VisitedCount,\n      },\n    });\n  };\n\n  const handleQuestionSelect = (questionNumber) => {\n    setCurrentQuestionIndex(questionNumber - 1);\n    setActiveQuestion(questionNumber - 1);\n  };\n\n  const { subjectId, testCreationTableId } = useParams();\n  const [Subjects, setSubjects] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [sections, setSections] = useState([]);\n  const [selectedAnswersMap, setSelectedAnswersMap] = useState({});\n  const [markedQuestions, setMarkedQuestions] = useState([]);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [timer, setTimer] = useState(0);\n  const [timers, setTimers] = useState(Array(data));\n\n  useEffect(() => {\n    const fetchData = async (selectedSubjectId = null) => {\n      let subjectsData; // Define subjectsData here\n\n      try {\n        const responseSubjects = await fetch(\n          `http://localhost:4009/subjects/${testCreationTableId}`\n        );\n        subjectsData = await responseSubjects.json();\n        setSubjects(subjectsData);\n        console.log(subjectsData);\n\n        const leastSubjectId =\n          subjectsData.length > 0\n            ? Math.min(...subjectsData.map((subject) => subject.subjectId))\n            : null;\n\n        const defaultSubjectId =\n          selectedSubjectId || subjectId || leastSubjectId;\n\n        const response = await fetch(\n          `http://localhost:4009/getPaperData/${testCreationTableId}/${defaultSubjectId}`\n        );\n        const result = await response.json();\n        setData(result);\n\n        const linkUrl = `/subjects/${testCreationTableId}/${subjectId ||\n          leastSubjectId}`;\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData(selectedSubject);\n  }, [testCreationTableId, subjectId, selectedSubject]);\n\n  useEffect(() => {\n    const fetchSections = async () => {\n      try {\n        const response = await fetch(\n          `http://localhost:4009/fetchSections/${testCreationTableId}`\n        );\n        const data = await response.json();\n        setSections(data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchSections();\n  }, [testCreationTableId]);\n\n  const handleSubjectSelect = async (selectedSubjectId) => {\n    setSelectedSubject(selectedSubjectId);\n\n    // Fetch data for the selected subject\n    await fetchData(selectedSubjectId);\n  };\n\n  const handleNextClick = () => {\n    setCurrentQuestionIndex((prevIndex) =>\n      prevIndex < data.questions.length - 1 ? prevIndex + 1 : prevIndex\n    );\n  };\n\n  const handlePreviousClick = () => {\n    setCurrentQuestionIndex((prevIndex) =>\n      prevIndex > 0 ? prevIndex - 1 : prevIndex\n    );\n  };\n\n  const formatTime = (seconds) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const remainingSeconds = seconds % 60;\n    return `${hours > 9 ? hours : \"0\" + hours}:${minutes > 9 ? minutes : \"0\" + minutes\n      }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n  };\n\n  useEffect(() => {\n    setTimer(timers[currentQuestionIndex] || 0);\n    let interval;\n    interval = setInterval(() => {\n      setTimer((prevTimer) => prevTimer + 1);\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [currentQuestionIndex, timers]);\n\n  const onAnswerSelected = (optionIndex) => {\n    const updatedSelectedAnswers = [...selectedAnswers];\n    updatedSelectedAnswers[currentQuestionIndex] = optionIndex;\n\n    setSelectedAnswersMap((prevMap) => ({\n      ...prevMap,\n      [data.subjectId]: updatedSelectedAnswers,\n    }));\n\n    setSelectedAnswers(updatedSelectedAnswers);\n  };\n\n  return (\n    <div>\n      <div className=\"subjects\">\n        {Subjects.map((subjectTitle) => (\n          <li key={subjectTitle.subjectId}>\n            <button\n              onClick={() => handleSubjectSelect(subjectTitle.subjectId)}\n              className=\"subject-btn\"\n            >\n              {subjectTitle.subjectName}\n            </button>\n          </li>\n        ))}\n      </div>\n      {/* ... (rest of the code) */}\n    </div>\n  );\n};\n\nexport default QuestionsFunctionality;\n"],"mappings":";;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAOA;AACA;AACA;AACA;;AAEA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAMA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;;AAGA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAIA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAGA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAQA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;;AAKA;AACA;AACA;;AAEA;;AAKA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,OAAOC,oBAAoB,MAAM,wBAAwB;AACzD,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,sBAAsB,GAAGA,CAAC;EAAEC;AAAkB,CAAC,KAAK;EAAAC,EAAA;EACxD,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAEtC,MAAM,CAACe,cAAc,EAAEC,iBAAiB,CAAC,GAAGhB,QAAQ,CAClDiB,KAAK,CAACC,OAAO,CAACL,IAAI,CAAC,GAAGI,KAAK,CAACJ,IAAI,CAACM,SAAS,CAACC,MAAM,CAAC,CAACC,IAAI,CAAC,aAAa,CAAC,GAAG,EAC3E,CAAC;EAED,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGvB,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACwB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGzB,QAAQ,CAAC,CAAC,CAAC;EAC3D,MAAM,CAAC0B,4BAA4B,EAAEC,+BAA+B,CAAC,GACnE3B,QAAQ,CAAC,CAAC,CAAC;EACb,MAAM,CAAC4B,oBAAoB,EAAEC,uBAAuB,CAAC,GAAG7B,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM,CAAC8B,YAAY,EAAEC,eAAe,CAAC,GAAG/B,QAAQ,CAAC,CAAC,CAAC;EAEnD,MAAMgC,QAAQ,GAAG7B,WAAW,CAAC,CAAC;EAC9B,MAAM,CAAC8B,cAAc,EAAEC,iBAAiB,CAAC,GAAGlC,QAAQ,CAAC,CAAC,CAAC;EAEvD,MAAMmC,uBAAuB,GAAGA,CAAA,KAAM;IACpC,IAAIC,QAAQ,GAAG,CAAC;IAChB,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,eAAe,GAAG,CAAC;IACvB,IAAIZ,4BAA4B,GAAG,CAAC;IACpC,IAAII,YAAY,GAAG,CAAC;IAEpBf,cAAc,CAACwB,OAAO,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;MACxC,IAAID,MAAM,KAAK,UAAU,EAAE;QACzBJ,QAAQ,EAAE;MACZ,CAAC,MAAM,IAAII,MAAM,KAAK,aAAa,EAAE;QACnCH,WAAW,EAAE;MACf,CAAC,MAAM,IAAIG,MAAM,KAAK,QAAQ,EAAE;QAC9BF,eAAe,EAAE;MACnB,CAAC,MAAM,IAAIE,MAAM,KAAK,gCAAgC,EAAE;QACtDd,4BAA4B,EAAE;MAChC,CAAC,MAAM,IAAIc,MAAM,KAAK,YAAY,EAAE;QAClCV,YAAY,EAAE;MAChB;IACF,CAAC,CAAC;IAEF,OAAO;MACLM,QAAQ;MACRC,WAAW;MACXC,eAAe;MACfZ,4BAA4B;MAC5BI;IACF,CAAC;EACH,CAAC;EAED,MAAMY,YAAY,GAAGA,CAAA,KAAM;IACzBC,MAAM,CAACC,KAAK,CAAC,wDAAwD,CAAC;IAEtE,MAAM;MACJR,QAAQ;MACRC,WAAW;MACXC,eAAe;MACfZ,4BAA4B;MAC5BI;IACF,CAAC,GAAGK,uBAAuB,CAAC,CAAC;IAE7BH,QAAQ,CAAC,SAAS,EAAE;MAClBa,KAAK,EAAE;QACLvB,aAAa,EAAEc,QAAQ;QACvBZ,gBAAgB,EAAEa,WAAW;QAC7BT,oBAAoB,EAAEU,eAAe;QACrCZ,4BAA4B,EAAEA,4BAA4B;QAC1DI,YAAY,EAAEA;MAChB;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMgB,oBAAoB,GAAIC,cAAc,IAAK;IAC/CC,uBAAuB,CAACD,cAAc,GAAG,CAAC,CAAC;IAC3Cb,iBAAiB,CAACa,cAAc,GAAG,CAAC,CAAC;EACvC,CAAC;EAED,MAAM;IAAEE,SAAS;IAAEC;EAAoB,CAAC,GAAGhD,SAAS,CAAC,CAAC;EACtD,MAAM,CAACiD,QAAQ,EAAEC,WAAW,CAAC,GAAGpD,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACqD,oBAAoB,EAAEL,uBAAuB,CAAC,GAAGhD,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM,CAACsD,QAAQ,EAAEC,WAAW,CAAC,GAAGvD,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACwD,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGzD,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChE,MAAM,CAAC0D,eAAe,EAAEC,kBAAkB,CAAC,GAAG3D,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAAC4D,eAAe,EAAEC,kBAAkB,CAAC,GAAG7D,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAAC8D,KAAK,EAAEC,QAAQ,CAAC,GAAG/D,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACgE,MAAM,EAAEC,SAAS,CAAC,GAAGjE,QAAQ,CAACiB,KAAK,CAACJ,IAAI,CAAC,CAAC;EAEjDZ,SAAS,CAAC,MAAM;IACd,MAAMiE,SAAS,GAAG,MAAAA,CAAOC,iBAAiB,GAAG,IAAI,KAAK;MACpD,IAAIC,YAAY,CAAC,CAAC;;MAElB,IAAI;QACF,MAAMC,gBAAgB,GAAG,MAAMC,KAAK,CACjC,kCAAiCpB,mBAAoB,EACxD,CAAC;QACDkB,YAAY,GAAG,MAAMC,gBAAgB,CAACE,IAAI,CAAC,CAAC;QAC5CnB,WAAW,CAACgB,YAAY,CAAC;QACzBI,OAAO,CAACC,GAAG,CAACL,YAAY,CAAC;QAEzB,MAAMM,cAAc,GAClBN,YAAY,CAAChD,MAAM,GAAG,CAAC,GACnBuD,IAAI,CAACC,GAAG,CAAC,GAAGR,YAAY,CAACS,GAAG,CAAEC,OAAO,IAAKA,OAAO,CAAC7B,SAAS,CAAC,CAAC,GAC7D,IAAI;QAEV,MAAM8B,gBAAgB,GACpBZ,iBAAiB,IAAIlB,SAAS,IAAIyB,cAAc;QAElD,MAAMM,QAAQ,GAAG,MAAMV,KAAK,CACzB,sCAAqCpB,mBAAoB,IAAG6B,gBAAiB,EAChF,CAAC;QACD,MAAME,MAAM,GAAG,MAAMD,QAAQ,CAACT,IAAI,CAAC,CAAC;QACpCzD,OAAO,CAACmE,MAAM,CAAC;QAEf,MAAMC,OAAO,GAAI,aAAYhC,mBAAoB,IAAGD,SAAS,IAC3DyB,cAAe,EAAC;MACpB,CAAC,CAAC,OAAOS,KAAK,EAAE;QACdX,OAAO,CAACW,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDjB,SAAS,CAACvD,eAAe,CAAC;EAC5B,CAAC,EAAE,CAACuC,mBAAmB,EAAED,SAAS,EAAEtC,eAAe,CAAC,CAAC;EAErDV,SAAS,CAAC,MAAM;IACd,MAAMmF,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMJ,QAAQ,GAAG,MAAMV,KAAK,CACzB,uCAAsCpB,mBAAoB,EAC7D,CAAC;QACD,MAAMrC,IAAI,GAAG,MAAMmE,QAAQ,CAACT,IAAI,CAAC,CAAC;QAClChB,WAAW,CAAC1C,IAAI,CAAC;MACnB,CAAC,CAAC,OAAOsE,KAAK,EAAE;QACdX,OAAO,CAACW,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAEDC,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAAClC,mBAAmB,CAAC,CAAC;EAEzB,MAAMmC,mBAAmB,GAAG,MAAOlB,iBAAiB,IAAK;IACvDvD,kBAAkB,CAACuD,iBAAiB,CAAC;;IAErC;IACA,MAAMD,SAAS,CAACC,iBAAiB,CAAC;EACpC,CAAC;EAED,MAAMmB,eAAe,GAAGA,CAAA,KAAM;IAC5BtC,uBAAuB,CAAEuC,SAAS,IAChCA,SAAS,GAAG1E,IAAI,CAACM,SAAS,CAACC,MAAM,GAAG,CAAC,GAAGmE,SAAS,GAAG,CAAC,GAAGA,SAC1D,CAAC;EACH,CAAC;EAED,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;IAChCxC,uBAAuB,CAAEuC,SAAS,IAChCA,SAAS,GAAG,CAAC,GAAGA,SAAS,GAAG,CAAC,GAAGA,SAClC,CAAC;EACH,CAAC;EAED,MAAME,UAAU,GAAIC,OAAO,IAAK;IAC9B,MAAMC,KAAK,GAAGhB,IAAI,CAACiB,KAAK,CAACF,OAAO,GAAG,IAAI,CAAC;IACxC,MAAMG,OAAO,GAAGlB,IAAI,CAACiB,KAAK,CAAEF,OAAO,GAAG,IAAI,GAAI,EAAE,CAAC;IACjD,MAAMI,gBAAgB,GAAGJ,OAAO,GAAG,EAAE;IACrC,OAAQ,GAAEC,KAAK,GAAG,CAAC,GAAGA,KAAK,GAAG,GAAG,GAAGA,KAAM,IAAGE,OAAO,GAAG,CAAC,GAAGA,OAAO,GAAG,GAAG,GAAGA,OACxE,IAAGC,gBAAgB,GAAG,CAAC,GAAGA,gBAAgB,GAAG,GAAG,GAAGA,gBAAiB,EAAC;EAC1E,CAAC;EAED7F,SAAS,CAAC,MAAM;IACd8D,QAAQ,CAACC,MAAM,CAACX,oBAAoB,CAAC,IAAI,CAAC,CAAC;IAC3C,IAAI0C,QAAQ;IACZA,QAAQ,GAAGC,WAAW,CAAC,MAAM;MAC3BjC,QAAQ,CAAEkC,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC;IACxC,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAM;MACXC,aAAa,CAACH,QAAQ,CAAC;IACzB,CAAC;EACH,CAAC,EAAE,CAAC1C,oBAAoB,EAAEW,MAAM,CAAC,CAAC;EAElC,MAAMmC,gBAAgB,GAAIC,WAAW,IAAK;IACxC,MAAMC,sBAAsB,GAAG,CAAC,GAAGzC,eAAe,CAAC;IACnDyC,sBAAsB,CAAChD,oBAAoB,CAAC,GAAG+C,WAAW;IAE1D3C,qBAAqB,CAAE6C,OAAO,KAAM;MAClC,GAAGA,OAAO;MACV,CAACzF,IAAI,CAACoC,SAAS,GAAGoD;IACpB,CAAC,CAAC,CAAC;IAEHxC,kBAAkB,CAACwC,sBAAsB,CAAC;EAC5C,CAAC;EAED,oBACE9F,OAAA;IAAAgG,QAAA,eACEhG,OAAA;MAAKiG,SAAS,EAAC,UAAU;MAAAD,QAAA,EACtBpD,QAAQ,CAAC0B,GAAG,CAAE4B,YAAY,iBACzBlG,OAAA;QAAAgG,QAAA,eACEhG,OAAA;UACEmG,OAAO,EAAEA,CAAA,KAAMrB,mBAAmB,CAACoB,YAAY,CAACxD,SAAS,CAAE;UAC3DuD,SAAS,EAAC,aAAa;UAAAD,QAAA,EAEtBE,YAAY,CAACE;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnB;MAAC,GANFN,YAAY,CAACxD,SAAS;QAAA2D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAO3B,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEH,CAAC;AAEV,CAAC;AAACrG,EAAA,CA7MIF,sBAAsB;EAAA,QAeTL,WAAW,EA4DeD,SAAS;AAAA;AAAA8G,EAAA,GA3EhDxG,sBAAsB;AA+M5B,eAAeA,sBAAsB;AAAC,IAAAwG,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}