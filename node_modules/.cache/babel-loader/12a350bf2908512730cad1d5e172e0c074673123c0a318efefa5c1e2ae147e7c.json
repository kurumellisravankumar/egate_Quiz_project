{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/egate_Quiz_project/src/Pages/MainQuizFunctionality/ButtonsFunctionality.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport \"../RightSidebar/RightSidebar.css\";\nimport PropTypes from \"prop-types\";\n\n// const buttons = [\n//   1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n//   23, 24, 25, 26, 27, 28, 29, 30,\n// ];\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ButtonsFunctionality = ({\n  onQuestionSelect,\n  questionStatus,\n  seconds,\n  setQuestionStatus,\n  answeredCount,\n  notAnsweredCount,\n  answeredmarkedForReviewCount,\n  markedForReviewCount,\n  VisitedCount,\n  selectedSubject,\n  questionData\n}) => {\n  _s();\n  const sections = [\n  // Your section data here (adjust based on your actual data structure)\n  {\n    sectionId: 1,\n    sectionName: 'Mathematics',\n    subject: 'Mathematics'\n  }, {\n    sectionId: 2,\n    sectionName: 'Chemistry',\n    subject: 'Chemistry'\n  }, {\n    sectionId: 4,\n    sectionName: 'Physics',\n    subject: 'Physics'\n  }];\n  const renderQuestionButtons = () => {\n    return questionData.map((question, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(index + 1),\n        className: \"right_bar_Buttons\",\n        children: index + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this));\n  };\n  const renderSectionButtons = () => {\n    // Filter sections based on the selected subject\n    const filteredSections = sections.filter(section => section.subject === selectedSubject);\n    console.log(\"Filtered Sections:\", filteredSections);\n    console.log(\"Question Data:\", questionData);\n    // Render buttons for filteredSections\n    return filteredSections.map((section, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"section-btn\",\n        onClick: () => handleButtonClick(section.sectionId),\n        children: [\"You are viewing\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"subject\",\n          children: [\" \", section.sectionName, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 36\n        }, this), \"Section Question Palette\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this));\n  };\n  const [activeQuestion, setActiveQuestion] = useState(0);\n  const [answeredQuestions, setAnsweredQuestions] = useState([]);\n  const [isPaused, setIsPaused] = useState(false);\n  const handleButtonClick = questionNumber => {\n    onQuestionSelect(questionNumber);\n    setAnsweredQuestions([...answeredQuestions, questionNumber]);\n    setIsPaused(false);\n    let className = \"quesAns-btn \";\n    if (questionStatus && questionStatus[index] === \"answered\") {\n      className += \" instruction-btn1\";\n    } else if (questionStatus && questionStatus[index] === \"notAnswered\") {\n      className += \" instruction-btn2\";\n    } else if (questionStatus && questionStatus[index] === \"marked\") {\n      className += \" instruction-btn3\";\n    } else if (questionStatus && questionStatus[index] === \"Answered but marked for review\") {\n      className += \" instruction-btn4\";\n    } else if (questionStatus && questionStatus[index] === \"Visited\") {\n      className += \" instruction-btn6\";\n    }\n    const isVisitedButNotAnswered = questionStatus[questionNumber - 1] === \"notVisited\";\n    if (isVisitedButNotAnswered) {\n      // Mark the question as \"not answered\"\n      const updatedQuestionStatus = [...questionStatus];\n      updatedQuestionStatus[questionNumber - 1] = \"notAnswered\";\n      setQuestionStatus(updatedQuestionStatus);\n    } else if (questionStatus[questionNumber - 1] === \"marked\") {\n      // Mark the question as \"Marked for review\" by default if not visited\n      const updatedQuestionStatus = [...questionStatus];\n      updatedQuestionStatus[questionNumber - 1] = \"markedForReview\";\n      setQuestionStatus(updatedQuestionStatus);\n    }\n  };\n  ButtonsFunctionality.propTypes = {\n    onQuestionSelect: PropTypes.func.isRequired,\n    questionStatus: PropTypes.arrayOf(PropTypes.string),\n    onResumeTimer: PropTypes.func.isRequired,\n    // Define the prop type for onResumeTimer\n    questionData: PropTypes.array.isRequired\n  };\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [timers, setTimers] = useState(new Array().fill(0));\n  const [timer, setTimer] = useState(0);\n  useEffect(() => {\n    // Set the timer to the saved value for the current question\n    setTimer(timers[currentQuestionIndex] || 0);\n    let interval;\n    // interval = setInterval(() => {\n    //     setTimer(prevTimer => prevTimer + 1);\n    // }, 1000);\n\n    if (!isPaused) {\n      interval = setInterval(() => {\n        setTimer(prevTimer => prevTimer + 1);\n      }, 1000);\n    }\n\n    // Clear the interval when the component unmounts or when the user moves to the next question\n    return () => {\n      clearInterval(interval);\n    };\n  }, [currentQuestionIndex, timers, isPaused]);\n  const visted = () => {\n    setQuestionStatus(Array(1).fill(\"Visited\"));\n  };\n\n  //   const renderList = buttons.map((item, index) => {\n  //     let className = \"quesAns-btn \";\n  //     if (questionStatus && questionStatus[index] === \"answered\") {\n  //       className += \" instruction-btn1\";\n  //     } else if (questionStatus && questionStatus[index] === \"notAnswered\") {\n  //       className += \" instruction-btn2\";\n  //     } else if (questionStatus && questionStatus[index] === \"marked\") {\n  //       className += \" instruction-btn3\";\n  //     } else if (\n  //       questionStatus &&\n  //       questionStatus[index] === \"Answered but marked for review\"\n  //     ) {\n  //       className += \" instruction-btn4\";\n  //     } else if (questionStatus && questionStatus[index] === \"Visited\") {\n  //       className += \" instruction-btn6\";\n  //     }\n  //     return (\n  //       <div key={item}>\n  //         <button className={className} onClick={() => handleButtonClick(item)}>\n  //           {item}\n  //         </button>\n  //       </div>\n  //     );\n  //   });\n\n  const totalTime = 180 * 60; // 180 minutes in seconds\n  const [wtimer, setWTimer] = useState(totalTime);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setWTimer(prevTimer => prevTimer - 1);\n    }, 1000);\n\n    // Clear the interval and handle time-up logic when timer reaches 0\n    if (wtimer <= 0) {\n      clearInterval(interval);\n      // Handle time-up logic here (e.g., navigate to a different component)\n    }\n\n    // Clean up the interval on component unmount or when navigating away\n    return () => {\n      clearInterval(interval);\n    };\n  }, [wtimer]);\n  const WformatTime = seconds => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor(seconds % 3600 / 60);\n    const remainingSeconds = seconds % 60;\n    return `${hours > 9 ? hours : \"0\" + hours}:${minutes > 9 ? minutes : \"0\" + minutes}:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"right-side-bar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rightSidebar-topHeader\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Name of the person\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Time Left: \", WformatTime(wtimer)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar-header\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"header-para\",\n        children: renderSectionButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ques-btn\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"btn-ul quesAns-btn \",\n        children: renderQuestionButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar-footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"sidebar-footer-header\",\n        children: \"Legend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-btns\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inst-btns\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"instruction-btn1\",\n            children: answeredCount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Answerd\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inst-btns\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"instruction-btn2\",\n            children: notAnsweredCount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Not Answered\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inst-btns\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"instruction-btn3\",\n            children: answeredmarkedForReviewCount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Marked\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inst-btns\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"instruction-btn4\",\n            children: markedForReviewCount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Answered but marked for review\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inst-btns\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"instruction-btn5\",\n            children: VisitedCount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Not Visited\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 9\n  }, this);\n};\n_s(ButtonsFunctionality, \"HbHDul4XZJ+mZI41WbsYbZ7gSnY=\");\n_c = ButtonsFunctionality;\nexport default ButtonsFunctionality;\nvar _c;\n$RefreshReg$(_c, \"ButtonsFunctionality\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Link","useParams","PropTypes","jsxDEV","_jsxDEV","ButtonsFunctionality","onQuestionSelect","questionStatus","seconds","setQuestionStatus","answeredCount","notAnsweredCount","answeredmarkedForReviewCount","markedForReviewCount","VisitedCount","selectedSubject","questionData","_s","sections","sectionId","sectionName","subject","renderQuestionButtons","map","question","index","children","onClick","handleButtonClick","className","fileName","_jsxFileName","lineNumber","columnNumber","renderSectionButtons","filteredSections","filter","section","console","log","activeQuestion","setActiveQuestion","answeredQuestions","setAnsweredQuestions","isPaused","setIsPaused","questionNumber","isVisitedButNotAnswered","updatedQuestionStatus","propTypes","func","isRequired","arrayOf","string","onResumeTimer","array","currentQuestionIndex","setCurrentQuestionIndex","timers","setTimers","Array","fill","timer","setTimer","interval","setInterval","prevTimer","clearInterval","visted","totalTime","wtimer","setWTimer","WformatTime","hours","Math","floor","minutes","remainingSeconds","_c","$RefreshReg$"],"sources":["/home/user/Documents/egate_Quiz_project/src/Pages/MainQuizFunctionality/ButtonsFunctionality.jsx"],"sourcesContent":["\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport \"../RightSidebar/RightSidebar.css\";\n\nimport PropTypes from \"prop-types\";\n\n// const buttons = [\n//   1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n//   23, 24, 25, 26, 27, 28, 29, 30,\n// ];\n\n\n\nconst ButtonsFunctionality = ({\n    onQuestionSelect,\n    questionStatus,\n    seconds,\n    setQuestionStatus,\n    answeredCount,\n    notAnsweredCount,\n    answeredmarkedForReviewCount,\n    markedForReviewCount,\n    VisitedCount,\n    selectedSubject,\n    questionData, \n}) => {\n\n\n\n    const sections = [\n        // Your section data here (adjust based on your actual data structure)\n        { sectionId: 1, sectionName: 'Mathematics', subject: 'Mathematics' },\n        { sectionId: 2, sectionName: 'Chemistry', subject: 'Chemistry' },\n        { sectionId: 4, sectionName: 'Physics', subject: 'Physics' },\n\n    ];\n\n\n    const renderQuestionButtons = () => {\n        return questionData.map((question, index) => (\n            <li key={index}>\n                {/* Add your logic for rendering question buttons here */}\n                <button onClick={() => handleButtonClick(index + 1)} className=\"right_bar_Buttons\">\n                    {index + 1}\n                </button>\n            </li>\n        ));\n    };\n\n\n    const renderSectionButtons = () => {\n        // Filter sections based on the selected subject\n        const filteredSections = sections.filter(\n            (section) => section.subject === selectedSubject\n        );\n\n\n        console.log(\"Filtered Sections:\", filteredSections);\n        console.log(\"Question Data:\", questionData);\n        // Render buttons for filteredSections\n        return filteredSections.map((section, index) => (\n            <li key={index}>\n                <p className=\"section-btn\" onClick={() => handleButtonClick(section.sectionId)}>\n                    You are viewing<span className=\"subject\"> {section.sectionName} </span>Section\n                    Question Palette\n                </p>\n            </li>\n        ));\n    };\n\n\n\n\n\n    const [activeQuestion, setActiveQuestion] = useState(0);\n    const [answeredQuestions, setAnsweredQuestions] = useState([]);\n    const [isPaused, setIsPaused] = useState(false);\n\n\n    const handleButtonClick = (questionNumber) => {\n        onQuestionSelect(questionNumber);\n        setAnsweredQuestions([...answeredQuestions, questionNumber]);\n        setIsPaused(false);\n\n        let className = \"quesAns-btn \";\n        if (questionStatus && questionStatus[index] === \"answered\") {\n          className += \" instruction-btn1\";\n        } else if (questionStatus && questionStatus[index] === \"notAnswered\") {\n          className += \" instruction-btn2\";\n        } else if (questionStatus && questionStatus[index] === \"marked\") {\n          className += \" instruction-btn3\";\n        } else if (\n          questionStatus &&\n          questionStatus[index] === \"Answered but marked for review\"\n        ) {\n          className += \" instruction-btn4\";\n        } else if (questionStatus && questionStatus[index] === \"Visited\") {\n          className += \" instruction-btn6\";\n        }\n\n        const isVisitedButNotAnswered =\n            questionStatus[questionNumber - 1] === \"notVisited\";\n        if (isVisitedButNotAnswered) {\n            // Mark the question as \"not answered\"\n            const updatedQuestionStatus = [...questionStatus];\n            updatedQuestionStatus[questionNumber - 1] = \"notAnswered\";\n            setQuestionStatus(updatedQuestionStatus);\n        } else if (questionStatus[questionNumber - 1] === \"marked\") {\n            // Mark the question as \"Marked for review\" by default if not visited\n            const updatedQuestionStatus = [...questionStatus];\n            updatedQuestionStatus[questionNumber - 1] = \"markedForReview\";\n            setQuestionStatus(updatedQuestionStatus);\n        }\n    };\n\n    ButtonsFunctionality.propTypes = {\n        onQuestionSelect: PropTypes.func.isRequired,\n        questionStatus: PropTypes.arrayOf(PropTypes.string),\n        onResumeTimer: PropTypes.func.isRequired, // Define the prop type for onResumeTimer\n        questionData: PropTypes.array.isRequired, \n    };\n\n\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [timers, setTimers] = useState(new Array().fill(0));\n    const [timer, setTimer] = useState(0);\n\n    useEffect(() => {\n        // Set the timer to the saved value for the current question\n        setTimer(timers[currentQuestionIndex] || 0);\n\n        let interval;\n        // interval = setInterval(() => {\n        //     setTimer(prevTimer => prevTimer + 1);\n        // }, 1000);\n\n        if (!isPaused) {\n            interval = setInterval(() => {\n                setTimer((prevTimer) => prevTimer + 1);\n            }, 1000);\n        }\n\n        // Clear the interval when the component unmounts or when the user moves to the next question\n        return () => {\n            clearInterval(interval);\n        };\n    }, [currentQuestionIndex, timers, isPaused]);\n\n    const visted = () => {\n        setQuestionStatus(Array(1).fill(\"Visited\"));\n    };\n\n\n\n    //   const renderList = buttons.map((item, index) => {\n    //     let className = \"quesAns-btn \";\n    //     if (questionStatus && questionStatus[index] === \"answered\") {\n    //       className += \" instruction-btn1\";\n    //     } else if (questionStatus && questionStatus[index] === \"notAnswered\") {\n    //       className += \" instruction-btn2\";\n    //     } else if (questionStatus && questionStatus[index] === \"marked\") {\n    //       className += \" instruction-btn3\";\n    //     } else if (\n    //       questionStatus &&\n    //       questionStatus[index] === \"Answered but marked for review\"\n    //     ) {\n    //       className += \" instruction-btn4\";\n    //     } else if (questionStatus && questionStatus[index] === \"Visited\") {\n    //       className += \" instruction-btn6\";\n    //     }\n    //     return (\n    //       <div key={item}>\n    //         <button className={className} onClick={() => handleButtonClick(item)}>\n    //           {item}\n    //         </button>\n    //       </div>\n    //     );\n    //   });\n\n\n    const totalTime = 180 * 60; // 180 minutes in seconds\n    const [wtimer, setWTimer] = useState(totalTime);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setWTimer((prevTimer) => prevTimer - 1);\n        }, 1000);\n\n        // Clear the interval and handle time-up logic when timer reaches 0\n        if (wtimer <= 0) {\n            clearInterval(interval);\n            // Handle time-up logic here (e.g., navigate to a different component)\n        }\n\n        // Clean up the interval on component unmount or when navigating away\n        return () => {\n            clearInterval(interval);\n        };\n    }, [wtimer]);\n\n\n    const WformatTime = (seconds) => {\n        const hours = Math.floor(seconds / 3600);\n        const minutes = Math.floor((seconds % 3600) / 60);\n        const remainingSeconds = seconds % 60;\n        return `${hours > 9 ? hours : \"0\" + hours}:${minutes > 9 ? minutes : \"0\" + minutes\n            }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n    };\n\n\n\n\n\n\n\n    return (\n        <div className=\"right-side-bar\">\n            <div className=\"rightSidebar-topHeader\">\n                <p>Name of the person</p>\n                <p>Time Left: {WformatTime(wtimer)}</p>\n            </div>\n            <div className=\"sidebar-header\">\n                <p className=\"header-para\">{renderSectionButtons()}</p>\n            </div>\n\n            <div className=\"ques-btn\">\n                <ul className=\"btn-ul quesAns-btn \">{renderQuestionButtons()}</ul>\n            </div>\n\n            {/* <div key={index}>\n                <button className='quesAns-btn'>{item}</button>\n            </div> */}\n\n            <div className=\"sidebar-footer\">\n                <h4 className=\"sidebar-footer-header\">Legend</h4>\n                <div className=\"footer-btns\">\n                    <div className=\"inst-btns\">\n                        <button className=\"instruction-btn1\">{answeredCount}</button>\n                        <p>Answerd</p>\n                        <br />\n                    </div>\n                    <br />\n                    <div className=\"inst-btns\">\n                        <button className=\"instruction-btn2\">{notAnsweredCount}</button>\n                        <p>Not Answered</p>\n                        <br />\n                    </div>\n                    <br />\n                    <div className=\"inst-btns\">\n                        <button className=\"instruction-btn3\">\n                            {answeredmarkedForReviewCount}\n                        </button>\n                        <p>Marked</p>\n                        <br />\n                    </div>\n                    <br />\n                    <div className=\"inst-btns\">\n                        <button className=\"instruction-btn4\">{markedForReviewCount}</button>\n                        <p>Answered but marked for review</p>\n                    </div>\n                    <br />\n                    <div className=\"inst-btns\">\n                        <button className=\"instruction-btn5\">{VisitedCount}</button>\n                        <p>Not Visited</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ButtonsFunctionality;"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,IAAI,EAAEC,SAAS,QAAQ,kBAAkB;AAClD,OAAO,kCAAkC;AAEzC,OAAOC,SAAS,MAAM,YAAY;;AAElC;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAIA,MAAMC,oBAAoB,GAAGA,CAAC;EAC1BC,gBAAgB;EAChBC,cAAc;EACdC,OAAO;EACPC,iBAAiB;EACjBC,aAAa;EACbC,gBAAgB;EAChBC,4BAA4B;EAC5BC,oBAAoB;EACpBC,YAAY;EACZC,eAAe;EACfC;AACJ,CAAC,KAAK;EAAAC,EAAA;EAIF,MAAMC,QAAQ,GAAG;EACb;EACA;IAAEC,SAAS,EAAE,CAAC;IAAEC,WAAW,EAAE,aAAa;IAAEC,OAAO,EAAE;EAAc,CAAC,EACpE;IAAEF,SAAS,EAAE,CAAC;IAAEC,WAAW,EAAE,WAAW;IAAEC,OAAO,EAAE;EAAY,CAAC,EAChE;IAAEF,SAAS,EAAE,CAAC;IAAEC,WAAW,EAAE,SAAS;IAAEC,OAAO,EAAE;EAAU,CAAC,CAE/D;EAGD,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;IAChC,OAAON,YAAY,CAACO,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,kBACpCrB,OAAA;MAAAsB,QAAA,eAEItB,OAAA;QAAQuB,OAAO,EAAEA,CAAA,KAAMC,iBAAiB,CAACH,KAAK,GAAG,CAAC,CAAE;QAACI,SAAS,EAAC,mBAAmB;QAAAH,QAAA,EAC7ED,KAAK,GAAG;MAAC;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN;IAAC,GAJJR,KAAK;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKV,CACP,CAAC;EACN,CAAC;EAGD,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;IAC/B;IACA,MAAMC,gBAAgB,GAAGjB,QAAQ,CAACkB,MAAM,CACnCC,OAAO,IAAKA,OAAO,CAAChB,OAAO,KAAKN,eACrC,CAAC;IAGDuB,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEJ,gBAAgB,CAAC;IACnDG,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEvB,YAAY,CAAC;IAC3C;IACA,OAAOmB,gBAAgB,CAACZ,GAAG,CAAC,CAACc,OAAO,EAAEZ,KAAK,kBACvCrB,OAAA;MAAAsB,QAAA,eACItB,OAAA;QAAGyB,SAAS,EAAC,aAAa;QAACF,OAAO,EAAEA,CAAA,KAAMC,iBAAiB,CAACS,OAAO,CAAClB,SAAS,CAAE;QAAAO,QAAA,GAAC,iBAC7D,eAAAtB,OAAA;UAAMyB,SAAS,EAAC,SAAS;UAAAH,QAAA,GAAC,GAAC,EAACW,OAAO,CAACjB,WAAW,EAAC,GAAC;QAAA;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,4BAE3E;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC,GAJCR,KAAK;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKV,CACP,CAAC;EACN,CAAC;EAMD,MAAM,CAACO,cAAc,EAAEC,iBAAiB,CAAC,GAAG1C,QAAQ,CAAC,CAAC,CAAC;EACvD,MAAM,CAAC2C,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG5C,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAAC6C,QAAQ,EAAEC,WAAW,CAAC,GAAG9C,QAAQ,CAAC,KAAK,CAAC;EAG/C,MAAM6B,iBAAiB,GAAIkB,cAAc,IAAK;IAC1CxC,gBAAgB,CAACwC,cAAc,CAAC;IAChCH,oBAAoB,CAAC,CAAC,GAAGD,iBAAiB,EAAEI,cAAc,CAAC,CAAC;IAC5DD,WAAW,CAAC,KAAK,CAAC;IAElB,IAAIhB,SAAS,GAAG,cAAc;IAC9B,IAAItB,cAAc,IAAIA,cAAc,CAACkB,KAAK,CAAC,KAAK,UAAU,EAAE;MAC1DI,SAAS,IAAI,mBAAmB;IAClC,CAAC,MAAM,IAAItB,cAAc,IAAIA,cAAc,CAACkB,KAAK,CAAC,KAAK,aAAa,EAAE;MACpEI,SAAS,IAAI,mBAAmB;IAClC,CAAC,MAAM,IAAItB,cAAc,IAAIA,cAAc,CAACkB,KAAK,CAAC,KAAK,QAAQ,EAAE;MAC/DI,SAAS,IAAI,mBAAmB;IAClC,CAAC,MAAM,IACLtB,cAAc,IACdA,cAAc,CAACkB,KAAK,CAAC,KAAK,gCAAgC,EAC1D;MACAI,SAAS,IAAI,mBAAmB;IAClC,CAAC,MAAM,IAAItB,cAAc,IAAIA,cAAc,CAACkB,KAAK,CAAC,KAAK,SAAS,EAAE;MAChEI,SAAS,IAAI,mBAAmB;IAClC;IAEA,MAAMkB,uBAAuB,GACzBxC,cAAc,CAACuC,cAAc,GAAG,CAAC,CAAC,KAAK,YAAY;IACvD,IAAIC,uBAAuB,EAAE;MACzB;MACA,MAAMC,qBAAqB,GAAG,CAAC,GAAGzC,cAAc,CAAC;MACjDyC,qBAAqB,CAACF,cAAc,GAAG,CAAC,CAAC,GAAG,aAAa;MACzDrC,iBAAiB,CAACuC,qBAAqB,CAAC;IAC5C,CAAC,MAAM,IAAIzC,cAAc,CAACuC,cAAc,GAAG,CAAC,CAAC,KAAK,QAAQ,EAAE;MACxD;MACA,MAAME,qBAAqB,GAAG,CAAC,GAAGzC,cAAc,CAAC;MACjDyC,qBAAqB,CAACF,cAAc,GAAG,CAAC,CAAC,GAAG,iBAAiB;MAC7DrC,iBAAiB,CAACuC,qBAAqB,CAAC;IAC5C;EACJ,CAAC;EAED3C,oBAAoB,CAAC4C,SAAS,GAAG;IAC7B3C,gBAAgB,EAAEJ,SAAS,CAACgD,IAAI,CAACC,UAAU;IAC3C5C,cAAc,EAAEL,SAAS,CAACkD,OAAO,CAAClD,SAAS,CAACmD,MAAM,CAAC;IACnDC,aAAa,EAAEpD,SAAS,CAACgD,IAAI,CAACC,UAAU;IAAE;IAC1CnC,YAAY,EAAEd,SAAS,CAACqD,KAAK,CAACJ;EAClC,CAAC;EAGD,MAAM,CAACK,oBAAoB,EAAEC,uBAAuB,CAAC,GAAG1D,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM,CAAC2D,MAAM,EAAEC,SAAS,CAAC,GAAG5D,QAAQ,CAAC,IAAI6D,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;EACzD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGhE,QAAQ,CAAC,CAAC,CAAC;EAErCF,SAAS,CAAC,MAAM;IACZ;IACAkE,QAAQ,CAACL,MAAM,CAACF,oBAAoB,CAAC,IAAI,CAAC,CAAC;IAE3C,IAAIQ,QAAQ;IACZ;IACA;IACA;;IAEA,IAAI,CAACpB,QAAQ,EAAE;MACXoB,QAAQ,GAAGC,WAAW,CAAC,MAAM;QACzBF,QAAQ,CAAEG,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC;MAC1C,CAAC,EAAE,IAAI,CAAC;IACZ;;IAEA;IACA,OAAO,MAAM;MACTC,aAAa,CAACH,QAAQ,CAAC;IAC3B,CAAC;EACL,CAAC,EAAE,CAACR,oBAAoB,EAAEE,MAAM,EAAEd,QAAQ,CAAC,CAAC;EAE5C,MAAMwB,MAAM,GAAGA,CAAA,KAAM;IACjB3D,iBAAiB,CAACmD,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,SAAS,CAAC,CAAC;EAC/C,CAAC;;EAID;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA,MAAMQ,SAAS,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;EAC5B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGxE,QAAQ,CAACsE,SAAS,CAAC;EAE/CxE,SAAS,CAAC,MAAM;IACZ,MAAMmE,QAAQ,GAAGC,WAAW,CAAC,MAAM;MAC/BM,SAAS,CAAEL,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC;IAC3C,CAAC,EAAE,IAAI,CAAC;;IAER;IACA,IAAII,MAAM,IAAI,CAAC,EAAE;MACbH,aAAa,CAACH,QAAQ,CAAC;MACvB;IACJ;;IAEA;IACA,OAAO,MAAM;MACTG,aAAa,CAACH,QAAQ,CAAC;IAC3B,CAAC;EACL,CAAC,EAAE,CAACM,MAAM,CAAC,CAAC;EAGZ,MAAME,WAAW,GAAIhE,OAAO,IAAK;IAC7B,MAAMiE,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACnE,OAAO,GAAG,IAAI,CAAC;IACxC,MAAMoE,OAAO,GAAGF,IAAI,CAACC,KAAK,CAAEnE,OAAO,GAAG,IAAI,GAAI,EAAE,CAAC;IACjD,MAAMqE,gBAAgB,GAAGrE,OAAO,GAAG,EAAE;IACrC,OAAQ,GAAEiE,KAAK,GAAG,CAAC,GAAGA,KAAK,GAAG,GAAG,GAAGA,KAAM,IAAGG,OAAO,GAAG,CAAC,GAAGA,OAAO,GAAG,GAAG,GAAGA,OACtE,IAAGC,gBAAgB,GAAG,CAAC,GAAGA,gBAAgB,GAAG,GAAG,GAAGA,gBAAiB,EAAC;EAC9E,CAAC;EAQD,oBACIzE,OAAA;IAAKyB,SAAS,EAAC,gBAAgB;IAAAH,QAAA,gBAC3BtB,OAAA;MAAKyB,SAAS,EAAC,wBAAwB;MAAAH,QAAA,gBACnCtB,OAAA;QAAAsB,QAAA,EAAG;MAAkB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACzB7B,OAAA;QAAAsB,QAAA,GAAG,aAAW,EAAC8C,WAAW,CAACF,MAAM,CAAC;MAAA;QAAAxC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC,eACN7B,OAAA;MAAKyB,SAAS,EAAC,gBAAgB;MAAAH,QAAA,eAC3BtB,OAAA;QAAGyB,SAAS,EAAC,aAAa;QAAAH,QAAA,EAAEQ,oBAAoB,CAAC;MAAC;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtD,CAAC,eAEN7B,OAAA;MAAKyB,SAAS,EAAC,UAAU;MAAAH,QAAA,eACrBtB,OAAA;QAAIyB,SAAS,EAAC,qBAAqB;QAAAH,QAAA,EAAEJ,qBAAqB,CAAC;MAAC;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjE,CAAC,eAMN7B,OAAA;MAAKyB,SAAS,EAAC,gBAAgB;MAAAH,QAAA,gBAC3BtB,OAAA;QAAIyB,SAAS,EAAC,uBAAuB;QAAAH,QAAA,EAAC;MAAM;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjD7B,OAAA;QAAKyB,SAAS,EAAC,aAAa;QAAAH,QAAA,gBACxBtB,OAAA;UAAKyB,SAAS,EAAC,WAAW;UAAAH,QAAA,gBACtBtB,OAAA;YAAQyB,SAAS,EAAC,kBAAkB;YAAAH,QAAA,EAAEhB;UAAa;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC,eAC7D7B,OAAA;YAAAsB,QAAA,EAAG;UAAO;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACd7B,OAAA;YAAA0B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eACN7B,OAAA;UAAA0B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACN7B,OAAA;UAAKyB,SAAS,EAAC,WAAW;UAAAH,QAAA,gBACtBtB,OAAA;YAAQyB,SAAS,EAAC,kBAAkB;YAAAH,QAAA,EAAEf;UAAgB;YAAAmB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC,eAChE7B,OAAA;YAAAsB,QAAA,EAAG;UAAY;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACnB7B,OAAA;YAAA0B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eACN7B,OAAA;UAAA0B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACN7B,OAAA;UAAKyB,SAAS,EAAC,WAAW;UAAAH,QAAA,gBACtBtB,OAAA;YAAQyB,SAAS,EAAC,kBAAkB;YAAAH,QAAA,EAC/Bd;UAA4B;YAAAkB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACzB,CAAC,eACT7B,OAAA;YAAAsB,QAAA,EAAG;UAAM;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACb7B,OAAA;YAAA0B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eACN7B,OAAA;UAAA0B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACN7B,OAAA;UAAKyB,SAAS,EAAC,WAAW;UAAAH,QAAA,gBACtBtB,OAAA;YAAQyB,SAAS,EAAC,kBAAkB;YAAAH,QAAA,EAAEb;UAAoB;YAAAiB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC,eACpE7B,OAAA;YAAAsB,QAAA,EAAG;UAA8B;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpC,CAAC,eACN7B,OAAA;UAAA0B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACN7B,OAAA;UAAKyB,SAAS,EAAC,WAAW;UAAAH,QAAA,gBACtBtB,OAAA;YAAQyB,SAAS,EAAC,kBAAkB;YAAAH,QAAA,EAAEZ;UAAY;YAAAgB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC,eAC5D7B,OAAA;YAAAsB,QAAA,EAAG;UAAW;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAAhB,EAAA,CAhQKZ,oBAAoB;AAAAyE,EAAA,GAApBzE,oBAAoB;AAkQ1B,eAAeA,oBAAoB;AAAC,IAAAyE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}