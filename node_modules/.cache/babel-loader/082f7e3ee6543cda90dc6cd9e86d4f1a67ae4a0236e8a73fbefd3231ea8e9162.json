{"ast":null,"code":"var _jsxFileName = \"D:\\\\sravanfiles\\\\daily  work by sravan\\\\works\\\\october\\\\27-10-2023\\\\egate_Quiz_project\\\\src\\\\Pages\\\\Paper\\\\Paper.jsx\",\n  _s = $RefreshSig$();\n// test commit\n\n// import React, { useEffect, useState } from 'react';\n// import quiz from '../../Data/quesAns'\n// import './Paper.css'\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader'\n\n// // Defining Timer code\n// const formatTime = (time) => {\n//     let minutes = Math.floor(time / 60);\n//     let seconds = Math.floor(time - minutes * 60);\n\n//     if (minutes < 10) minutes = '0' + minutes;\n//     if (seconds < 10) seconds = '0' + seconds;\n//     return minutes + ':' + seconds;\n// }; // End of Defining Timer code\n\n// const Paper = ({ seconds, answeredQuestions }) => {\n\n//     const [activeQuestion, setActiveQuestion] = useState(0);\n//     const handleQuestionSelect = (questionNumber) => {\n//         setActiveQuestion(questionNumber - 1);\n//     }\n\n//     // const [questionStatus, setQuestionStatus] = useState(Array(30).fill('notAnswered'))\n//     // const [activeQuestion, setActiveQuestion] = useState(0)\n//     // const [selectedAnswer, setSelectedAnswer] = useState('')\n\n//     const [selectedAnswers, setSelectedAnswers] = useState(new Array(quiz.questions.length).fill(''));\n//     const [showResult, setShowResult] = useState(false)\n//     const [result, setResult] = useState({\n//         score: 0,\n//         correctAnswers: 0,\n//         wrongAnswers: 0,\n//     })\n\n//     const { questions } = quiz\n//     const { question, choices, correctAnswer } = questions[activeQuestion]\n//     const onClickNext = () => {\n//         setResult((prev) =>\n//             selectedAnswers[activeQuestion] === correctAnswer\n//                 ? {\n//                     ...prev,\n//                     score: prev.score + 5,\n//                     correctAnswers: prev.correctAnswers + 1,\n//                 }\n//                 : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\n//         );\n//         if (activeQuestion !== questions.length - 1) {\n//             setActiveQuestion((prev) => prev + 1);\n//         } else {\n//             // setActiveQuestion(0);\n//             setShowResult(true);\n//             calculateResult();//new added code\n//         }\n//     };\n\n//     const onAnswerSelected = (OptionLetter) => {\n//         // Update the selected answer for the current question\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//         setSelectedAnswers(updatedSelectedAnswers);\n//         // setSelectedAnswers(updatedSelectedAnswers, OptionLetter);\n\n//     };\n\n//     const clearResponse = () => {\n//         // Clear the response for the current question\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = '';\n//         setSelectedAnswers(updatedSelectedAnswers);\n//     };\n\n//     const goToPreviousQuestion = () => {\n//         // Move to the previous question\n//         if (activeQuestion > 0) {\n//             setActiveQuestion((prev) => prev - 1);\n//         }\n//     };\n\n//     const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n//     const [countdown, setCountDown] = useState(seconds);\n//     useEffect(() => {\n//         const timerId = setInterval(() => {\n//             setCountDown((prevCountDown) =>\n//                 prevCountDown - 1\n//             );\n//         }, 1000)\n//         return () => {\n//             clearInterval(timerId);\n//         };\n//     }, [])\n\n//     useEffect(() => {\n//         if (countdown <= 0) {\n//             setShowResult(true);\n//             // clearInterval(timerId.current);\n//             // alert(\"End\");\n//         }\n//     }, [countdown]);\n\n//    // NEW ADDED CODE\n\n//     // const [showResult, setShowResult] = useState(false);\n//     const [accuracy, setAccuracy] = useState(0);\n//     const [averageScore, setAverageScore] = useState(0);\n//     const [topScore, setTopScore] = useState(0);\n//     const [liveRank, setLiveRank] = useState(0);\n\n//     const calculateResult = () => {\n//         // Calculate accuracy\n//         const totalAttempted = answeredQuestions.length;\n//         const totalCorrect = result.correctAnswers;\n//         const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\n//         setAccuracy(calculatedAccuracy.toFixed(2));\n\n//         // Calculate average score\n//         const calculatedAverageScore = result.score / totalAttempted;\n//         setAverageScore(calculatedAverageScore.toFixed(2));\n\n//         // Placeholder for live ranking data - Replace this with actual data\n//         const calculatedTopScore = 100;\n//         const calculatedLiveRank = 1;\n\n//         setTopScore(calculatedTopScore);\n//         setLiveRank(calculatedLiveRank);\n//     };\n\n//     // const onClickSubmit = () => {\n//     //     calculateResult();\n//     //     setShowResult(true);\n//     // };\n\n//     return (\n\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     {!showResult ? (\n//                         <div>\n//                             <div className='subjects'>\n//                                 <button className='subject-btn'>Mathematics</button>\n//                                 <button className='subject-btn'>Physics</button>\n//                                 <button className='subject-btn'>Chemistry</button>\n//                             </div>\n//                             <div className='second-header'>\n//                                 <div className='single-select-question'>\n//                                     Single Select Question\n//                                 </div>\n//                                 <div className='right-header'>\n//                                     <div className='marks'>\n//                                         Marks: <div className='plus-mark'>+1</div>\n//                                         <div className='minus-mark'>-1</div>\n//                                     </div>\n//                                     <div className='timer'>\n//                                         <h3>Time Left: {formatTime(countdown)}</h3>\n//                                     </div>\n//                                 </div>\n//                             </div>\n//                             <div className='question-no'>\n//                                 <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\n//                                 <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\n//                             </div>\n\n//                             <h2 className='question'><img src={question} alt=\"question\" /></h2>\n\n//                             <ul className='options-container'>\n//                                 {choices.map((answer, index) => (\n//                                     <li key={answer}>\n//                                         <input type=\"radio\"\n//                                             // id={answer}\n//                                             id={`option-${index}`}\n//                                             name='answer'\n//                                             value={answer}\n//                                             checked={selectedAnswers[activeQuestion] === answer}\n//                                             onChange={() => onAnswerSelected(answer)} />\n\n//                                         <label className='alpha-index' htmlFor={`option-${index}`}>\n//                                             {/* htmlFor={answer} */}\n//                                             {String.fromCharCode(65 + index)}.\n//                                             <img src={answer} alt=\"answer\" />\n//                                         </label>\n//                                     </li>\n//                                 ))}\n//                             </ul>\n\n//                             <div className=\"flex-right\">\n//                                 <button className='clear-btn'>Mark for Review & Next</button>\n//                                 <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\n//                                 <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                                     <i class=\"fa-solid fa-angles-left\"></i>\n//                                     Previous\n//                                 </button>\n//                                 <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                                     {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\n//                                 </button>\n\n//                             </div>\n//                         </div>\n//                     ) : (\n//                         <div className=\"result\">\n//                             <h3>Result</h3>\n//                             <p>\n//                                 Total Questions: <span>{questions.length}</span>\n//                             </p>\n//                             <p>\n//                                 Total Score:<span> {result.score}</span>\n//                             </p>\n//                             <p>\n//                                 Correct Answers:<span> {result.correctAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Wrong Answers:<span> {result.wrongAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Accuracy:<span> {accuracy}%</span>\n//                             </p>\n//                             <p>\n//                                 Average Score:<span> {averageScore}</span>\n//                             </p>\n//                             <p>\n//                                 Top Score:<span> {topScore}</span>\n//                             </p>\n//                             <p>\n//                                 Live Rank:<span> {liveRank}</span>\n//                             </p>\n//                         </div>\n//                     )}\n//                 </div>\n//             </div>\n//             <div className='rightsidebar'><RightSidebar onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} /></div>\n//         </div>\n\n//     )\n// }\n\n// export default Paper\n\n// import React, { useEffect, useState } from 'react';\n// // import quiz from '../../Data/quesAns'\n// import './Paper.css'\n// // import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader'\n\n// // Defining Timer code\n// // const formatTime = (time) => {\n// //     let minutes = Math.floor(time / 60);\n// //     let seconds = Math.floor(time - minutes * 60);\n\n// //     if (minutes < 10) minutes = '0' + minutes;\n// //     if (seconds < 10) seconds = '0' + seconds;\n// //     return minutes + ':' + seconds;\n// // }; // End of Defining Timer code\n\n// const Paper = () => {\n\n//     // const [activeQuestion, setActiveQuestion] = useState(0);\n//     // const handleQuestionSelect = (questionNumber) => {\n//     //     setActiveQuestion(questionNumber - 1);\n//     // }\n\n//     // const [questionStatus, setQuestionStatus] = useState(Array(30).fill('notAnswered'))\n//     // const [activeQuestion, setActiveQuestion] = useState(0)\n//     // const [selectedAnswer, setSelectedAnswer] = useState('')\n\n//     // const [selectedAnswers, setSelectedAnswers] = useState(new Array(quiz.questions.length).fill(''));\n//     // const [showResult, setShowResult] = useState(false)\n//     // const [result, setResult] = useState({\n//     //     score: 0,\n//     //     correctAnswers: 0,\n//     //     wrongAnswers: 0,\n//     // })\n\n//     // const { questions } = quiz\n//     // const { Qimages, OPTimages, correctAnswer } = [activeQuestion]\n//     // const onClickNext = () => {\n//     //     setResult((prev) =>\n//     //         selectedAnswers[activeQuestion] === correctAnswer\n//     //             ? {\n//     //                 ...prev,\n//     //                 score: prev.score + 5,\n//     //                 correctAnswers: prev.correctAnswers + 1,\n//     //             }\n//     //             : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\n//     //     );\n//     //     if (activeQuestion !== questions.length - 1) {\n//     //         setActiveQuestion((prev) => prev + 1);\n//     //     } else {\n//     //         // setActiveQuestion(0);\n//     //         setShowResult(true);\n//     //         calculateResult();//new added code\n//     //     }\n//     // };\n\n//     // const onAnswerSelected = (OptionLetter) => {\n//     //     // Update the selected answer for the current question\n//     //     const updatedSelectedAnswers = [...selectedAnswers];\n//     //     updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//     //     setSelectedAnswers(updatedSelectedAnswers);\n//     //     // setSelectedAnswers(updatedSelectedAnswers, OptionLetter);\n\n//     // };\n\n//     // const clearResponse = () => {\n//     //     // Clear the response for the current question\n//     //     const updatedSelectedAnswers = [...selectedAnswers];\n//     //     updatedSelectedAnswers[activeQuestion] = '';\n//     //     setSelectedAnswers(updatedSelectedAnswers);\n//     // };\n\n//     // const goToPreviousQuestion = () => {\n//     //     // Move to the previous question\n//     //     if (activeQuestion > 0) {\n//     //         setActiveQuestion((prev) => prev - 1);\n//     //     }\n//     // };\n\n//     // const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n//     // const [countdown, setCountDown] = useState(seconds);\n//     // useEffect(() => {\n//     //     const timerId = setInterval(() => {\n//     //         setCountDown((prevCountDown) =>\n//     //             prevCountDown - 1\n//     //         );\n//     //     }, 1000)\n//     //     return () => {\n//     //         clearInterval(timerId);\n//     //     };\n//     // }, [])\n\n//     // useEffect(() => {\n//     //     if (countdown <= 0) {\n//     //         setShowResult(true);\n//     //         // clearInterval(timerId.current);\n//     //         // alert(\"End\");\n//     //     }\n//     // }, [countdown]);\n\n//     // NEW ADDED CODE\n\n//     // const [showResult, setShowResult] = useState(false);\n//     // const [accuracy, setAccuracy] = useState(0);\n//     // const [averageScore, setAverageScore] = useState(0);\n//     // const [topScore, setTopScore] = useState(0);\n//     // const [liveRank, setLiveRank] = useState(0);\n\n//     // const calculateResult = () => {\n//     //     // Calculate accuracy\n//     //     const totalAttempted = answeredQuestions.length;\n//     //     const totalCorrect = result.correctAnswers;\n//     //     const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\n//     //     setAccuracy(calculatedAccuracy.toFixed(2));\n\n//     //     // Calculate average score\n//     //     const calculatedAverageScore = result.score / totalAttempted;\n//     //     setAverageScore(calculatedAverageScore.toFixed(2));\n\n//     //     // Placeholder for live ranking data - Replace this with actual data\n//     //     const calculatedTopScore = 100;\n//     //     const calculatedLiveRank = 1;\n\n//     //     setTopScore(calculatedTopScore);\n//     //     setLiveRank(calculatedLiveRank);\n//     // };\n\n//     // const onClickSubmit = () => {\n//     //     calculateResult();\n//     //     setShowResult(true);\n//     // };\n\n//     const [Qimages,setQImages] = useState([]);\n//     const [OPTimages,setOPTImages] = useState([]);\n\n//     useEffect(() => {\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//         const fetchQImages = async () => {\n//             let fetchedQImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     const response = await fetch(`http://localhost:7000/images/${i}`);\n//                     const data = await response.json();\n//                     if (data.length > 0) {\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching Qimages:', error);\n//                 }\n//             }\n\n//             setQImages(fetchedQImages);\n//         };\n\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//         const fetchOPTImages = async () => {\n//             let fetchedOPTImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     for (let j = i + 1; j <= i + 4; j++) {\n//                         const response = await fetch(`http://localhost:7000/images/${j}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                         }\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching OPTimages:', error);\n//                 }\n//             }\n\n//             setOPTImages(fetchedOPTImages);\n//         };\n\n//         fetchQImages();\n//         fetchOPTImages();\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     return (\n\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     {/* {!showResult ? ( */}\n//                         <div>\n//                             <div className='subjects'>\n//                                 <button className='subject-btn'>Mathematics</button>\n//                                 <button className='subject-btn'>Physics</button>\n//                                 <button className='subject-btn'>Chemistry</button>\n//                             </div>\n//                             <div className='second-header'>\n//                                 <div className='single-select-question'>\n//                                     Single Select Question\n//                                 </div>\n//                                 {/* <div className='right-header'>\n//                                     <div className='marks'>\n//                                         Marks: <div className='plus-mark'>+1</div>\n//                                         <div className='minus-mark'>-1</div>\n//                                     </div>\n//                                     <div className='timer'>\n//                                         <h3>Time Left: {formatTime(countdown)}</h3>\n//                                     </div>\n//                                 </div> */}\n//                             </div>\n//                             {/* <div className='question-no'>\n//                                 <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\n//                                 <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\n//                             </div> */}\n\n//                             {Qimages.map((qImage, index) => (\n//                                 <div key={index}>\n//                                     {/* <h2>QImage {index + 1}</h2> */}\n//                                     {/* <div className='question-no'>\n//                                         <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\n//                                         <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\n//                                     </div> */}\n//                                     <h2 className='question'> <img\n//                                         src={`data:image/png;base64,${qImage.image_data}`}\n//                                         alt={`QImage ${index + 1}`}\n//                                     /></h2>\n\n//                                     <ul className='options-container'>\n//                                         {OPTimages.slice(index * 4, index * 4 + 4).map((optImage, optIndex) => (\n//                                             <li>\n//                                                 <input type=\"radio\"\n//                                                 // // id={answer}\n//                                                 //     id={`option-${index}`}\n//                                                 //     name='answer'\n//                                                 //     value={optImage}\n//                                                 //     checked={selectedAnswers[activeQuestion] === optImage}\n//                                                 //     onChange={() => onAnswerSelected(optImage)}\n//                                                 />\n\n//                                                 <label className='alpha-index' >\n//                                                     <img\n//                                                         key={optIndex}\n//                                                         src={`data:image/png;base64,${optImage.image_data}`}\n//                                                         alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                                     />\n//                                                 </label>\n//                                             </li>\n//                                         ))}\n//                                     </ul>\n//                                 </div>\n//                             ))}\n\n//                             {/* <div className=\"flex-right\">\n//                                 <button className='clear-btn'>Mark for Review & Next</button>\n//                                 <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\n//                                 <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                                     <i class=\"fa-solid fa-angles-left\"></i>\n//                                     Previous\n//                                 </button>\n//                                 <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                                     {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\n//                                 </button>\n\n//                             </div> */}\n//                         </div>\n//                     {/* ) : ( */}\n//                         {/* <div className=\"result\"> */}\n//                             {/* <h3>Result</h3>\n//                             <p>\n//                                 Total Questions: <span>{questions.length}</span>\n//                             </p>\n//                             <p>\n//                                 Total Score:<span> {result.score}</span>\n//                             </p>\n//                             <p>\n//                                 Correct Answers:<span> {result.correctAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Wrong Answers:<span> {result.wrongAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Accuracy:<span> {accuracy}%</span>\n//                             </p>\n//                             <p>\n//                                 Average Score:<span> {averageScore}</span>\n//                             </p>\n//                             <p>\n//                                 Top Score:<span> {topScore}</span>\n//                             </p>\n//                             <p>\n//                                 Live Rank:<span> {liveRank}</span>\n//                             </p> */}\n//                         {/* </div> */}\n//                     {/* )} */}\n//                 </div>\n//             </div>\n//             {/* <div className='rightsidebar'><RightSidebar onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} /></div> */}\n//         </div>\n\n//     )\n// }\n\n// export default Paper\n\n// import React, { useEffect, useState } from 'react';\n// import './Paper.css';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\n\n// const Paper = () => {\n//     const [Qimages, setQImages] = useState([]);\n//     const [OPTimages, setOPTImages] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n//         useEffect(() => {\n//             // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//             const fetchQImages = async () => {\n//                 let fetchedQImages = [];\n\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                     try {\n//                         const response = await fetch(`http://localhost:7000/images/${i}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedQImages.push(data[0]); // Add only the first image from each set\n//                         }\n//                     } catch (error) {\n//                         console.error('Error fetching Qimages:', error);\n//                     }\n//                 }\n\n//                 setQImages(fetchedQImages);\n//             };\n\n//             // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//             const fetchOPTImages = async () => {\n//                 let fetchedOPTImages = [];\n\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                     try {\n//                         for (let j = i + 1; j <= i + 4; j++) {\n//                             const response = await fetch(`http://localhost:7000/images/${j}`);\n//                             const data = await response.json();\n//                             if (data.length > 0) {\n//                                 fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                             }\n//                         }\n//                     } catch (error) {\n//                         console.error('Error fetching OPTimages:', error);\n//                     }\n//                 }\n\n//                 setOPTImages(fetchedOPTImages);\n//             };\n\n//             fetchQImages();\n//             fetchOPTImages();\n//         }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     const handleNextClick = () => {\n//         // Move to the next question when the \"Next\" button is clicked\n//         setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n//     };\n\n//     return (\n//         <div className='main'>\n//             {/* ... */}\n//             <div><PaperHeader /></div>\n//             <div className='options-container'>\n//                 {/* Display only the current question and its options */}\n//                 <h2 className='question'>\n//                     <img\n//                         src={`data:image/png;base64,${Qimages[currentQuestionIndex].image_data}`}\n//                         alt={`QImage ${currentQuestionIndex + 1}`}\n//                     />\n//                 </h2>\n//                 <ul className='options-container'>\n//                     {OPTimages\n//                         .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                         .map((optImage, optIndex) => (\n//                             <li key={optIndex}>\n//                                 <input type=\"radio\" />\n//                                 <label className='alpha-index'>\n//                                     <img\n//                                         src={`data:image/png;base64,${optImage.image_data}`}\n//                                         alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                     />\n//                                 </label>\n//                             </li>\n//                         ))}\n//                 </ul>\n//                 <button onClick={handleNextClick}>Next</button>\n//             </div>\n//             {/* ... */}\n//         </div>\n//     );\n// };\n\n// export default Paper;\n\n// import React, { useEffect, useState } from 'react';\n// import './Paper.css';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\n// // import { Waveform } from '@uiball/loaders'\n\n// const Paper = () => {\n\n//     const [Qimages, setQImages] = useState([]);\n//     const [OPTimages, setOPTImages] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n//     useEffect(() => {\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//         const fetchQImages = async () => {\n//             let fetchedQImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     const response = await fetch(`http://localhost:7001/images/${i}`);\n//                     const data = await response.json();\n//                     if (data.length > 0) {\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching Qimages:', error);\n//                 }\n//             }\n\n//             setQImages(fetchedQImages);\n//         };\n\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//         const fetchOPTImages = async () => {\n//             let fetchedOPTImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     for (let j = i + 1; j <= i + 4; j++) {\n//                         const response = await fetch(`http://localhost:7001/images/${j}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                         }\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching OPTimages:', error);\n//                 }\n//             }\n\n//             setOPTImages(fetchedOPTImages);\n//         };\n\n//         fetchQImages();\n//         fetchOPTImages();\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     const handleNextClick = () => {\n//         // Move to the next question when the \"Next\" button is clicked\n//         setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n//     };\n\n//     // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\n//     const currentQuestion = Qimages[currentQuestionIndex];\n//     const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\n\n//     return (\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     <div className='options-container'>\n//                         <h2 className='question'>\n//                             {currentQuestion ? (\n//                                 <img\n//                                     src={questionImageSrc}\n//                                     alt={`QImage ${currentQuestionIndex + 1}`}\n//                                 />\n//                             ) : (\n//                                 <p>Loading question...</p>\n\n//                             // <Waveform\n//                             //     size={40}\n//                             //     lineWeight={3.5}\n//                             //     speed={1}\n//                             //     color=\"black\"\n//                             // />\n//                             )}\n//                         </h2>\n//                         <ul className='options-container'>\n//                             {/* ... (options rendering logic) */}\n//                             {OPTimages\n//                                 .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                                 .map((optImage, optIndex) => (\n\n//                                     <li key={optIndex}>\n//                                         <input type=\"radio\" />\n//                                         <label className='alpha-index'>\n//                                             <img\n//                                                 src={`data:image/png;base64,${optImage.image_data}`}\n//                                                 alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                             />\n//                                         </label>\n//                                     </li>\n//                                 ))}\n//                         </ul>\n//                         <button onClick={handleNextClick}>Next</button>\n//                     </div>\n\n//                 </div>\n//             </div>\n\n//             {/* ... */}\n//         </div>\n//     );\n// };\n\n// export default Paper;\n\n// import React, { useEffect, useState } from 'react';\n// import './Paper.css';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\n\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import { DotSpinner } from '@uiball/loaders'\n\n// const Paper = () => {\n\n//     const [Qimages, setQImages] = useState([]);\n//     const [OPTimages, setOPTImages] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n//     useEffect(() => {\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//         const fetchQImages = async () => {\n//             let fetchedQImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     const response = await fetch(`http://localhost:7002/images/${i}`);\n//                     const data = await response.json();\n//                     if (data.length > 0) {\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching Qimages:', error);\n//                 }\n//             }\n\n//             setQImages(fetchedQImages);\n//         };\n\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//         const fetchOPTImages = async () => {\n//             let fetchedOPTImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     for (let j = i + 1; j <= i + 4; j++) {\n//                         const response = await fetch(`http://localhost:7002/images/${j}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                         }\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching OPTimages:', error);\n//                 }\n//             }\n\n//             setOPTImages(fetchedOPTImages);\n//         };\n\n//         fetchQImages();\n//         fetchOPTImages();\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     // const handleNextClick = () => {\n//     //     // Move to the next question when the \"Next\" button is clicked\n//     //     setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n\n//     // };\n\n//     // const handlepreClick=()=>{\n//     //     setCurrentQuestionIndex(prevIndex => prevIndex - 1);\n//     //     // setTimer(timer)\n\n//     // }\n\n// // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\n// const currentQuestion = Qimages[currentQuestionIndex];\n// const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\n\n// const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n\n//     return (\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     <div>\n//                         <div className='subjects'>\n//                             <button className='subject-btn'>Mathematics</button>\n//                             <button className='subject-btn'>Physics</button>\n//                             <button className='subject-btn'>Chemistry</button>\n\n//                         </div>\n//                         <div className='second-header'>\n//                             <div className='single-select-question'>\n//                                 Single Select Question\n//                             </div>\n//                             <div className='right-header'>\n//                                 <div className='marks'>\n//                                     Marks: <div className='plus-mark'>+1</div>\n//                                     <div className='minus-mark'>-1</div>\n//                                 </div>\n//                                 {/* <div className='timer'>\n//                                     <h3>Time Left: {formatTime(countdown)}</h3>\n//                                 </div> */}\n//                             </div>\n//                         </div>\n//                         <div className='question-no'>\n//                             <span className=\"active-question-no\">Question No. {addLeadingZero(currentQuestionIndex + 1)}</span>\n//                             <span className=\"total-question\"> of {addLeadingZero(Qimages.length)}</span>\n//                         </div>\n\n//                         <div className='options-container'>\n\n//                             <h2 className='question'>\n//                                 {currentQuestion ? (\n//                                  <div>\n//                                         <img\n//                                             src={questionImageSrc}\n//                                             alt={`QImage ${currentQuestionIndex + 1}`}\n//                                         />\n//                                         <ul className='options-container'>\n//                                             {/* ... (options rendering logic) */}\n//                                             {OPTimages\n//                                                 .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                                                 .map((optImage, optIndex) => (\n\n//                                                     <li key={optImage}>\n//                                                         <input\n//                                                         name='index'\n//                                                             type=\"radio\"\n//                                                           />\n//                                                         <label className='alpha-index'>\n//                                                             <img\n//                                                                 src={`data:image/png;base64,${optImage.image_data}`}\n//                                                                 alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                                             />\n//                                                         </label>\n//                                                     </li>\n//                                                 ))}\n//                                         </ul>\n//                                  </div>\n//                                 ) : (\n//                                     // <p>Loading question...</p>\n\n//                                  <div className='loading-gif'>\n//                                             <DotSpinner\n//                                                 size={90}\n//                                                 speed={0.9}\n//                                                 color=\"black\"\n\n//                                             />\n//                                  </div>\n//                                 )}\n\n//                             </h2>\n//                             {/* <ul className='options-container'>\n//                                 ... (options rendering logic)\n//                                 {OPTimages\n//                                     .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                                     .map((optImage, optIndex) => (\n\n//                                         <li key={optIndex}>\n//                                             <input type=\"radio\" />\n//                                             <label className='alpha-index'>\n//                                                 <img\n//                                                     src={`data:image/png;base64,${optImage.image_data}`}\n//                                                     alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                                 />\n//                                             </label>\n//                                         </li>\n//                                     ))}\n//                             </ul> */}\n//                             {/* <button onClick={handleNextClick}>Next</button> */}\n//                         </div>\n//                         {/* a */}\n\n//                         <div className=\"flex-right\">\n//                             {/* <button className='clear-btn'>Mark for Review & Next</button>\n//                             <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\n//                             <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                                 <i class=\"fa-solid fa-angles-left\"></i>\n//                                 Previous\n//                             </button>\n//                             <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                                 {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\n//                             </button> */}\n// {/*\n//                             <button onClick={handlepreClick}>Previous</button>\n\n//                             <button onClick={handleNextClick}>Save&Next</button> */}\n\n//                         </div>\n//                     </div>\n\n//                 </div>\n//             </div>\n\n//             <div className='rightsidebar'><RightSidebar /></div>\n//             {/* onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} */}\n\n//         </div>\n//     );\n// };\n\n// export default Paper;\n\n// import React, { useEffect, useState } from 'react';\n// import './Paper.css';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import { DotSpinner } from '@uiball/loaders';\n\n// const Paper = () => {\n//     const [Qimages, setQImages] = useState([]);\n//     const [OPTimages, setOPTImages] = useState([]);\n//     const [activeQuestion, setActiveQuestion] = useState(0);\n//     const [selectedAnswers, setSelectedAnswers] = useState(Array(Qimages.length).fill(''));\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//     const [showResult, setShowResult] = useState(false);\n//     const [result, setResult] = useState({\n//         score: 0,\n//         correctAnswers: 0,\n//         wrongAnswers: 0,\n//     });\n//     const [timers, setTimers] = useState(new Array(Qimages.length).fill(0));\n//     const [timer, setTimer] = useState(0);\n\n//     useEffect(() => {\n//             // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//             const fetchQImages = async () => {\n//                 let fetchedQImages = [];\n\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                     try {\n//                         const response = await fetch(`http://localhost:7002/images/${i}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedQImages.push(data[0]); // Add only the first image from each set\n//                         }\n//                     } catch (error) {\n//                         console.error('Error fetching Qimages:', error);\n//                     }\n//                 }\n\n//                 setQImages(fetchedQImages);\n//             };\n\n//             // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//             const fetchOPTImages = async () => {\n//                 let fetchedOPTImages = [];\n\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                     try {\n//                         for (let j = i + 1; j <= i + 4; j++) {\n//                             const response = await fetch(`http://localhost:7002/images/${j}`);\n//                             const data = await response.json();\n//                             if (data.length > 0) {\n//                                 fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                             }\n//                         }\n//                     } catch (error) {\n//                         console.error('Error fetching OPTimages:', error);\n//                     }\n//                 }\n\n//                 setOPTImages(fetchedOPTImages);\n//             };\n\n//             fetchQImages();\n//             fetchOPTImages();\n//         }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     const onAnswerSelected = (OptionLetter) => {\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//         setSelectedAnswers(updatedSelectedAnswers);\n//     };\n\n//     const clearResponse = () => {\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = '';\n//         setSelectedAnswers(updatedSelectedAnswers);\n//     };\n\n//     const goToPreviousQuestion = () => {\n//         setCurrentQuestionIndex(prevIndex => {\n\n//             // Save the current timer value for the question\n\n//             const updatedTimers = [...timers];\n\n//             updatedTimers[prevIndex] = timer;\n\n//             setTimers(updatedTimers);\n\n//             // Move to the previous question\n\n//             return prevIndex - 1;\n\n//         });\n//         if (activeQuestion > 0) {\n//             setActiveQuestion(activeQuestion - 1);\n//         }\n//     };\n\n//     const onClickNext = () => {\n//         setCurrentQuestionIndex(prevIndex => {\n\n//             // Save the current timer value for the question\n\n//             const updatedTimers = [...timers];\n\n//             updatedTimers[prevIndex] = timer;\n\n//             setTimers(updatedTimers);\n\n//             // Move to the next question\n\n//             return prevIndex + 1;\n\n//         });\n//         const correctAnswer = Qimages[activeQuestion].correct_answer; // Replace 'correct_answer' with the actual property name\n//         const selectedAnswer = selectedAnswers[activeQuestion];\n\n//         if (selectedAnswer === correctAnswer) {\n//             setResult(prevResult => ({\n//                 ...prevResult,\n//                 score: prevResult.score + 5,\n//                 correctAnswers: prevResult.correctAnswers + 1\n//             }));\n//         } else {\n//             setResult(prevResult => ({\n//                 ...prevResult,\n//                 wrongAnswers: prevResult.wrongAnswers + 1\n//             }));\n//         }\n\n//         if (activeQuestion < Qimages.length - 1) {\n//             setActiveQuestion(prevActiveQuestion => prevActiveQuestion + 1);\n//         } else {\n//             setShowResult(true);\n//             calculateResult(); // Implement this function for additional result calculations\n//         }\n//     };\n\n//     const formatTime = (seconds) => {\n\n//         const hours = Math.floor(seconds / 3600);\n\n//         const minutes = Math.floor((seconds % 3600) / 60);\n\n//         const remainingSeconds = seconds % 60;\n\n//         return `${hours > 9 ? hours : '0' + hours}:${minutes > 9 ? minutes : '0' + minutes}:${remainingSeconds > 9 ? remainingSeconds : '0' + remainingSeconds}`;\n\n//     };\n\n//     // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\n//     const currentQuestion = Qimages[currentQuestionIndex];\n//     const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\n//     const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n\n//     const calculateResult = () => {\n//         // Implement additional result calculations here if needed\n//         // Example: Accuracy, Average Score, Top Score, Live Rank, etc.\n//     };\n\n//     return (\n//         <div className='main'>\n\n//             <div className='sub-main'>\n\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     <div>\n//                         <div className='subjects'>\n//                             <button className='subject-btn'>Mathematics</button>\n//                             <button className='subject-btn'>Physics</button>\n//                             <button className='subject-btn'>Chemistry</button>\n\n//                         </div>\n//                         <div className='second-header'>\n//                             <div className='single-select-question'>\n//                                 Single Select Question\n//                             </div>\n//                             <div className='right-header'>\n//                                 <div className='marks'>\n//                                     Marks: <div className='plus-mark'>+1</div>\n//                                     <div className='minus-mark'>-1</div>\n//                                 </div>\n//                                 <div>Timer: {formatTime(timer)}</div>\n//                             </div>\n//                         </div>\n//                         <div className='question-no'>\n//                             <span className=\"active-question-no\">Question No. {addLeadingZero(currentQuestionIndex + 1)}</span>\n//                             <span className=\"total-question\"> of {addLeadingZero(Qimages.length)}</span>\n//                         </div>\n\n//                         <div className='options-container'>\n\n//                             <h2 className='question'>\n//                                 {Qimages && Qimages.length > 0 && Qimages[activeQuestion] ? (\n\n//                                     <div>\n//                                         <img src={`data:image/png;base64,${Qimages[activeQuestion].image_data}`} alt={`QImage ${activeQuestion + 1}`} />\n//                                         <ul className='options-container'>\n//                                             {OPTimages.slice(activeQuestion * 4, activeQuestion * 4 + 4).map((optImage, optIndex) => (\n//                                                 <li key={optIndex}>\n//                                                     <input\n//                                                         type='radio'\n//                                                         name='index'\n//                                                         checked={selectedAnswers[activeQuestion] === String.fromCharCode(65 + optIndex)}\n//                                                         onChange={() => onAnswerSelected(String.fromCharCode(65 + optIndex))}\n//                                                     />\n//                                                     <label className='alpha-index'>\n//                                                         <img\n//                                                             src={`data:image/png;base64,${optImage.image_data}`}\n//                                                             alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                                         />\n//                                                     </label>\n//                                                 </li>\n//                                             ))}\n//                                         </ul>\n//                                     </div>\n\n//                                 ) : (\n\n//                                     <div className='loading-gif'>\n//                                         <DotSpinner\n//                                             size={90}\n//                                             speed={0.9}\n//                                             color=\"black\"\n//                                         />\n//                                     </div>\n//                                 )}\n//                             </h2>\n\n//                         </div>\n\n//                         <div className=\"flex-right\">\n\n//                         </div>\n//                     </div>\n\n//                 </div>\n\n//                 <div className='flex-right'>\n//                     <button className='clear-btn'>Mark for Review & Next</button>\n//                     <button className='clear-btn' onClick={clearResponse}>\n//                         Clear Response\n//                     </button>\n//                     <button className='previous-btn'  onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                         <i className='fa-solid fa-angles-left'></i> Previous\n//                     </button>\n//                     <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                         {activeQuestion === Qimages.length - 1 ? 'Submit' : 'Save & Next'}\n//                         <i className='fa-solid fa-angles-right'></i>\n//                     </button>\n//                 </div>\n//             </div>\n//             <div className='rightsidebar'>\n//                 <RightSidebar />\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Paper;\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport \"./Paper.css\";\nimport PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\nimport RightSidebar from \"../../Components/RightSidebar/RightSidebar\";\n// import \"../../Components/RightSidebar/RightSidebar.css\";\nimport { DotSpinner } from \"@uiball/loaders\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Paper = ({\n  onQuestionSelect,\n  questionStatus,\n  seconds1\n}) => {\n  _s();\n  const [Qimages, setQImages] = useState([]);\n  const [OPTimages, setOPTImages] = useState([]);\n  const [activeQuestion, setActiveQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState(Array(Qimages.length).fill(\"\"));\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [showResult, setShowResult] = useState(false);\n  const [result, setResult] = useState({\n    score: 0,\n    correctAnswers: 0,\n    wrongAnswers: 0\n  });\n  useEffect(() => {\n    // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n    const fetchQImages = async () => {\n      let fetchedQImages = [];\n      for (let i = 1; i <= 1000; i += 6) {\n        // Assuming there are 100 sets of images\n        try {\n          const response = await fetch(`http://localhost:7002/images/${i}`);\n          const data = await response.json();\n          if (data.length > 0) {\n            fetchedQImages.push(data[0]); // Add only the first image from each set\n          }\n        } catch (error) {\n          console.error(\"Error fetching Qimages:\", error);\n        }\n      }\n      setQImages(fetchedQImages);\n    };\n\n    // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n    const fetchOPTImages = async () => {\n      let fetchedOPTImages = [];\n      for (let i = 1; i <= 1000; i += 6) {\n        // Assuming there are 100 sets of images\n        try {\n          for (let j = i + 1; j <= i + 4; j++) {\n            const response = await fetch(`http://localhost:7002/images/${j}`);\n            const data = await response.json();\n            if (data.length > 0) {\n              fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n            }\n          }\n        } catch (error) {\n          console.error(\"Error fetching OPTimages:\", error);\n        }\n      }\n      setOPTImages(fetchedOPTImages);\n    };\n    fetchQImages();\n    fetchOPTImages();\n  }, []); // Empty dependency array to fetch data only once when the component mounts\n\n  const [timers, setTimers] = useState(new Array(Qimages.length).fill(0));\n  const [timer, setTimer] = useState(0);\n  const onAnswerSelected = OptionLetter => {\n    const updatedSelectedAnswers = [...selectedAnswers];\n    updatedSelectedAnswers[activeQuestion] = OptionLetter;\n    setSelectedAnswers(updatedSelectedAnswers);\n  };\n  const clearResponse = () => {\n    const updatedSelectedAnswers = [...selectedAnswers];\n    updatedSelectedAnswers[activeQuestion] = \"\";\n    setSelectedAnswers(updatedSelectedAnswers);\n  };\n  const goToPreviousQuestion = () => {\n    setCurrentQuestionIndex(prevIndex => {\n      // Save the current timer value for the question\n\n      const updatedTimers = [...timers];\n      updatedTimers[prevIndex] = timer;\n      setTimers(updatedTimers);\n\n      // Move to the previous question\n\n      return prevIndex - 1;\n    });\n    if (activeQuestion > 0) {\n      setActiveQuestion(activeQuestion - 1);\n    }\n  };\n  const onClickNext = () => {\n    setCurrentQuestionIndex(prevIndex => {\n      // Save the current timer value for the question\n\n      const updatedTimers = [...timers];\n      updatedTimers[prevIndex] = timer;\n      setTimers(updatedTimers);\n\n      // Move to the next question\n\n      return prevIndex + 1;\n    });\n    const correctAnswer = Qimages[activeQuestion].correct_answer; // Replace 'correct_answer' with the actual property name\n    const selectedAnswer = selectedAnswers[activeQuestion];\n    if (selectedAnswer === correctAnswer) {\n      setResult(prevResult => ({\n        ...prevResult,\n        score: prevResult.score + 5,\n        correctAnswers: prevResult.correctAnswers + 1\n      }));\n    } else {\n      setResult(prevResult => ({\n        ...prevResult,\n        wrongAnswers: prevResult.wrongAnswers + 1\n      }));\n    }\n    if (activeQuestion < Qimages.length - 1) {\n      setActiveQuestion(prevActiveQuestion => prevActiveQuestion + 1);\n    } else {\n      setShowResult(true);\n      calculateResult(); // Implement this function for additional result calculations\n    }\n  };\n\n  const formatTime = seconds => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor(seconds % 3600 / 60);\n    const remainingSeconds = seconds % 60;\n    return `${hours > 9 ? hours : \"0\" + hours}:${minutes > 9 ? minutes : \"0\" + minutes}:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n  };\n  useEffect(() => {\n    // Set the timer to the saved value for the current question\n\n    setTimer(timers[currentQuestionIndex] || 0);\n    let interval;\n    interval = setInterval(() => {\n      setTimer(prevTimer => prevTimer + 1);\n    }, 1000);\n\n    // Clear the interval when the component unmounts or when the user moves to the next question\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [currentQuestionIndex, timers]);\n\n  // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\n  const currentQuestion = Qimages[currentQuestionIndex];\n  const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : \"\";\n  const addLeadingZero = number => number > 9 ? number : `0${number}`;\n  const calculateResult = () => {\n    // Implement additional result calculations here if needed\n    // Example: Accuracy, Average Score, Top Score, Live Rank, etc.\n  };\n\n  // Timer for whole page\n\n  //   const totalTime = 180 * 60; // 180 minutes in seconds\n  //   const [wtimer, setWTimer] = useState(totalTime);\n\n  //   useEffect(() => {\n  //     const interval = setInterval(() => {\n  //       setWTimer((prevTimer) => prevTimer - 1);\n  //     }, 1000);\n\n  //     // Clear the interval and handle time-up logic when timer reaches 0\n  //     if (timer <= 0) {\n  //       clearInterval(interval);\n  //       // Handle time-up logic here (e.g., navigate to a different component)\n  //     }\n\n  //     // Clean up the interval on component unmount or when navigating away\n  //     return () => {\n  //       clearInterval(interval);\n  //     };\n  //   }, [timer]);\n\n  //   const WformatTime = (seconds) => {\n  //     const hours = Math.floor(seconds / 3600);\n  //     const minutes = Math.floor((seconds % 3600) / 60);\n  //     const remainingSeconds = seconds % 60;\n  //     return `${hours > 9 ? hours : '0' + hours}:${minutes > 9 ? minutes : '0' + minutes}:${remainingSeconds > 9 ? remainingSeconds : '0' + remainingSeconds}`;\n  //   };\n\n  const [answeredQuestions, setAnsweredQuestions] = useState([]);\n  const handleButtonClick = questionNumber => {\n    onQuestionSelect(questionNumber);\n    setAnsweredQuestions([...answeredQuestions, questionNumber]);\n  };\n  const buttons = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30];\n  const renderList = buttons.map((item, index) => {\n    let className = \"quesAns-btn\";\n    if (questionStatus && questionStatus[index] === \"answered\") {\n      className += \"answered\";\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: className,\n        onClick: () => handleButtonClick(item),\n        children: item\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1460,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1459,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sub-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(PaperHeader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1471,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1470,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"subjects\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"subject-btn\",\n              children: \"Mathematics\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1476,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"subject-btn\",\n              children: \"Physics\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1477,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"subject-btn\",\n              children: \"Chemistry\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1478,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1475,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"second-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"single-select-question\",\n              children: \"Single Select Question\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1481,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"right-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"marks\",\n                children: [\"Marks: \", /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"plus-mark\",\n                  children: \"+1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1486,\n                  columnNumber: 26\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"minus-mark\",\n                  children: \"-1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1487,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1485,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Timer: \", formatTime(timer)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1489,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1484,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1480,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"question-no\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"active-question-no\",\n              children: [\"Question No. \", addLeadingZero(currentQuestionIndex + 1)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1493,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"total-question\",\n              children: [\" \", \"of \", addLeadingZero(Qimages.length)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1496,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1492,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"options-container\",\n            children: /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"question\",\n              children: Qimages && Qimages.length > 0 && Qimages[activeQuestion] ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: `data:image/png;base64,${Qimages[activeQuestion].image_data}`,\n                  alt: `QImage ${activeQuestion + 1}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1506,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                  className: \"options-container\",\n                  children: OPTimages.slice(activeQuestion * 4, activeQuestion * 4 + 4).map((optImage, optIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"radio\",\n                      name: \"index\",\n                      checked: selectedAnswers[activeQuestion] === String.fromCharCode(65 + optIndex),\n                      onChange: () => onAnswerSelected(String.fromCharCode(65 + optIndex))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1516,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"alpha-index\",\n                      children: /*#__PURE__*/_jsxDEV(\"img\", {\n                        src: `data:image/png;base64,${optImage.image_data}`,\n                        alt: `OPTImage ${optIndex + 2}-${optIndex + 5}`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1530,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1529,\n                      columnNumber: 27\n                    }, this)]\n                  }, optIndex, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1515,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1510,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1505,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"loading-gif\",\n                children: /*#__PURE__*/_jsxDEV(DotSpinner, {\n                  size: 90,\n                  speed: 0.9,\n                  color: \"black\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1541,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1540,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1503,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1502,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex-right\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1547,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1474,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1473,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-right\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"clear-btn\",\n          children: \"Mark for Review & Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1552,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"clear-btn\",\n          onClick: clearResponse,\n          children: \"Clear Response\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1553,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"previous-btn\",\n          onClick: goToPreviousQuestion,\n          disabled: activeQuestion === 0,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa-solid fa-angles-left\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1561,\n            columnNumber: 13\n          }, this), \" Previous\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1556,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-btn\",\n          onClick: onClickNext,\n          disabled: !selectedAnswers[activeQuestion],\n          children: [activeQuestion === Qimages.length - 1 ? \"Submit\" : \"Save & Next\", /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa-solid fa-angles-right\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1569,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1563,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1551,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1469,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rightsidebar\",\n      children: /*#__PURE__*/_jsxDEV(RightSidebar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1574,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1573,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1468,\n    columnNumber: 5\n  }, this);\n};\n_s(Paper, \"7OAoBFssuj5eerwi4OzZKgqqQ7g=\");\n_c = Paper;\nexport default Paper;\nvar _c;\n$RefreshReg$(_c, \"Paper\");","map":{"version":3,"names":["React","useEffect","useState","useRef","PaperHeader","RightSidebar","DotSpinner","jsxDEV","_jsxDEV","Paper","onQuestionSelect","questionStatus","seconds1","_s","Qimages","setQImages","OPTimages","setOPTImages","activeQuestion","setActiveQuestion","selectedAnswers","setSelectedAnswers","Array","length","fill","currentQuestionIndex","setCurrentQuestionIndex","showResult","setShowResult","result","setResult","score","correctAnswers","wrongAnswers","fetchQImages","fetchedQImages","i","response","fetch","data","json","push","error","console","fetchOPTImages","fetchedOPTImages","j","timers","setTimers","timer","setTimer","onAnswerSelected","OptionLetter","updatedSelectedAnswers","clearResponse","goToPreviousQuestion","prevIndex","updatedTimers","onClickNext","correctAnswer","correct_answer","selectedAnswer","prevResult","prevActiveQuestion","calculateResult","formatTime","seconds","hours","Math","floor","minutes","remainingSeconds","interval","setInterval","prevTimer","clearInterval","currentQuestion","questionImageSrc","image_data","addLeadingZero","number","answeredQuestions","setAnsweredQuestions","handleButtonClick","questionNumber","buttons","renderList","map","item","index","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","slice","optImage","optIndex","type","name","checked","String","fromCharCode","onChange","size","speed","color","disabled","_c","$RefreshReg$"],"sources":["D:/sravanfiles/daily  work by sravan/works/october/27-10-2023/egate_Quiz_project/src/Pages/Paper/Paper.jsx"],"sourcesContent":["// test commit\n\n// import React, { useEffect, useState } from 'react';\n// import quiz from '../../Data/quesAns'\n// import './Paper.css'\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader'\n\n// // Defining Timer code\n// const formatTime = (time) => {\n//     let minutes = Math.floor(time / 60);\n//     let seconds = Math.floor(time - minutes * 60);\n\n//     if (minutes < 10) minutes = '0' + minutes;\n//     if (seconds < 10) seconds = '0' + seconds;\n//     return minutes + ':' + seconds;\n// }; // End of Defining Timer code\n\n// const Paper = ({ seconds, answeredQuestions }) => {\n\n//     const [activeQuestion, setActiveQuestion] = useState(0);\n//     const handleQuestionSelect = (questionNumber) => {\n//         setActiveQuestion(questionNumber - 1);\n//     }\n\n//     // const [questionStatus, setQuestionStatus] = useState(Array(30).fill('notAnswered'))\n//     // const [activeQuestion, setActiveQuestion] = useState(0)\n//     // const [selectedAnswer, setSelectedAnswer] = useState('')\n\n//     const [selectedAnswers, setSelectedAnswers] = useState(new Array(quiz.questions.length).fill(''));\n//     const [showResult, setShowResult] = useState(false)\n//     const [result, setResult] = useState({\n//         score: 0,\n//         correctAnswers: 0,\n//         wrongAnswers: 0,\n//     })\n\n//     const { questions } = quiz\n//     const { question, choices, correctAnswer } = questions[activeQuestion]\n//     const onClickNext = () => {\n//         setResult((prev) =>\n//             selectedAnswers[activeQuestion] === correctAnswer\n//                 ? {\n//                     ...prev,\n//                     score: prev.score + 5,\n//                     correctAnswers: prev.correctAnswers + 1,\n//                 }\n//                 : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\n//         );\n//         if (activeQuestion !== questions.length - 1) {\n//             setActiveQuestion((prev) => prev + 1);\n//         } else {\n//             // setActiveQuestion(0);\n//             setShowResult(true);\n//             calculateResult();//new added code\n//         }\n//     };\n\n//     const onAnswerSelected = (OptionLetter) => {\n//         // Update the selected answer for the current question\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//         setSelectedAnswers(updatedSelectedAnswers);\n//         // setSelectedAnswers(updatedSelectedAnswers, OptionLetter);\n\n//     };\n\n//     const clearResponse = () => {\n//         // Clear the response for the current question\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = '';\n//         setSelectedAnswers(updatedSelectedAnswers);\n//     };\n\n//     const goToPreviousQuestion = () => {\n//         // Move to the previous question\n//         if (activeQuestion > 0) {\n//             setActiveQuestion((prev) => prev - 1);\n//         }\n//     };\n\n//     const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n//     const [countdown, setCountDown] = useState(seconds);\n//     useEffect(() => {\n//         const timerId = setInterval(() => {\n//             setCountDown((prevCountDown) =>\n//                 prevCountDown - 1\n//             );\n//         }, 1000)\n//         return () => {\n//             clearInterval(timerId);\n//         };\n//     }, [])\n\n//     useEffect(() => {\n//         if (countdown <= 0) {\n//             setShowResult(true);\n//             // clearInterval(timerId.current);\n//             // alert(\"End\");\n//         }\n//     }, [countdown]);\n\n//    // NEW ADDED CODE\n\n//     // const [showResult, setShowResult] = useState(false);\n//     const [accuracy, setAccuracy] = useState(0);\n//     const [averageScore, setAverageScore] = useState(0);\n//     const [topScore, setTopScore] = useState(0);\n//     const [liveRank, setLiveRank] = useState(0);\n\n//     const calculateResult = () => {\n//         // Calculate accuracy\n//         const totalAttempted = answeredQuestions.length;\n//         const totalCorrect = result.correctAnswers;\n//         const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\n//         setAccuracy(calculatedAccuracy.toFixed(2));\n\n//         // Calculate average score\n//         const calculatedAverageScore = result.score / totalAttempted;\n//         setAverageScore(calculatedAverageScore.toFixed(2));\n\n//         // Placeholder for live ranking data - Replace this with actual data\n//         const calculatedTopScore = 100;\n//         const calculatedLiveRank = 1;\n\n//         setTopScore(calculatedTopScore);\n//         setLiveRank(calculatedLiveRank);\n//     };\n\n//     // const onClickSubmit = () => {\n//     //     calculateResult();\n//     //     setShowResult(true);\n//     // };\n\n//     return (\n\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     {!showResult ? (\n//                         <div>\n//                             <div className='subjects'>\n//                                 <button className='subject-btn'>Mathematics</button>\n//                                 <button className='subject-btn'>Physics</button>\n//                                 <button className='subject-btn'>Chemistry</button>\n//                             </div>\n//                             <div className='second-header'>\n//                                 <div className='single-select-question'>\n//                                     Single Select Question\n//                                 </div>\n//                                 <div className='right-header'>\n//                                     <div className='marks'>\n//                                         Marks: <div className='plus-mark'>+1</div>\n//                                         <div className='minus-mark'>-1</div>\n//                                     </div>\n//                                     <div className='timer'>\n//                                         <h3>Time Left: {formatTime(countdown)}</h3>\n//                                     </div>\n//                                 </div>\n//                             </div>\n//                             <div className='question-no'>\n//                                 <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\n//                                 <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\n//                             </div>\n\n//                             <h2 className='question'><img src={question} alt=\"question\" /></h2>\n\n//                             <ul className='options-container'>\n//                                 {choices.map((answer, index) => (\n//                                     <li key={answer}>\n//                                         <input type=\"radio\"\n//                                             // id={answer}\n//                                             id={`option-${index}`}\n//                                             name='answer'\n//                                             value={answer}\n//                                             checked={selectedAnswers[activeQuestion] === answer}\n//                                             onChange={() => onAnswerSelected(answer)} />\n\n//                                         <label className='alpha-index' htmlFor={`option-${index}`}>\n//                                             {/* htmlFor={answer} */}\n//                                             {String.fromCharCode(65 + index)}.\n//                                             <img src={answer} alt=\"answer\" />\n//                                         </label>\n//                                     </li>\n//                                 ))}\n//                             </ul>\n\n//                             <div className=\"flex-right\">\n//                                 <button className='clear-btn'>Mark for Review & Next</button>\n//                                 <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\n//                                 <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                                     <i class=\"fa-solid fa-angles-left\"></i>\n//                                     Previous\n//                                 </button>\n//                                 <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                                     {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\n//                                 </button>\n\n//                             </div>\n//                         </div>\n//                     ) : (\n//                         <div className=\"result\">\n//                             <h3>Result</h3>\n//                             <p>\n//                                 Total Questions: <span>{questions.length}</span>\n//                             </p>\n//                             <p>\n//                                 Total Score:<span> {result.score}</span>\n//                             </p>\n//                             <p>\n//                                 Correct Answers:<span> {result.correctAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Wrong Answers:<span> {result.wrongAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Accuracy:<span> {accuracy}%</span>\n//                             </p>\n//                             <p>\n//                                 Average Score:<span> {averageScore}</span>\n//                             </p>\n//                             <p>\n//                                 Top Score:<span> {topScore}</span>\n//                             </p>\n//                             <p>\n//                                 Live Rank:<span> {liveRank}</span>\n//                             </p>\n//                         </div>\n//                     )}\n//                 </div>\n//             </div>\n//             <div className='rightsidebar'><RightSidebar onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} /></div>\n//         </div>\n\n//     )\n// }\n\n// export default Paper\n\n// import React, { useEffect, useState } from 'react';\n// // import quiz from '../../Data/quesAns'\n// import './Paper.css'\n// // import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader'\n\n// // Defining Timer code\n// // const formatTime = (time) => {\n// //     let minutes = Math.floor(time / 60);\n// //     let seconds = Math.floor(time - minutes * 60);\n\n// //     if (minutes < 10) minutes = '0' + minutes;\n// //     if (seconds < 10) seconds = '0' + seconds;\n// //     return minutes + ':' + seconds;\n// // }; // End of Defining Timer code\n\n// const Paper = () => {\n\n//     // const [activeQuestion, setActiveQuestion] = useState(0);\n//     // const handleQuestionSelect = (questionNumber) => {\n//     //     setActiveQuestion(questionNumber - 1);\n//     // }\n\n//     // const [questionStatus, setQuestionStatus] = useState(Array(30).fill('notAnswered'))\n//     // const [activeQuestion, setActiveQuestion] = useState(0)\n//     // const [selectedAnswer, setSelectedAnswer] = useState('')\n\n//     // const [selectedAnswers, setSelectedAnswers] = useState(new Array(quiz.questions.length).fill(''));\n//     // const [showResult, setShowResult] = useState(false)\n//     // const [result, setResult] = useState({\n//     //     score: 0,\n//     //     correctAnswers: 0,\n//     //     wrongAnswers: 0,\n//     // })\n\n//     // const { questions } = quiz\n//     // const { Qimages, OPTimages, correctAnswer } = [activeQuestion]\n//     // const onClickNext = () => {\n//     //     setResult((prev) =>\n//     //         selectedAnswers[activeQuestion] === correctAnswer\n//     //             ? {\n//     //                 ...prev,\n//     //                 score: prev.score + 5,\n//     //                 correctAnswers: prev.correctAnswers + 1,\n//     //             }\n//     //             : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\n//     //     );\n//     //     if (activeQuestion !== questions.length - 1) {\n//     //         setActiveQuestion((prev) => prev + 1);\n//     //     } else {\n//     //         // setActiveQuestion(0);\n//     //         setShowResult(true);\n//     //         calculateResult();//new added code\n//     //     }\n//     // };\n\n//     // const onAnswerSelected = (OptionLetter) => {\n//     //     // Update the selected answer for the current question\n//     //     const updatedSelectedAnswers = [...selectedAnswers];\n//     //     updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//     //     setSelectedAnswers(updatedSelectedAnswers);\n//     //     // setSelectedAnswers(updatedSelectedAnswers, OptionLetter);\n\n//     // };\n\n//     // const clearResponse = () => {\n//     //     // Clear the response for the current question\n//     //     const updatedSelectedAnswers = [...selectedAnswers];\n//     //     updatedSelectedAnswers[activeQuestion] = '';\n//     //     setSelectedAnswers(updatedSelectedAnswers);\n//     // };\n\n//     // const goToPreviousQuestion = () => {\n//     //     // Move to the previous question\n//     //     if (activeQuestion > 0) {\n//     //         setActiveQuestion((prev) => prev - 1);\n//     //     }\n//     // };\n\n//     // const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n//     // const [countdown, setCountDown] = useState(seconds);\n//     // useEffect(() => {\n//     //     const timerId = setInterval(() => {\n//     //         setCountDown((prevCountDown) =>\n//     //             prevCountDown - 1\n//     //         );\n//     //     }, 1000)\n//     //     return () => {\n//     //         clearInterval(timerId);\n//     //     };\n//     // }, [])\n\n//     // useEffect(() => {\n//     //     if (countdown <= 0) {\n//     //         setShowResult(true);\n//     //         // clearInterval(timerId.current);\n//     //         // alert(\"End\");\n//     //     }\n//     // }, [countdown]);\n\n//     // NEW ADDED CODE\n\n//     // const [showResult, setShowResult] = useState(false);\n//     // const [accuracy, setAccuracy] = useState(0);\n//     // const [averageScore, setAverageScore] = useState(0);\n//     // const [topScore, setTopScore] = useState(0);\n//     // const [liveRank, setLiveRank] = useState(0);\n\n//     // const calculateResult = () => {\n//     //     // Calculate accuracy\n//     //     const totalAttempted = answeredQuestions.length;\n//     //     const totalCorrect = result.correctAnswers;\n//     //     const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\n//     //     setAccuracy(calculatedAccuracy.toFixed(2));\n\n//     //     // Calculate average score\n//     //     const calculatedAverageScore = result.score / totalAttempted;\n//     //     setAverageScore(calculatedAverageScore.toFixed(2));\n\n//     //     // Placeholder for live ranking data - Replace this with actual data\n//     //     const calculatedTopScore = 100;\n//     //     const calculatedLiveRank = 1;\n\n//     //     setTopScore(calculatedTopScore);\n//     //     setLiveRank(calculatedLiveRank);\n//     // };\n\n//     // const onClickSubmit = () => {\n//     //     calculateResult();\n//     //     setShowResult(true);\n//     // };\n\n//     const [Qimages,setQImages] = useState([]);\n//     const [OPTimages,setOPTImages] = useState([]);\n\n//     useEffect(() => {\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//         const fetchQImages = async () => {\n//             let fetchedQImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     const response = await fetch(`http://localhost:7000/images/${i}`);\n//                     const data = await response.json();\n//                     if (data.length > 0) {\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching Qimages:', error);\n//                 }\n//             }\n\n//             setQImages(fetchedQImages);\n//         };\n\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//         const fetchOPTImages = async () => {\n//             let fetchedOPTImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     for (let j = i + 1; j <= i + 4; j++) {\n//                         const response = await fetch(`http://localhost:7000/images/${j}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                         }\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching OPTimages:', error);\n//                 }\n//             }\n\n//             setOPTImages(fetchedOPTImages);\n//         };\n\n//         fetchQImages();\n//         fetchOPTImages();\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     return (\n\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     {/* {!showResult ? ( */}\n//                         <div>\n//                             <div className='subjects'>\n//                                 <button className='subject-btn'>Mathematics</button>\n//                                 <button className='subject-btn'>Physics</button>\n//                                 <button className='subject-btn'>Chemistry</button>\n//                             </div>\n//                             <div className='second-header'>\n//                                 <div className='single-select-question'>\n//                                     Single Select Question\n//                                 </div>\n//                                 {/* <div className='right-header'>\n//                                     <div className='marks'>\n//                                         Marks: <div className='plus-mark'>+1</div>\n//                                         <div className='minus-mark'>-1</div>\n//                                     </div>\n//                                     <div className='timer'>\n//                                         <h3>Time Left: {formatTime(countdown)}</h3>\n//                                     </div>\n//                                 </div> */}\n//                             </div>\n//                             {/* <div className='question-no'>\n//                                 <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\n//                                 <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\n//                             </div> */}\n\n//                             {Qimages.map((qImage, index) => (\n//                                 <div key={index}>\n//                                     {/* <h2>QImage {index + 1}</h2> */}\n//                                     {/* <div className='question-no'>\n//                                         <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\n//                                         <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\n//                                     </div> */}\n//                                     <h2 className='question'> <img\n//                                         src={`data:image/png;base64,${qImage.image_data}`}\n//                                         alt={`QImage ${index + 1}`}\n//                                     /></h2>\n\n//                                     <ul className='options-container'>\n//                                         {OPTimages.slice(index * 4, index * 4 + 4).map((optImage, optIndex) => (\n//                                             <li>\n//                                                 <input type=\"radio\"\n//                                                 // // id={answer}\n//                                                 //     id={`option-${index}`}\n//                                                 //     name='answer'\n//                                                 //     value={optImage}\n//                                                 //     checked={selectedAnswers[activeQuestion] === optImage}\n//                                                 //     onChange={() => onAnswerSelected(optImage)}\n//                                                 />\n\n//                                                 <label className='alpha-index' >\n//                                                     <img\n//                                                         key={optIndex}\n//                                                         src={`data:image/png;base64,${optImage.image_data}`}\n//                                                         alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                                     />\n//                                                 </label>\n//                                             </li>\n//                                         ))}\n//                                     </ul>\n//                                 </div>\n//                             ))}\n\n//                             {/* <div className=\"flex-right\">\n//                                 <button className='clear-btn'>Mark for Review & Next</button>\n//                                 <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\n//                                 <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                                     <i class=\"fa-solid fa-angles-left\"></i>\n//                                     Previous\n//                                 </button>\n//                                 <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                                     {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\n//                                 </button>\n\n//                             </div> */}\n//                         </div>\n//                     {/* ) : ( */}\n//                         {/* <div className=\"result\"> */}\n//                             {/* <h3>Result</h3>\n//                             <p>\n//                                 Total Questions: <span>{questions.length}</span>\n//                             </p>\n//                             <p>\n//                                 Total Score:<span> {result.score}</span>\n//                             </p>\n//                             <p>\n//                                 Correct Answers:<span> {result.correctAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Wrong Answers:<span> {result.wrongAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Accuracy:<span> {accuracy}%</span>\n//                             </p>\n//                             <p>\n//                                 Average Score:<span> {averageScore}</span>\n//                             </p>\n//                             <p>\n//                                 Top Score:<span> {topScore}</span>\n//                             </p>\n//                             <p>\n//                                 Live Rank:<span> {liveRank}</span>\n//                             </p> */}\n//                         {/* </div> */}\n//                     {/* )} */}\n//                 </div>\n//             </div>\n//             {/* <div className='rightsidebar'><RightSidebar onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} /></div> */}\n//         </div>\n\n//     )\n// }\n\n// export default Paper\n\n// import React, { useEffect, useState } from 'react';\n// import './Paper.css';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\n\n// const Paper = () => {\n//     const [Qimages, setQImages] = useState([]);\n//     const [OPTimages, setOPTImages] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n//         useEffect(() => {\n//             // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//             const fetchQImages = async () => {\n//                 let fetchedQImages = [];\n\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                     try {\n//                         const response = await fetch(`http://localhost:7000/images/${i}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedQImages.push(data[0]); // Add only the first image from each set\n//                         }\n//                     } catch (error) {\n//                         console.error('Error fetching Qimages:', error);\n//                     }\n//                 }\n\n//                 setQImages(fetchedQImages);\n//             };\n\n//             // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//             const fetchOPTImages = async () => {\n//                 let fetchedOPTImages = [];\n\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                     try {\n//                         for (let j = i + 1; j <= i + 4; j++) {\n//                             const response = await fetch(`http://localhost:7000/images/${j}`);\n//                             const data = await response.json();\n//                             if (data.length > 0) {\n//                                 fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                             }\n//                         }\n//                     } catch (error) {\n//                         console.error('Error fetching OPTimages:', error);\n//                     }\n//                 }\n\n//                 setOPTImages(fetchedOPTImages);\n//             };\n\n//             fetchQImages();\n//             fetchOPTImages();\n//         }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     const handleNextClick = () => {\n//         // Move to the next question when the \"Next\" button is clicked\n//         setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n//     };\n\n//     return (\n//         <div className='main'>\n//             {/* ... */}\n//             <div><PaperHeader /></div>\n//             <div className='options-container'>\n//                 {/* Display only the current question and its options */}\n//                 <h2 className='question'>\n//                     <img\n//                         src={`data:image/png;base64,${Qimages[currentQuestionIndex].image_data}`}\n//                         alt={`QImage ${currentQuestionIndex + 1}`}\n//                     />\n//                 </h2>\n//                 <ul className='options-container'>\n//                     {OPTimages\n//                         .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                         .map((optImage, optIndex) => (\n//                             <li key={optIndex}>\n//                                 <input type=\"radio\" />\n//                                 <label className='alpha-index'>\n//                                     <img\n//                                         src={`data:image/png;base64,${optImage.image_data}`}\n//                                         alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                     />\n//                                 </label>\n//                             </li>\n//                         ))}\n//                 </ul>\n//                 <button onClick={handleNextClick}>Next</button>\n//             </div>\n//             {/* ... */}\n//         </div>\n//     );\n// };\n\n// export default Paper;\n\n// import React, { useEffect, useState } from 'react';\n// import './Paper.css';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\n// // import { Waveform } from '@uiball/loaders'\n\n// const Paper = () => {\n\n//     const [Qimages, setQImages] = useState([]);\n//     const [OPTimages, setOPTImages] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n//     useEffect(() => {\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//         const fetchQImages = async () => {\n//             let fetchedQImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     const response = await fetch(`http://localhost:7001/images/${i}`);\n//                     const data = await response.json();\n//                     if (data.length > 0) {\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching Qimages:', error);\n//                 }\n//             }\n\n//             setQImages(fetchedQImages);\n//         };\n\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//         const fetchOPTImages = async () => {\n//             let fetchedOPTImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     for (let j = i + 1; j <= i + 4; j++) {\n//                         const response = await fetch(`http://localhost:7001/images/${j}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                         }\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching OPTimages:', error);\n//                 }\n//             }\n\n//             setOPTImages(fetchedOPTImages);\n//         };\n\n//         fetchQImages();\n//         fetchOPTImages();\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     const handleNextClick = () => {\n//         // Move to the next question when the \"Next\" button is clicked\n//         setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n//     };\n\n//     // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\n//     const currentQuestion = Qimages[currentQuestionIndex];\n//     const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\n\n//     return (\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     <div className='options-container'>\n//                         <h2 className='question'>\n//                             {currentQuestion ? (\n//                                 <img\n//                                     src={questionImageSrc}\n//                                     alt={`QImage ${currentQuestionIndex + 1}`}\n//                                 />\n//                             ) : (\n//                                 <p>Loading question...</p>\n\n//                             // <Waveform\n//                             //     size={40}\n//                             //     lineWeight={3.5}\n//                             //     speed={1}\n//                             //     color=\"black\"\n//                             // />\n//                             )}\n//                         </h2>\n//                         <ul className='options-container'>\n//                             {/* ... (options rendering logic) */}\n//                             {OPTimages\n//                                 .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                                 .map((optImage, optIndex) => (\n\n//                                     <li key={optIndex}>\n//                                         <input type=\"radio\" />\n//                                         <label className='alpha-index'>\n//                                             <img\n//                                                 src={`data:image/png;base64,${optImage.image_data}`}\n//                                                 alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                             />\n//                                         </label>\n//                                     </li>\n//                                 ))}\n//                         </ul>\n//                         <button onClick={handleNextClick}>Next</button>\n//                     </div>\n\n//                 </div>\n//             </div>\n\n//             {/* ... */}\n//         </div>\n//     );\n// };\n\n// export default Paper;\n\n// import React, { useEffect, useState } from 'react';\n// import './Paper.css';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\n\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import { DotSpinner } from '@uiball/loaders'\n\n// const Paper = () => {\n\n//     const [Qimages, setQImages] = useState([]);\n//     const [OPTimages, setOPTImages] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n//     useEffect(() => {\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//         const fetchQImages = async () => {\n//             let fetchedQImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     const response = await fetch(`http://localhost:7002/images/${i}`);\n//                     const data = await response.json();\n//                     if (data.length > 0) {\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching Qimages:', error);\n//                 }\n//             }\n\n//             setQImages(fetchedQImages);\n//         };\n\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//         const fetchOPTImages = async () => {\n//             let fetchedOPTImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     for (let j = i + 1; j <= i + 4; j++) {\n//                         const response = await fetch(`http://localhost:7002/images/${j}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                         }\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching OPTimages:', error);\n//                 }\n//             }\n\n//             setOPTImages(fetchedOPTImages);\n//         };\n\n//         fetchQImages();\n//         fetchOPTImages();\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     // const handleNextClick = () => {\n//     //     // Move to the next question when the \"Next\" button is clicked\n//     //     setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n\n//     // };\n\n//     // const handlepreClick=()=>{\n//     //     setCurrentQuestionIndex(prevIndex => prevIndex - 1);\n//     //     // setTimer(timer)\n\n//     // }\n\n// // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\n// const currentQuestion = Qimages[currentQuestionIndex];\n// const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\n\n// const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n\n//     return (\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     <div>\n//                         <div className='subjects'>\n//                             <button className='subject-btn'>Mathematics</button>\n//                             <button className='subject-btn'>Physics</button>\n//                             <button className='subject-btn'>Chemistry</button>\n\n//                         </div>\n//                         <div className='second-header'>\n//                             <div className='single-select-question'>\n//                                 Single Select Question\n//                             </div>\n//                             <div className='right-header'>\n//                                 <div className='marks'>\n//                                     Marks: <div className='plus-mark'>+1</div>\n//                                     <div className='minus-mark'>-1</div>\n//                                 </div>\n//                                 {/* <div className='timer'>\n//                                     <h3>Time Left: {formatTime(countdown)}</h3>\n//                                 </div> */}\n//                             </div>\n//                         </div>\n//                         <div className='question-no'>\n//                             <span className=\"active-question-no\">Question No. {addLeadingZero(currentQuestionIndex + 1)}</span>\n//                             <span className=\"total-question\"> of {addLeadingZero(Qimages.length)}</span>\n//                         </div>\n\n//                         <div className='options-container'>\n\n//                             <h2 className='question'>\n//                                 {currentQuestion ? (\n//                                  <div>\n//                                         <img\n//                                             src={questionImageSrc}\n//                                             alt={`QImage ${currentQuestionIndex + 1}`}\n//                                         />\n//                                         <ul className='options-container'>\n//                                             {/* ... (options rendering logic) */}\n//                                             {OPTimages\n//                                                 .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                                                 .map((optImage, optIndex) => (\n\n//                                                     <li key={optImage}>\n//                                                         <input\n//                                                         name='index'\n//                                                             type=\"radio\"\n//                                                           />\n//                                                         <label className='alpha-index'>\n//                                                             <img\n//                                                                 src={`data:image/png;base64,${optImage.image_data}`}\n//                                                                 alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                                             />\n//                                                         </label>\n//                                                     </li>\n//                                                 ))}\n//                                         </ul>\n//                                  </div>\n//                                 ) : (\n//                                     // <p>Loading question...</p>\n\n//                                  <div className='loading-gif'>\n//                                             <DotSpinner\n//                                                 size={90}\n//                                                 speed={0.9}\n//                                                 color=\"black\"\n\n//                                             />\n//                                  </div>\n//                                 )}\n\n//                             </h2>\n//                             {/* <ul className='options-container'>\n//                                 ... (options rendering logic)\n//                                 {OPTimages\n//                                     .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                                     .map((optImage, optIndex) => (\n\n//                                         <li key={optIndex}>\n//                                             <input type=\"radio\" />\n//                                             <label className='alpha-index'>\n//                                                 <img\n//                                                     src={`data:image/png;base64,${optImage.image_data}`}\n//                                                     alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                                 />\n//                                             </label>\n//                                         </li>\n//                                     ))}\n//                             </ul> */}\n//                             {/* <button onClick={handleNextClick}>Next</button> */}\n//                         </div>\n//                         {/* a */}\n\n//                         <div className=\"flex-right\">\n//                             {/* <button className='clear-btn'>Mark for Review & Next</button>\n//                             <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\n//                             <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                                 <i class=\"fa-solid fa-angles-left\"></i>\n//                                 Previous\n//                             </button>\n//                             <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                                 {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\n//                             </button> */}\n// {/*\n//                             <button onClick={handlepreClick}>Previous</button>\n\n//                             <button onClick={handleNextClick}>Save&Next</button> */}\n\n//                         </div>\n//                     </div>\n\n//                 </div>\n//             </div>\n\n//             <div className='rightsidebar'><RightSidebar /></div>\n//             {/* onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} */}\n\n//         </div>\n//     );\n// };\n\n// export default Paper;\n\n// import React, { useEffect, useState } from 'react';\n// import './Paper.css';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import { DotSpinner } from '@uiball/loaders';\n\n// const Paper = () => {\n//     const [Qimages, setQImages] = useState([]);\n//     const [OPTimages, setOPTImages] = useState([]);\n//     const [activeQuestion, setActiveQuestion] = useState(0);\n//     const [selectedAnswers, setSelectedAnswers] = useState(Array(Qimages.length).fill(''));\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//     const [showResult, setShowResult] = useState(false);\n//     const [result, setResult] = useState({\n//         score: 0,\n//         correctAnswers: 0,\n//         wrongAnswers: 0,\n//     });\n//     const [timers, setTimers] = useState(new Array(Qimages.length).fill(0));\n//     const [timer, setTimer] = useState(0);\n\n//     useEffect(() => {\n//             // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//             const fetchQImages = async () => {\n//                 let fetchedQImages = [];\n\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                     try {\n//                         const response = await fetch(`http://localhost:7002/images/${i}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedQImages.push(data[0]); // Add only the first image from each set\n//                         }\n//                     } catch (error) {\n//                         console.error('Error fetching Qimages:', error);\n//                     }\n//                 }\n\n//                 setQImages(fetchedQImages);\n//             };\n\n//             // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//             const fetchOPTImages = async () => {\n//                 let fetchedOPTImages = [];\n\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                     try {\n//                         for (let j = i + 1; j <= i + 4; j++) {\n//                             const response = await fetch(`http://localhost:7002/images/${j}`);\n//                             const data = await response.json();\n//                             if (data.length > 0) {\n//                                 fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                             }\n//                         }\n//                     } catch (error) {\n//                         console.error('Error fetching OPTimages:', error);\n//                     }\n//                 }\n\n//                 setOPTImages(fetchedOPTImages);\n//             };\n\n//             fetchQImages();\n//             fetchOPTImages();\n//         }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     const onAnswerSelected = (OptionLetter) => {\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//         setSelectedAnswers(updatedSelectedAnswers);\n//     };\n\n//     const clearResponse = () => {\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = '';\n//         setSelectedAnswers(updatedSelectedAnswers);\n//     };\n\n//     const goToPreviousQuestion = () => {\n//         setCurrentQuestionIndex(prevIndex => {\n\n//             // Save the current timer value for the question\n\n//             const updatedTimers = [...timers];\n\n//             updatedTimers[prevIndex] = timer;\n\n//             setTimers(updatedTimers);\n\n//             // Move to the previous question\n\n//             return prevIndex - 1;\n\n//         });\n//         if (activeQuestion > 0) {\n//             setActiveQuestion(activeQuestion - 1);\n//         }\n//     };\n\n//     const onClickNext = () => {\n//         setCurrentQuestionIndex(prevIndex => {\n\n//             // Save the current timer value for the question\n\n//             const updatedTimers = [...timers];\n\n//             updatedTimers[prevIndex] = timer;\n\n//             setTimers(updatedTimers);\n\n//             // Move to the next question\n\n//             return prevIndex + 1;\n\n//         });\n//         const correctAnswer = Qimages[activeQuestion].correct_answer; // Replace 'correct_answer' with the actual property name\n//         const selectedAnswer = selectedAnswers[activeQuestion];\n\n//         if (selectedAnswer === correctAnswer) {\n//             setResult(prevResult => ({\n//                 ...prevResult,\n//                 score: prevResult.score + 5,\n//                 correctAnswers: prevResult.correctAnswers + 1\n//             }));\n//         } else {\n//             setResult(prevResult => ({\n//                 ...prevResult,\n//                 wrongAnswers: prevResult.wrongAnswers + 1\n//             }));\n//         }\n\n//         if (activeQuestion < Qimages.length - 1) {\n//             setActiveQuestion(prevActiveQuestion => prevActiveQuestion + 1);\n//         } else {\n//             setShowResult(true);\n//             calculateResult(); // Implement this function for additional result calculations\n//         }\n//     };\n\n//     const formatTime = (seconds) => {\n\n//         const hours = Math.floor(seconds / 3600);\n\n//         const minutes = Math.floor((seconds % 3600) / 60);\n\n//         const remainingSeconds = seconds % 60;\n\n//         return `${hours > 9 ? hours : '0' + hours}:${minutes > 9 ? minutes : '0' + minutes}:${remainingSeconds > 9 ? remainingSeconds : '0' + remainingSeconds}`;\n\n//     };\n\n//     // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\n//     const currentQuestion = Qimages[currentQuestionIndex];\n//     const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\n//     const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n\n//     const calculateResult = () => {\n//         // Implement additional result calculations here if needed\n//         // Example: Accuracy, Average Score, Top Score, Live Rank, etc.\n//     };\n\n//     return (\n//         <div className='main'>\n\n//             <div className='sub-main'>\n\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     <div>\n//                         <div className='subjects'>\n//                             <button className='subject-btn'>Mathematics</button>\n//                             <button className='subject-btn'>Physics</button>\n//                             <button className='subject-btn'>Chemistry</button>\n\n//                         </div>\n//                         <div className='second-header'>\n//                             <div className='single-select-question'>\n//                                 Single Select Question\n//                             </div>\n//                             <div className='right-header'>\n//                                 <div className='marks'>\n//                                     Marks: <div className='plus-mark'>+1</div>\n//                                     <div className='minus-mark'>-1</div>\n//                                 </div>\n//                                 <div>Timer: {formatTime(timer)}</div>\n//                             </div>\n//                         </div>\n//                         <div className='question-no'>\n//                             <span className=\"active-question-no\">Question No. {addLeadingZero(currentQuestionIndex + 1)}</span>\n//                             <span className=\"total-question\"> of {addLeadingZero(Qimages.length)}</span>\n//                         </div>\n\n//                         <div className='options-container'>\n\n//                             <h2 className='question'>\n//                                 {Qimages && Qimages.length > 0 && Qimages[activeQuestion] ? (\n\n//                                     <div>\n//                                         <img src={`data:image/png;base64,${Qimages[activeQuestion].image_data}`} alt={`QImage ${activeQuestion + 1}`} />\n//                                         <ul className='options-container'>\n//                                             {OPTimages.slice(activeQuestion * 4, activeQuestion * 4 + 4).map((optImage, optIndex) => (\n//                                                 <li key={optIndex}>\n//                                                     <input\n//                                                         type='radio'\n//                                                         name='index'\n//                                                         checked={selectedAnswers[activeQuestion] === String.fromCharCode(65 + optIndex)}\n//                                                         onChange={() => onAnswerSelected(String.fromCharCode(65 + optIndex))}\n//                                                     />\n//                                                     <label className='alpha-index'>\n//                                                         <img\n//                                                             src={`data:image/png;base64,${optImage.image_data}`}\n//                                                             alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                                         />\n//                                                     </label>\n//                                                 </li>\n//                                             ))}\n//                                         </ul>\n//                                     </div>\n\n//                                 ) : (\n\n//                                     <div className='loading-gif'>\n//                                         <DotSpinner\n//                                             size={90}\n//                                             speed={0.9}\n//                                             color=\"black\"\n//                                         />\n//                                     </div>\n//                                 )}\n//                             </h2>\n\n//                         </div>\n\n//                         <div className=\"flex-right\">\n\n//                         </div>\n//                     </div>\n\n//                 </div>\n\n//                 <div className='flex-right'>\n//                     <button className='clear-btn'>Mark for Review & Next</button>\n//                     <button className='clear-btn' onClick={clearResponse}>\n//                         Clear Response\n//                     </button>\n//                     <button className='previous-btn'  onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                         <i className='fa-solid fa-angles-left'></i> Previous\n//                     </button>\n//                     <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                         {activeQuestion === Qimages.length - 1 ? 'Submit' : 'Save & Next'}\n//                         <i className='fa-solid fa-angles-right'></i>\n//                     </button>\n//                 </div>\n//             </div>\n//             <div className='rightsidebar'>\n//                 <RightSidebar />\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Paper;\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport \"./Paper.css\";\nimport PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\nimport RightSidebar from \"../../Components/RightSidebar/RightSidebar\";\n// import \"../../Components/RightSidebar/RightSidebar.css\";\nimport { DotSpinner } from \"@uiball/loaders\";\n\nconst Paper = ({ onQuestionSelect, questionStatus, seconds1 }) => {\n  const [Qimages, setQImages] = useState([]);\n  const [OPTimages, setOPTImages] = useState([]);\n  const [activeQuestion, setActiveQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState(\n    Array(Qimages.length).fill(\"\")\n  );\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [showResult, setShowResult] = useState(false);\n  const [result, setResult] = useState({\n    score: 0,\n    correctAnswers: 0,\n    wrongAnswers: 0,\n  });\n\n  useEffect(() => {\n    // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n    const fetchQImages = async () => {\n      let fetchedQImages = [];\n\n      for (let i = 1; i <= 1000; i += 6) {\n        // Assuming there are 100 sets of images\n        try {\n          const response = await fetch(`http://localhost:7002/images/${i}`);\n          const data = await response.json();\n          if (data.length > 0) {\n            fetchedQImages.push(data[0]); // Add only the first image from each set\n          }\n        } catch (error) {\n          console.error(\"Error fetching Qimages:\", error);\n        }\n      }\n\n      setQImages(fetchedQImages);\n    };\n\n    // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n    const fetchOPTImages = async () => {\n      let fetchedOPTImages = [];\n\n      for (let i = 1; i <= 1000; i += 6) {\n        // Assuming there are 100 sets of images\n        try {\n          for (let j = i + 1; j <= i + 4; j++) {\n            const response = await fetch(`http://localhost:7002/images/${j}`);\n            const data = await response.json();\n            if (data.length > 0) {\n              fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n            }\n          }\n        } catch (error) {\n          console.error(\"Error fetching OPTimages:\", error);\n        }\n      }\n\n      setOPTImages(fetchedOPTImages);\n    };\n\n    fetchQImages();\n    fetchOPTImages();\n  }, []); // Empty dependency array to fetch data only once when the component mounts\n\n  const [timers, setTimers] = useState(new Array(Qimages.length).fill(0));\n  const [timer, setTimer] = useState(0);\n\n  const onAnswerSelected = (OptionLetter) => {\n    const updatedSelectedAnswers = [...selectedAnswers];\n    updatedSelectedAnswers[activeQuestion] = OptionLetter;\n    setSelectedAnswers(updatedSelectedAnswers);\n  };\n\n  const clearResponse = () => {\n    const updatedSelectedAnswers = [...selectedAnswers];\n    updatedSelectedAnswers[activeQuestion] = \"\";\n    setSelectedAnswers(updatedSelectedAnswers);\n  };\n\n  const goToPreviousQuestion = () => {\n    setCurrentQuestionIndex((prevIndex) => {\n      // Save the current timer value for the question\n\n      const updatedTimers = [...timers];\n\n      updatedTimers[prevIndex] = timer;\n\n      setTimers(updatedTimers);\n\n      // Move to the previous question\n\n      return prevIndex - 1;\n    });\n    if (activeQuestion > 0) {\n      setActiveQuestion(activeQuestion - 1);\n    }\n  };\n\n  const onClickNext = () => {\n    setCurrentQuestionIndex((prevIndex) => {\n      // Save the current timer value for the question\n\n      const updatedTimers = [...timers];\n\n      updatedTimers[prevIndex] = timer;\n\n      setTimers(updatedTimers);\n\n      // Move to the next question\n\n      return prevIndex + 1;\n    });\n    const correctAnswer = Qimages[activeQuestion].correct_answer; // Replace 'correct_answer' with the actual property name\n    const selectedAnswer = selectedAnswers[activeQuestion];\n\n    if (selectedAnswer === correctAnswer) {\n      setResult((prevResult) => ({\n        ...prevResult,\n        score: prevResult.score + 5,\n        correctAnswers: prevResult.correctAnswers + 1,\n      }));\n    } else {\n      setResult((prevResult) => ({\n        ...prevResult,\n        wrongAnswers: prevResult.wrongAnswers + 1,\n      }));\n    }\n\n    if (activeQuestion < Qimages.length - 1) {\n      setActiveQuestion((prevActiveQuestion) => prevActiveQuestion + 1);\n    } else {\n      setShowResult(true);\n      calculateResult(); // Implement this function for additional result calculations\n    }\n  };\n\n  const formatTime = (seconds) => {\n    const hours = Math.floor(seconds / 3600);\n\n    const minutes = Math.floor((seconds % 3600) / 60);\n\n    const remainingSeconds = seconds % 60;\n\n    return `${hours > 9 ? hours : \"0\" + hours}:${\n      minutes > 9 ? minutes : \"0\" + minutes\n    }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n  };\n\n  useEffect(() => {\n    // Set the timer to the saved value for the current question\n\n    setTimer(timers[currentQuestionIndex] || 0);\n\n    let interval;\n\n    interval = setInterval(() => {\n      setTimer((prevTimer) => prevTimer + 1);\n    }, 1000);\n\n    // Clear the interval when the component unmounts or when the user moves to the next question\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [currentQuestionIndex, timers]);\n\n  // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\n  const currentQuestion = Qimages[currentQuestionIndex];\n  const questionImageSrc = currentQuestion\n    ? `data:image/png;base64,${currentQuestion.image_data}`\n    : \"\";\n  const addLeadingZero = (number) => (number > 9 ? number : `0${number}`);\n\n  const calculateResult = () => {\n    // Implement additional result calculations here if needed\n    // Example: Accuracy, Average Score, Top Score, Live Rank, etc.\n  };\n\n\n\n\n  // Timer for whole page\n\n//   const totalTime = 180 * 60; // 180 minutes in seconds\n//   const [wtimer, setWTimer] = useState(totalTime);\n\n//   useEffect(() => {\n//     const interval = setInterval(() => {\n//       setWTimer((prevTimer) => prevTimer - 1);\n//     }, 1000);\n\n//     // Clear the interval and handle time-up logic when timer reaches 0\n//     if (timer <= 0) {\n//       clearInterval(interval);\n//       // Handle time-up logic here (e.g., navigate to a different component)\n//     }\n\n//     // Clean up the interval on component unmount or when navigating away\n//     return () => {\n//       clearInterval(interval);\n//     };\n//   }, [timer]);\n\n//   const WformatTime = (seconds) => {\n//     const hours = Math.floor(seconds / 3600);\n//     const minutes = Math.floor((seconds % 3600) / 60);\n//     const remainingSeconds = seconds % 60;\n//     return `${hours > 9 ? hours : '0' + hours}:${minutes > 9 ? minutes : '0' + minutes}:${remainingSeconds > 9 ? remainingSeconds : '0' + remainingSeconds}`;\n//   };\n\n\n\n\n\n\n\n\n  const [answeredQuestions, setAnsweredQuestions] = useState([]);\n\n  const handleButtonClick = (questionNumber) => {\n    onQuestionSelect(questionNumber);\n    setAnsweredQuestions([...answeredQuestions, questionNumber]);\n  };\n\n  const buttons = [\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\n    22, 23, 24, 25, 26, 27, 28, 29, 30,\n  ];\n  const renderList = buttons.map((item, index) => {\n    let className = \"quesAns-btn\";\n    if (questionStatus && questionStatus[index] === \"answered\") {\n      className += \"answered\";\n    }\n    return (\n      <div>\n        <button className={className} onClick={() => handleButtonClick(item)}>\n          {item}\n        </button>\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"main\">\n      <div className=\"sub-main\">\n        <div>\n          <PaperHeader />\n        </div>\n        <div className=\"quiz-container\">\n          <div>\n            <div className=\"subjects\">\n              <button className=\"subject-btn\">Mathematics</button>\n              <button className=\"subject-btn\">Physics</button>\n              <button className=\"subject-btn\">Chemistry</button>\n            </div>\n            <div className=\"second-header\">\n              <div className=\"single-select-question\">\n                Single Select Question\n              </div>\n              <div className=\"right-header\">\n                <div className=\"marks\">\n                  Marks: <div className=\"plus-mark\">+1</div>\n                  <div className=\"minus-mark\">-1</div>\n                </div>\n                <div>Timer: {formatTime(timer)}</div>\n              </div>\n            </div>\n            <div className=\"question-no\">\n              <span className=\"active-question-no\">\n                Question No. {addLeadingZero(currentQuestionIndex + 1)}\n              </span>\n              <span className=\"total-question\">\n                {\" \"}\n                of {addLeadingZero(Qimages.length)}\n              </span>\n            </div>\n\n            <div className=\"options-container\">\n              <h2 className=\"question\">\n                {Qimages && Qimages.length > 0 && Qimages[activeQuestion] ? (\n                  <div>\n                    <img\n                      src={`data:image/png;base64,${Qimages[activeQuestion].image_data}`}\n                      alt={`QImage ${activeQuestion + 1}`}\n                    />\n                    <ul className=\"options-container\">\n                      {OPTimages.slice(\n                        activeQuestion * 4,\n                        activeQuestion * 4 + 4\n                      ).map((optImage, optIndex) => (\n                        <li key={optIndex}>\n                          <input\n                            type=\"radio\"\n                            name=\"index\"\n                            checked={\n                              selectedAnswers[activeQuestion] ===\n                              String.fromCharCode(65 + optIndex)\n                            }\n                            onChange={() =>\n                              onAnswerSelected(\n                                String.fromCharCode(65 + optIndex)\n                              )\n                            }\n                          />\n                          <label className=\"alpha-index\">\n                            <img\n                              src={`data:image/png;base64,${optImage.image_data}`}\n                              alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n                            />\n                          </label>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                ) : (\n                  <div className=\"loading-gif\">\n                    <DotSpinner size={90} speed={0.9} color=\"black\" />\n                  </div>\n                )}\n              </h2>\n            </div>\n\n            <div className=\"flex-right\"></div>\n          </div>\n        </div>\n\n        <div className=\"flex-right\">\n          <button className=\"clear-btn\">Mark for Review & Next</button>\n          <button className=\"clear-btn\" onClick={clearResponse}>\n            Clear Response\n          </button>\n          <button\n            className=\"previous-btn\"\n            onClick={goToPreviousQuestion}\n            disabled={activeQuestion === 0}\n          >\n            <i className=\"fa-solid fa-angles-left\"></i> Previous\n          </button>\n          <button\n            className=\"save-btn\"\n            onClick={onClickNext}\n            disabled={!selectedAnswers[activeQuestion]}\n          >\n            {activeQuestion === Qimages.length - 1 ? \"Submit\" : \"Save & Next\"}\n            <i className=\"fa-solid fa-angles-right\"></i>\n          </button>\n        </div>\n      </div>\n      <div className=\"rightsidebar\">\n        <RightSidebar   />\n       \n      </div>\n    </div>\n  );\n};\n\nexport default Paper;\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE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"},"metadata":{},"sourceType":"module","externalDependencies":[]}