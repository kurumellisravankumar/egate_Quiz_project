{"ast":null,"code":"var _jsxFileName = \"D:\\\\web projects files\\\\Current_egate_Quiz_project\\\\src\\\\Pages\\\\Paper\\\\Paper.jsx\",\n  _s = $RefreshSig$();\n// test commit\n\n// import React, { useEffect, useState } from 'react';\n// import quiz from '../../Data/quesAns'\n// import './Paper.css'\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader'\n\n// // Defining Timer code\n// const formatTime = (time) => {\n//     let minutes = Math.floor(time / 60);\n//     let seconds = Math.floor(time - minutes * 60);\n\n//     if (minutes < 10) minutes = '0' + minutes;\n//     if (seconds < 10) seconds = '0' + seconds;\n//     return minutes + ':' + seconds;\n// }; // End of Defining Timer code\n\n// const Paper = ({ seconds, answeredQuestions }) => {\n\n//     const [activeQuestion, setActiveQuestion] = useState(0);\n//     const handleQuestionSelect = (questionNumber) => {\n//         setActiveQuestion(questionNumber - 1);\n//     }\n\n//     // const [questionStatus, setQuestionStatus] = useState(Array(30).fill('notAnswered'))\n//     // const [activeQuestion, setActiveQuestion] = useState(0)\n//     // const [selectedAnswer, setSelectedAnswer] = useState('')\n\n//     const [selectedAnswers, setSelectedAnswers] = useState(new Array(quiz.questions.length).fill(''));\n//     const [showResult, setShowResult] = useState(false)\n//     const [result, setResult] = useState({\n//         score: 0,\n//         correctAnswers: 0,\n//         wrongAnswers: 0,\n//     })\n\n//     const { questions } = quiz\n//     const { question, choices, correctAnswer } = questions[activeQuestion]\n//     const onClickNext = () => {\n//         setResult((prev) =>\n//             selectedAnswers[activeQuestion] === correctAnswer\n//                 ? {\n//                     ...prev,\n//                     score: prev.score + 5,\n//                     correctAnswers: prev.correctAnswers + 1,\n//                 }\n//                 : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\n//         );\n//         if (activeQuestion !== questions.length - 1) {\n//             setActiveQuestion((prev) => prev + 1);\n//         } else {\n//             // setActiveQuestion(0);\n//             setShowResult(true);\n//             calculateResult();//new added code\n//         }\n//     };\n\n//     const onAnswerSelected = (OptionLetter) => {\n//         // Update the selected answer for the current question\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//         setSelectedAnswers(updatedSelectedAnswers);\n//         // setSelectedAnswers(updatedSelectedAnswers, OptionLetter);\n\n//     };\n\n//     const clearResponse = () => {\n//         // Clear the response for the current question\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = '';\n//         setSelectedAnswers(updatedSelectedAnswers);\n//     };\n\n//     const goToPreviousQuestion = () => {\n//         // Move to the previous question\n//         if (activeQuestion > 0) {\n//             setActiveQuestion((prev) => prev - 1);\n//         }\n//     };\n\n//     const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n//     const [countdown, setCountDown] = useState(seconds);\n//     useEffect(() => {\n//         const timerId = setInterval(() => {\n//             setCountDown((prevCountDown) =>\n//                 prevCountDown - 1\n//             );\n//         }, 1000)\n//         return () => {\n//             clearInterval(timerId);\n//         };\n//     }, [])\n\n//     useEffect(() => {\n//         if (countdown <= 0) {\n//             setShowResult(true);\n//             // clearInterval(timerId.current);\n//             // alert(\"End\");\n//         }\n//     }, [countdown]);\n\n//    // NEW ADDED CODE\n\n//     // const [showResult, setShowResult] = useState(false);\n//     const [accuracy, setAccuracy] = useState(0);\n//     const [averageScore, setAverageScore] = useState(0);\n//     const [topScore, setTopScore] = useState(0);\n//     const [liveRank, setLiveRank] = useState(0);\n\n//     const calculateResult = () => {\n//         // Calculate accuracy\n//         const totalAttempted = answeredQuestions.length;\n//         const totalCorrect = result.correctAnswers;\n//         const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\n//         setAccuracy(calculatedAccuracy.toFixed(2));\n\n//         // Calculate average score\n//         const calculatedAverageScore = result.score / totalAttempted;\n//         setAverageScore(calculatedAverageScore.toFixed(2));\n\n//         // Placeholder for live ranking data - Replace this with actual data\n//         const calculatedTopScore = 100;\n//         const calculatedLiveRank = 1;\n\n//         setTopScore(calculatedTopScore);\n//         setLiveRank(calculatedLiveRank);\n//     };\n\n//     // const onClickSubmit = () => {\n//     //     calculateResult();\n//     //     setShowResult(true);\n//     // };\n\n//     return (\n\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     {!showResult ? (\n//                         <div>\n//                             <div className='subjects'>\n//                                 <button className='subject-btn'>Mathematics</button>\n//                                 <button className='subject-btn'>Physics</button>\n//                                 <button className='subject-btn'>Chemistry</button>\n//                             </div>\n//                             <div className='second-header'>\n//                                 <div className='single-select-question'>\n//                                     Single Select Question\n//                                 </div>\n//                                 <div className='right-header'>\n//                                     <div className='marks'>\n//                                         Marks: <div className='plus-mark'>+1</div>\n//                                         <div className='minus-mark'>-1</div>\n//                                     </div>\n//                                     <div className='timer'>\n//                                         <h3>Time Left: {formatTime(countdown)}</h3>\n//                                     </div>\n//                                 </div>\n//                             </div>\n//                             <div className='question-no'>\n//                                 <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\n//                                 <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\n//                             </div>\n\n//                             <h2 className='question'><img src={question} alt=\"question\" /></h2>\n\n//                             <ul className='options-container'>\n//                                 {choices.map((answer, index) => (\n//                                     <li key={answer}>\n//                                         <input type=\"radio\"\n//                                             // id={answer}\n//                                             id={`option-${index}`}\n//                                             name='answer'\n//                                             value={answer}\n//                                             checked={selectedAnswers[activeQuestion] === answer}\n//                                             onChange={() => onAnswerSelected(answer)} />\n\n//                                         <label className='alpha-index' htmlFor={`option-${index}`}>\n//                                             {/* htmlFor={answer} */}\n//                                             {String.fromCharCode(65 + index)}.\n//                                             <img src={answer} alt=\"answer\" />\n//                                         </label>\n//                                     </li>\n//                                 ))}\n//                             </ul>\n\n//                             <div className=\"flex-right\">\n//                                 <button className='clear-btn'>Mark for Review & Next</button>\n//                                 <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\n//                                 <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                                     <i class=\"fa-solid fa-angles-left\"></i>\n//                                     Previous\n//                                 </button>\n//                                 <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                                     {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\n//                                 </button>\n\n//                             </div>\n//                         </div>\n//                     ) : (\n//                         <div className=\"result\">\n//                             <h3>Result</h3>\n//                             <p>\n//                                 Total Questions: <span>{questions.length}</span>\n//                             </p>\n//                             <p>\n//                                 Total Score:<span> {result.score}</span>\n//                             </p>\n//                             <p>\n//                                 Correct Answers:<span> {result.correctAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Wrong Answers:<span> {result.wrongAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Accuracy:<span> {accuracy}%</span>\n//                             </p>\n//                             <p>\n//                                 Average Score:<span> {averageScore}</span>\n//                             </p>\n//                             <p>\n//                                 Top Score:<span> {topScore}</span>\n//                             </p>\n//                             <p>\n//                                 Live Rank:<span> {liveRank}</span>\n//                             </p>\n//                         </div>\n//                     )}\n//                 </div>\n//             </div>\n//             <div className='rightsidebar'><RightSidebar onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} /></div>\n//         </div>\n\n//     )\n// }\n\n// export default Paper\n\n// import React, { useEffect, useState } from 'react';\n// // import quiz from '../../Data/quesAns'\n// import './Paper.css'\n// // import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader'\n\n// // Defining Timer code\n// // const formatTime = (time) => {\n// //     let minutes = Math.floor(time / 60);\n// //     let seconds = Math.floor(time - minutes * 60);\n\n// //     if (minutes < 10) minutes = '0' + minutes;\n// //     if (seconds < 10) seconds = '0' + seconds;\n// //     return minutes + ':' + seconds;\n// // }; // End of Defining Timer code\n\n// const Paper = () => {\n\n//     // const [activeQuestion, setActiveQuestion] = useState(0);\n//     // const handleQuestionSelect = (questionNumber) => {\n//     //     setActiveQuestion(questionNumber - 1);\n//     // }\n\n//     // const [questionStatus, setQuestionStatus] = useState(Array(30).fill('notAnswered'))\n//     // const [activeQuestion, setActiveQuestion] = useState(0)\n//     // const [selectedAnswer, setSelectedAnswer] = useState('')\n\n//     // const [selectedAnswers, setSelectedAnswers] = useState(new Array(quiz.questions.length).fill(''));\n//     // const [showResult, setShowResult] = useState(false)\n//     // const [result, setResult] = useState({\n//     //     score: 0,\n//     //     correctAnswers: 0,\n//     //     wrongAnswers: 0,\n//     // })\n\n//     // const { questions } = quiz\n//     // const { Qimages, OPTimages, correctAnswer } = [activeQuestion]\n//     // const onClickNext = () => {\n//     //     setResult((prev) =>\n//     //         selectedAnswers[activeQuestion] === correctAnswer\n//     //             ? {\n//     //                 ...prev,\n//     //                 score: prev.score + 5,\n//     //                 correctAnswers: prev.correctAnswers + 1,\n//     //             }\n//     //             : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\n//     //     );\n//     //     if (activeQuestion !== questions.length - 1) {\n//     //         setActiveQuestion((prev) => prev + 1);\n//     //     } else {\n//     //         // setActiveQuestion(0);\n//     //         setShowResult(true);\n//     //         calculateResult();//new added code\n//     //     }\n//     // };\n\n//     // const onAnswerSelected = (OptionLetter) => {\n//     //     // Update the selected answer for the current question\n//     //     const updatedSelectedAnswers = [...selectedAnswers];\n//     //     updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//     //     setSelectedAnswers(updatedSelectedAnswers);\n//     //     // setSelectedAnswers(updatedSelectedAnswers, OptionLetter);\n\n//     // };\n\n//     // const clearResponse = () => {\n//     //     // Clear the response for the current question\n//     //     const updatedSelectedAnswers = [...selectedAnswers];\n//     //     updatedSelectedAnswers[activeQuestion] = '';\n//     //     setSelectedAnswers(updatedSelectedAnswers);\n//     // };\n\n//     // const goToPreviousQuestion = () => {\n//     //     // Move to the previous question\n//     //     if (activeQuestion > 0) {\n//     //         setActiveQuestion((prev) => prev - 1);\n//     //     }\n//     // };\n\n//     // const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n//     // const [countdown, setCountDown] = useState(seconds);\n//     // useEffect(() => {\n//     //     const timerId = setInterval(() => {\n//     //         setCountDown((prevCountDown) =>\n//     //             prevCountDown - 1\n//     //         );\n//     //     }, 1000)\n//     //     return () => {\n//     //         clearInterval(timerId);\n//     //     };\n//     // }, [])\n\n//     // useEffect(() => {\n//     //     if (countdown <= 0) {\n//     //         setShowResult(true);\n//     //         // clearInterval(timerId.current);\n//     //         // alert(\"End\");\n//     //     }\n//     // }, [countdown]);\n\n//     // NEW ADDED CODE\n\n//     // const [showResult, setShowResult] = useState(false);\n//     // const [accuracy, setAccuracy] = useState(0);\n//     // const [averageScore, setAverageScore] = useState(0);\n//     // const [topScore, setTopScore] = useState(0);\n//     // const [liveRank, setLiveRank] = useState(0);\n\n//     // const calculateResult = () => {\n//     //     // Calculate accuracy\n//     //     const totalAttempted = answeredQuestions.length;\n//     //     const totalCorrect = result.correctAnswers;\n//     //     const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\n//     //     setAccuracy(calculatedAccuracy.toFixed(2));\n\n//     //     // Calculate average score\n//     //     const calculatedAverageScore = result.score / totalAttempted;\n//     //     setAverageScore(calculatedAverageScore.toFixed(2));\n\n//     //     // Placeholder for live ranking data - Replace this with actual data\n//     //     const calculatedTopScore = 100;\n//     //     const calculatedLiveRank = 1;\n\n//     //     setTopScore(calculatedTopScore);\n//     //     setLiveRank(calculatedLiveRank);\n//     // };\n\n//     // const onClickSubmit = () => {\n//     //     calculateResult();\n//     //     setShowResult(true);\n//     // };\n\n//     const [Qimages,setQImages] = useState([]);\n//     const [OPTimages,setOPTImages] = useState([]);\n\n//     useEffect(() => {\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//         const fetchQImages = async () => {\n//             let fetchedQImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     const response = await fetch(`http://localhost:7000/images/${i}`);\n//                     const data = await response.json();\n//                     if (data.length > 0) {\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching Qimages:', error);\n//                 }\n//             }\n\n//             setQImages(fetchedQImages);\n//         };\n\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//         const fetchOPTImages = async () => {\n//             let fetchedOPTImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     for (let j = i + 1; j <= i + 4; j++) {\n//                         const response = await fetch(`http://localhost:7000/images/${j}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                         }\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching OPTimages:', error);\n//                 }\n//             }\n\n//             setOPTImages(fetchedOPTImages);\n//         };\n\n//         fetchQImages();\n//         fetchOPTImages();\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     return (\n\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     {/* {!showResult ? ( */}\n//                         <div>\n//                             <div className='subjects'>\n//                                 <button className='subject-btn'>Mathematics</button>\n//                                 <button className='subject-btn'>Physics</button>\n//                                 <button className='subject-btn'>Chemistry</button>\n//                             </div>\n//                             <div className='second-header'>\n//                                 <div className='single-select-question'>\n//                                     Single Select Question\n//                                 </div>\n//                                 {/* <div className='right-header'>\n//                                     <div className='marks'>\n//                                         Marks: <div className='plus-mark'>+1</div>\n//                                         <div className='minus-mark'>-1</div>\n//                                     </div>\n//                                     <div className='timer'>\n//                                         <h3>Time Left: {formatTime(countdown)}</h3>\n//                                     </div>\n//                                 </div> */}\n//                             </div>\n//                             {/* <div className='question-no'>\n//                                 <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\n//                                 <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\n//                             </div> */}\n\n//                             {Qimages.map((qImage, index) => (\n//                                 <div key={index}>\n//                                     {/* <h2>QImage {index + 1}</h2> */}\n//                                     {/* <div className='question-no'>\n//                                         <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\n//                                         <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\n//                                     </div> */}\n//                                     <h2 className='question'> <img\n//                                         src={`data:image/png;base64,${qImage.image_data}`}\n//                                         alt={`QImage ${index + 1}`}\n//                                     /></h2>\n\n//                                     <ul className='options-container'>\n//                                         {OPTimages.slice(index * 4, index * 4 + 4).map((optImage, optIndex) => (\n//                                             <li>\n//                                                 <input type=\"radio\"\n//                                                 // // id={answer}\n//                                                 //     id={`option-${index}`}\n//                                                 //     name='answer'\n//                                                 //     value={optImage}\n//                                                 //     checked={selectedAnswers[activeQuestion] === optImage}\n//                                                 //     onChange={() => onAnswerSelected(optImage)}\n//                                                 />\n\n//                                                 <label className='alpha-index' >\n//                                                     <img\n//                                                         key={optIndex}\n//                                                         src={`data:image/png;base64,${optImage.image_data}`}\n//                                                         alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                                     />\n//                                                 </label>\n//                                             </li>\n//                                         ))}\n//                                     </ul>\n//                                 </div>\n//                             ))}\n\n//                             {/* <div className=\"flex-right\">\n//                                 <button className='clear-btn'>Mark for Review & Next</button>\n//                                 <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\n//                                 <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                                     <i class=\"fa-solid fa-angles-left\"></i>\n//                                     Previous\n//                                 </button>\n//                                 <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                                     {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\n//                                 </button>\n\n//                             </div> */}\n//                         </div>\n//                     {/* ) : ( */}\n//                         {/* <div className=\"result\"> */}\n//                             {/* <h3>Result</h3>\n//                             <p>\n//                                 Total Questions: <span>{questions.length}</span>\n//                             </p>\n//                             <p>\n//                                 Total Score:<span> {result.score}</span>\n//                             </p>\n//                             <p>\n//                                 Correct Answers:<span> {result.correctAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Wrong Answers:<span> {result.wrongAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Accuracy:<span> {accuracy}%</span>\n//                             </p>\n//                             <p>\n//                                 Average Score:<span> {averageScore}</span>\n//                             </p>\n//                             <p>\n//                                 Top Score:<span> {topScore}</span>\n//                             </p>\n//                             <p>\n//                                 Live Rank:<span> {liveRank}</span>\n//                             </p> */}\n//                         {/* </div> */}\n//                     {/* )} */}\n//                 </div>\n//             </div>\n//             {/* <div className='rightsidebar'><RightSidebar onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} /></div> */}\n//         </div>\n\n//     )\n// }\n\n// export default Paper\n\n// import React, { useEffect, useState } from 'react';\n// import './Paper.css';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\n\n// const Paper = () => {\n//     const [Qimages, setQImages] = useState([]);\n//     const [OPTimages, setOPTImages] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n//         useEffect(() => {\n//             // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//             const fetchQImages = async () => {\n//                 let fetchedQImages = [];\n\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                     try {\n//                         const response = await fetch(`http://localhost:7000/images/${i}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedQImages.push(data[0]); // Add only the first image from each set\n//                         }\n//                     } catch (error) {\n//                         console.error('Error fetching Qimages:', error);\n//                     }\n//                 }\n\n//                 setQImages(fetchedQImages);\n//             };\n\n//             // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//             const fetchOPTImages = async () => {\n//                 let fetchedOPTImages = [];\n\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                     try {\n//                         for (let j = i + 1; j <= i + 4; j++) {\n//                             const response = await fetch(`http://localhost:7000/images/${j}`);\n//                             const data = await response.json();\n//                             if (data.length > 0) {\n//                                 fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                             }\n//                         }\n//                     } catch (error) {\n//                         console.error('Error fetching OPTimages:', error);\n//                     }\n//                 }\n\n//                 setOPTImages(fetchedOPTImages);\n//             };\n\n//             fetchQImages();\n//             fetchOPTImages();\n//         }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     const handleNextClick = () => {\n//         // Move to the next question when the \"Next\" button is clicked\n//         setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n//     };\n\n//     return (\n//         <div className='main'>\n//             {/* ... */}\n//             <div><PaperHeader /></div>\n//             <div className='options-container'>\n//                 {/* Display only the current question and its options */}\n//                 <h2 className='question'>\n//                     <img\n//                         src={`data:image/png;base64,${Qimages[currentQuestionIndex].image_data}`}\n//                         alt={`QImage ${currentQuestionIndex + 1}`}\n//                     />\n//                 </h2>\n//                 <ul className='options-container'>\n//                     {OPTimages\n//                         .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                         .map((optImage, optIndex) => (\n//                             <li key={optIndex}>\n//                                 <input type=\"radio\" />\n//                                 <label className='alpha-index'>\n//                                     <img\n//                                         src={`data:image/png;base64,${optImage.image_data}`}\n//                                         alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                     />\n//                                 </label>\n//                             </li>\n//                         ))}\n//                 </ul>\n//                 <button onClick={handleNextClick}>Next</button>\n//             </div>\n//             {/* ... */}\n//         </div>\n//     );\n// };\n\n// export default Paper;\n\n// import React, { useEffect, useState } from 'react';\n// import './Paper.css';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\n// // import { Waveform } from '@uiball/loaders'\n\n// const Paper = () => {\n\n//     const [Qimages, setQImages] = useState([]);\n//     const [OPTimages, setOPTImages] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n//     useEffect(() => {\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//         const fetchQImages = async () => {\n//             let fetchedQImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     const response = await fetch(`http://localhost:7001/images/${i}`);\n//                     const data = await response.json();\n//                     if (data.length > 0) {\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching Qimages:', error);\n//                 }\n//             }\n\n//             setQImages(fetchedQImages);\n//         };\n\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//         const fetchOPTImages = async () => {\n//             let fetchedOPTImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     for (let j = i + 1; j <= i + 4; j++) {\n//                         const response = await fetch(`http://localhost:7001/images/${j}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                         }\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching OPTimages:', error);\n//                 }\n//             }\n\n//             setOPTImages(fetchedOPTImages);\n//         };\n\n//         fetchQImages();\n//         fetchOPTImages();\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     const handleNextClick = () => {\n//         // Move to the next question when the \"Next\" button is clicked\n//         setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n//     };\n\n//     // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\n//     const currentQuestion = Qimages[currentQuestionIndex];\n//     const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\n\n//     return (\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     <div className='options-container'>\n//                         <h2 className='question'>\n//                             {currentQuestion ? (\n//                                 <img\n//                                     src={questionImageSrc}\n//                                     alt={`QImage ${currentQuestionIndex + 1}`}\n//                                 />\n//                             ) : (\n//                                 <p>Loading question...</p>\n\n//                             // <Waveform\n//                             //     size={40}\n//                             //     lineWeight={3.5}\n//                             //     speed={1}\n//                             //     color=\"black\"\n//                             // />\n//                             )}\n//                         </h2>\n//                         <ul className='options-container'>\n//                             {/* ... (options rendering logic) */}\n//                             {OPTimages\n//                                 .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                                 .map((optImage, optIndex) => (\n\n//                                     <li key={optIndex}>\n//                                         <input type=\"radio\" />\n//                                         <label className='alpha-index'>\n//                                             <img\n//                                                 src={`data:image/png;base64,${optImage.image_data}`}\n//                                                 alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                             />\n//                                         </label>\n//                                     </li>\n//                                 ))}\n//                         </ul>\n//                         <button onClick={handleNextClick}>Next</button>\n//                     </div>\n\n//                 </div>\n//             </div>\n\n//             {/* ... */}\n//         </div>\n//     );\n// };\n\n// export default Paper;\n\n// import React, { useEffect, useState } from 'react';\n// import './Paper.css';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\n\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import { DotSpinner } from '@uiball/loaders'\n\n// const Paper = () => {\n\n//     const [Qimages, setQImages] = useState([]);\n//     const [OPTimages, setOPTImages] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n//     useEffect(() => {\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//         const fetchQImages = async () => {\n//             let fetchedQImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     const response = await fetch(`http://localhost:7002/images/${i}`);\n//                     const data = await response.json();\n//                     if (data.length > 0) {\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching Qimages:', error);\n//                 }\n//             }\n\n//             setQImages(fetchedQImages);\n//         };\n\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//         const fetchOPTImages = async () => {\n//             let fetchedOPTImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     for (let j = i + 1; j <= i + 4; j++) {\n//                         const response = await fetch(`http://localhost:7002/images/${j}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                         }\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching OPTimages:', error);\n//                 }\n//             }\n\n//             setOPTImages(fetchedOPTImages);\n//         };\n\n//         fetchQImages();\n//         fetchOPTImages();\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     // const handleNextClick = () => {\n//     //     // Move to the next question when the \"Next\" button is clicked\n//     //     setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n\n//     // };\n\n//     // const handlepreClick=()=>{\n//     //     setCurrentQuestionIndex(prevIndex => prevIndex - 1);\n//     //     // setTimer(timer)\n\n//     // }\n\n// // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\n// const currentQuestion = Qimages[currentQuestionIndex];\n// const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\n\n// const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n\n//     return (\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     <div>\n//                         <div className='subjects'>\n//                             <button className='subject-btn'>Mathematics</button>\n//                             <button className='subject-btn'>Physics</button>\n//                             <button className='subject-btn'>Chemistry</button>\n\n//                         </div>\n//                         <div className='second-header'>\n//                             <div className='single-select-question'>\n//                                 Single Select Question\n//                             </div>\n//                             <div className='right-header'>\n//                                 <div className='marks'>\n//                                     Marks: <div className='plus-mark'>+1</div>\n//                                     <div className='minus-mark'>-1</div>\n//                                 </div>\n//                                 {/* <div className='timer'>\n//                                     <h3>Time Left: {formatTime(countdown)}</h3>\n//                                 </div> */}\n//                             </div>\n//                         </div>\n//                         <div className='question-no'>\n//                             <span className=\"active-question-no\">Question No. {addLeadingZero(currentQuestionIndex + 1)}</span>\n//                             <span className=\"total-question\"> of {addLeadingZero(Qimages.length)}</span>\n//                         </div>\n\n//                         <div className='options-container'>\n\n//                             <h2 className='question'>\n//                                 {currentQuestion ? (\n//                                  <div>\n//                                         <img\n//                                             src={questionImageSrc}\n//                                             alt={`QImage ${currentQuestionIndex + 1}`}\n//                                         />\n//                                         <ul className='options-container'>\n//                                             {/* ... (options rendering logic) */}\n//                                             {OPTimages\n//                                                 .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                                                 .map((optImage, optIndex) => (\n\n//                                                     <li key={optImage}>\n//                                                         <input\n//                                                         name='index'\n//                                                             type=\"radio\"\n//                                                           />\n//                                                         <label className='alpha-index'>\n//                                                             <img\n//                                                                 src={`data:image/png;base64,${optImage.image_data}`}\n//                                                                 alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                                             />\n//                                                         </label>\n//                                                     </li>\n//                                                 ))}\n//                                         </ul>\n//                                  </div>\n//                                 ) : (\n//                                     // <p>Loading question...</p>\n\n//                                  <div className='loading-gif'>\n//                                             <DotSpinner\n//                                                 size={90}\n//                                                 speed={0.9}\n//                                                 color=\"black\"\n\n//                                             />\n//                                  </div>\n//                                 )}\n\n//                             </h2>\n//                             {/* <ul className='options-container'>\n//                                 ... (options rendering logic)\n//                                 {OPTimages\n//                                     .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                                     .map((optImage, optIndex) => (\n\n//                                         <li key={optIndex}>\n//                                             <input type=\"radio\" />\n//                                             <label className='alpha-index'>\n//                                                 <img\n//                                                     src={`data:image/png;base64,${optImage.image_data}`}\n//                                                     alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                                 />\n//                                             </label>\n//                                         </li>\n//                                     ))}\n//                             </ul> */}\n//                             {/* <button onClick={handleNextClick}>Next</button> */}\n//                         </div>\n//                         {/* a */}\n\n//                         <div className=\"flex-right\">\n//                             {/* <button className='clear-btn'>Mark for Review & Next</button>\n//                             <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\n//                             <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                                 <i class=\"fa-solid fa-angles-left\"></i>\n//                                 Previous\n//                             </button>\n//                             <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                                 {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\n//                             </button> */}\n// {/*\n//                             <button onClick={handlepreClick}>Previous</button>\n\n//                             <button onClick={handleNextClick}>Save&Next</button> */}\n\n//                         </div>\n//                     </div>\n\n//                 </div>\n//             </div>\n\n//             <div className='rightsidebar'><RightSidebar /></div>\n//             {/* onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} */}\n\n//         </div>\n//     );\n// };\n\n// export default Paper;\n\n// import React, { useEffect, useState } from 'react';\n// import './Paper.css';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import { DotSpinner } from '@uiball/loaders';\n\n// const Paper = () => {\n//     const [Qimages, setQImages] = useState([]);\n//     const [OPTimages, setOPTImages] = useState([]);\n//     const [activeQuestion, setActiveQuestion] = useState(0);\n//     const [selectedAnswers, setSelectedAnswers] = useState(Array(Qimages.length).fill(''));\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//     const [showResult, setShowResult] = useState(false);\n//     const [result, setResult] = useState({\n//         score: 0,\n//         correctAnswers: 0,\n//         wrongAnswers: 0,\n//     });\n//     const [timers, setTimers] = useState(new Array(Qimages.length).fill(0));\n//     const [timer, setTimer] = useState(0);\n\n//     useEffect(() => {\n//             // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//             const fetchQImages = async () => {\n//                 let fetchedQImages = [];\n\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                     try {\n//                         const response = await fetch(`http://localhost:7002/images/${i}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedQImages.push(data[0]); // Add only the first image from each set\n//                         }\n//                     } catch (error) {\n//                         console.error('Error fetching Qimages:', error);\n//                     }\n//                 }\n\n//                 setQImages(fetchedQImages);\n//             };\n\n//             // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//             const fetchOPTImages = async () => {\n//                 let fetchedOPTImages = [];\n\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                     try {\n//                         for (let j = i + 1; j <= i + 4; j++) {\n//                             const response = await fetch(`http://localhost:7002/images/${j}`);\n//                             const data = await response.json();\n//                             if (data.length > 0) {\n//                                 fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                             }\n//                         }\n//                     } catch (error) {\n//                         console.error('Error fetching OPTimages:', error);\n//                     }\n//                 }\n\n//                 setOPTImages(fetchedOPTImages);\n//             };\n\n//             fetchQImages();\n//             fetchOPTImages();\n//         }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     const onAnswerSelected = (OptionLetter) => {\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//         setSelectedAnswers(updatedSelectedAnswers);\n//     };\n\n//     const clearResponse = () => {\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = '';\n//         setSelectedAnswers(updatedSelectedAnswers);\n//     };\n\n//     const goToPreviousQuestion = () => {\n//         setCurrentQuestionIndex(prevIndex => {\n\n//             // Save the current timer value for the question\n\n//             const updatedTimers = [...timers];\n\n//             updatedTimers[prevIndex] = timer;\n\n//             setTimers(updatedTimers);\n\n//             // Move to the previous question\n\n//             return prevIndex - 1;\n\n//         });\n//         if (activeQuestion > 0) {\n//             setActiveQuestion(activeQuestion - 1);\n//         }\n//     };\n\n//     const onClickNext = () => {\n//         setCurrentQuestionIndex(prevIndex => {\n\n//             // Save the current timer value for the question\n\n//             const updatedTimers = [...timers];\n\n//             updatedTimers[prevIndex] = timer;\n\n//             setTimers(updatedTimers);\n\n//             // Move to the next question\n\n//             return prevIndex + 1;\n\n//         });\n//         const correctAnswer = Qimages[activeQuestion].correct_answer; // Replace 'correct_answer' with the actual property name\n//         const selectedAnswer = selectedAnswers[activeQuestion];\n\n//         if (selectedAnswer === correctAnswer) {\n//             setResult(prevResult => ({\n//                 ...prevResult,\n//                 score: prevResult.score + 5,\n//                 correctAnswers: prevResult.correctAnswers + 1\n//             }));\n//         } else {\n//             setResult(prevResult => ({\n//                 ...prevResult,\n//                 wrongAnswers: prevResult.wrongAnswers + 1\n//             }));\n//         }\n\n//         if (activeQuestion < Qimages.length - 1) {\n//             setActiveQuestion(prevActiveQuestion => prevActiveQuestion + 1);\n//         } else {\n//             setShowResult(true);\n//             calculateResult(); // Implement this function for additional result calculations\n//         }\n//     };\n\n//     const formatTime = (seconds) => {\n\n//         const hours = Math.floor(seconds / 3600);\n\n//         const minutes = Math.floor((seconds % 3600) / 60);\n\n//         const remainingSeconds = seconds % 60;\n\n//         return `${hours > 9 ? hours : '0' + hours}:${minutes > 9 ? minutes : '0' + minutes}:${remainingSeconds > 9 ? remainingSeconds : '0' + remainingSeconds}`;\n\n//     };\n\n//     // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\n//     const currentQuestion = Qimages[currentQuestionIndex];\n//     const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\n//     const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n\n//     const calculateResult = () => {\n//         // Implement additional result calculations here if needed\n//         // Example: Accuracy, Average Score, Top Score, Live Rank, etc.\n//     };\n\n//     return (\n//         <div className='main'>\n\n//             <div className='sub-main'>\n\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     <div>\n//                         <div className='subjects'>\n//                             <button className='subject-btn'>Mathematics</button>\n//                             <button className='subject-btn'>Physics</button>\n//                             <button className='subject-btn'>Chemistry</button>\n\n//                         </div>\n//                         <div className='second-header'>\n//                             <div className='single-select-question'>\n//                                 Single Select Question\n//                             </div>\n//                             <div className='right-header'>\n//                                 <div className='marks'>\n//                                     Marks: <div className='plus-mark'>+1</div>\n//                                     <div className='minus-mark'>-1</div>\n//                                 </div>\n//                                 <div>Timer: {formatTime(timer)}</div>\n//                             </div>\n//                         </div>\n//                         <div className='question-no'>\n//                             <span className=\"active-question-no\">Question No. {addLeadingZero(currentQuestionIndex + 1)}</span>\n//                             <span className=\"total-question\"> of {addLeadingZero(Qimages.length)}</span>\n//                         </div>\n\n//                         <div className='options-container'>\n\n//                             <h2 className='question'>\n//                                 {Qimages && Qimages.length > 0 && Qimages[activeQuestion] ? (\n\n//                                     <div>\n//                                         <img src={`data:image/png;base64,${Qimages[activeQuestion].image_data}`} alt={`QImage ${activeQuestion + 1}`} />\n//                                         <ul className='options-container'>\n//                                             {OPTimages.slice(activeQuestion * 4, activeQuestion * 4 + 4).map((optImage, optIndex) => (\n//                                                 <li key={optIndex}>\n//                                                     <input\n//                                                         type='radio'\n//                                                         name='index'\n//                                                         checked={selectedAnswers[activeQuestion] === String.fromCharCode(65 + optIndex)}\n//                                                         onChange={() => onAnswerSelected(String.fromCharCode(65 + optIndex))}\n//                                                     />\n//                                                     <label className='alpha-index'>\n//                                                         <img\n//                                                             src={`data:image/png;base64,${optImage.image_data}`}\n//                                                             alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                                         />\n//                                                     </label>\n//                                                 </li>\n//                                             ))}\n//                                         </ul>\n//                                     </div>\n\n//                                 ) : (\n\n//                                     <div className='loading-gif'>\n//                                         <DotSpinner\n//                                             size={90}\n//                                             speed={0.9}\n//                                             color=\"black\"\n//                                         />\n//                                     </div>\n//                                 )}\n//                             </h2>\n\n//                         </div>\n\n//                         <div className=\"flex-right\">\n\n//                         </div>\n//                     </div>\n\n//                 </div>\n\n//                 <div className='flex-right'>\n//                     <button className='clear-btn'>Mark for Review & Next</button>\n//                     <button className='clear-btn' onClick={clearResponse}>\n//                         Clear Response\n//                     </button>\n//                     <button className='previous-btn'  onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                         <i className='fa-solid fa-angles-left'></i> Previous\n//                     </button>\n//                     <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                         {activeQuestion === Qimages.length - 1 ? 'Submit' : 'Save & Next'}\n//                         <i className='fa-solid fa-angles-right'></i>\n//                     </button>\n//                 </div>\n//             </div>\n//             <div className='rightsidebar'>\n//                 <RightSidebar />\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Paper;\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport \"./Paper.css\";\nimport PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\nimport RightSidebar from \"../../Components/RightSidebar/RightSidebar\";\n// import \"../../Components/RightSidebar/RightSidebar.css\";\nimport { DotSpinner } from \"@uiball/loaders\";\nimport { Link } from \"react-router-dom\";\nimport QuizHome from '../QuizHome/QuizHome';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Paper = ({\n  answeredQuestions\n}) => {\n  _s();\n  const [Qimages, setQImages] = useState([]);\n  const [questionStatus, setQuestionStatus] = useState([\"notAnswered\", ...Array(29).fill(\"notVisited\")]);\n  const [answeredCount, setAnsweredCount] = useState(0);\n  const [notAnsweredCount, setNotAnsweredCount] = useState(0);\n  const [answeredmarkedForReviewCount, setAnsweredmarkedForReviewCount] = useState(0);\n  const [markedForReviewCount, setMarkedForReviewCount] = useState(0);\n  const [VisitedCount, setVisitedCount] = useState(0);\n  const updateCounters = () => {\n    let answered = 0;\n    let notAnswered = 0;\n    let marked = 0;\n    let markedForReview = 0;\n    let Visited = 0;\n    questionStatus.forEach(status => {\n      if (status === \"answered\") {\n        answered++;\n      } else if (status === \"notAnswered\") {\n        notAnswered++;\n      } else if (status === \"marked\") {\n        marked++;\n      } else if (status === \"Answered but marked for review\") {\n        markedForReview++;\n      } else if (status === \"notVisited\") {\n        Visited++;\n      }\n    });\n    setAnsweredCount(answered);\n    setNotAnsweredCount(notAnswered);\n    setAnsweredmarkedForReviewCount(marked);\n    setMarkedForReviewCount(markedForReview);\n    setVisitedCount(Visited);\n  };\n\n  // const [Qimages, setQImages] = useState([]);\n  const [OPTimages, setOPTImages] = useState([]);\n  const [activeQuestion, setActiveQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState(Array(Qimages.length).fill(\"\"));\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [showResult, setShowResult] = useState(false);\n  const [result, setResult] = useState({\n    score: 0,\n    correctAnswers: 0,\n    wrongAnswers: 0\n  });\n  useEffect(() => {\n    // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n    const fetchQImages = async () => {\n      let fetchedQImages = [];\n      for (let i = 1; i <= 1000; i += 6) {\n        // Assuming there are 100 sets of images\n        try {\n          const response = await fetch(`http://localhost:4009/images/${i}`);\n          const data = await response.json();\n          if (data.length > 0) {\n            fetchedQImages.push(data[0]); // Add only the first image from each set\n          }\n        } catch (error) {\n          console.error(\"Error fetching Qimages:\", error);\n        }\n      }\n      setQImages(fetchedQImages);\n    };\n\n    // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n    const fetchOPTImages = async () => {\n      let fetchedOPTImages = [];\n      for (let i = 1; i <= 1000; i += 6) {\n        // Assuming there are 100 sets of images\n        try {\n          for (let j = i + 1; j <= i + 4; j++) {\n            const response = await fetch(`http://localhost:4009/images/${j}`);\n            const data = await response.json();\n            if (data.length > 0) {\n              fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n            }\n          }\n        } catch (error) {\n          console.error(\"Error fetching OPTimages:\", error);\n        }\n      }\n      setOPTImages(fetchedOPTImages);\n    };\n    fetchQImages();\n    fetchOPTImages();\n    updateCounters();\n  }, [questionStatus]); // Empty dependency array to fetch data only once when the component mounts\n\n  const [timers, setTimers] = useState(new Array(Qimages.length).fill(0));\n  const [timer, setTimer] = useState(0);\n  const onAnswerSelected = OptionLetter => {\n    const updatedSelectedAnswers = [...selectedAnswers];\n    updatedSelectedAnswers[activeQuestion] = OptionLetter;\n    setSelectedAnswers(updatedSelectedAnswers);\n    const updatedQuestionStatus = [...questionStatus];\n    updatedQuestionStatus[activeQuestion] = \"answered\";\n    setQuestionStatus(updatedQuestionStatus);\n  };\n  const clearResponse = () => {\n    const updatedSelectedAnswers = [...selectedAnswers];\n    updatedSelectedAnswers[activeQuestion] = \"\";\n    setSelectedAnswers(updatedSelectedAnswers);\n  };\n  const goToPreviousQuestion = () => {\n    setCurrentQuestionIndex(prevIndex => {\n      // Save the current timer value for the question\n\n      const updatedTimers = [...timers];\n      updatedTimers[prevIndex] = timer;\n      setTimers(updatedTimers);\n\n      // Move to the previous question\n\n      return prevIndex - 1;\n    });\n    if (activeQuestion > 0) {\n      setActiveQuestion(activeQuestion - 1);\n    }\n  };\n  const [accuracy, setAccuracy] = useState(0);\n  const [averageScore, setAverageScore] = useState(0);\n  const [topScore, setTopScore] = useState(0);\n  const [liveRank, setLiveRank] = useState(0);\n\n  // const calculateResult = () => {\n  //     // Calculate accuracy\n  //     const totalAttempted = answeredQuestions.length;\n  //     const totalCorrect = result.correctAnswers;\n  //     const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\n  //     setAccuracy(calculatedAccuracy.toFixed(2));\n\n  //     // Calculate average score\n  //     const calculatedAverageScore = result.score / totalAttempted;\n  //     setAverageScore(calculatedAverageScore.toFixed(2));\n\n  //     // Placeholder for live ranking data - Replace this with actual data\n  //     const calculatedTopScore = 100;\n  //     const calculatedLiveRank = 1;\n\n  //     setTopScore(calculatedTopScore);\n  //     setLiveRank(calculatedLiveRank);\n  // };\n\n  const calculateResult = () => {\n    // Make sure answeredQuestions is defined before accessing its length\n    const totalAttempted = answeredQuestions ? answeredQuestions.length : 0;\n    const totalCorrect = result.correctAnswers;\n    const calculatedAccuracy = totalAttempted > 0 ? totalCorrect / totalAttempted * 100 : 0;\n    setAccuracy(calculatedAccuracy.toFixed(2));\n    const calculatedAverageScore = totalAttempted > 0 ? result.score / totalAttempted : 0;\n    setAverageScore(calculatedAverageScore.toFixed(2));\n\n    // Placeholder for live ranking data - Replace this with actual data\n    const calculatedTopScore = 100;\n    const calculatedLiveRank = 1;\n    setTopScore(calculatedTopScore);\n    setLiveRank(calculatedLiveRank);\n  };\n  const onClickNext = () => {\n    //starting result page code\n\n    const correctAnswer = Qimages[activeQuestion].correct_answer;\n    setResult(prev => selectedAnswers[activeQuestion] === correctAnswer ? {\n      ...prev,\n      score: prev.score + 5,\n      correctAnswers: prev.correctAnswers + 1\n    } : {\n      ...prev,\n      wrongAnswers: prev.wrongAnswers + 1\n    });\n    if (activeQuestion !== Qimages.length - 1) {\n      setActiveQuestion(prev => prev + 1);\n    } else {\n      // setActiveQuestion(0);\n      setShowResult(true);\n      calculateResult(); //new added code\n    }\n    //end result page code\n\n    setCurrentQuestionIndex(prevIndex => {\n      // Save the current timer value for the question\n\n      const updatedTimers = [...timers];\n      updatedTimers[prevIndex] = timer;\n      setTimers(updatedTimers);\n      return prevIndex + 1;\n    });\n    const updatedQuestionStatus = [...questionStatus];\n    // updatedQuestionStatus[activeQuestion] = \"notAnswered\";\n\n    // Set status of the next question (if any) to \"notAnswered\"\n    if (activeQuestion < Qimages.length - 1) {\n      updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n    } else if (!selectedAnswers[activeQuestion] === \"answered\") {\n      updatedQuestionStatus[activeQuestion] = \"notAnswered\";\n    } else if (!markForReview() === true) {\n      markForReview();\n    } else if (selectedAnswers[activeQuestion]) {\n      updatedQuestionStatus[activeQuestion] = \"answered\";\n    } else if (!markForReview() === false) {\n      markForReview();\n    }\n    setQuestionStatus(updatedQuestionStatus);\n\n    // const correctAnswer = Qimages[activeQuestion].correct_answer; // Replace 'correct_answer' with the actual property name\n    const selectedAnswer = selectedAnswers[activeQuestion];\n    if (selectedAnswer === correctAnswer) {\n      setResult(prevResult => ({\n        ...prevResult,\n        score: prevResult.score + 5,\n        correctAnswers: prevResult.correctAnswers + 1\n      }));\n    } else {\n      setResult(prevResult => ({\n        ...prevResult,\n        wrongAnswers: prevResult.wrongAnswers + 1\n      }));\n    }\n    if (activeQuestion < Qimages.length - 1) {\n      setActiveQuestion(prevActiveQuestion => prevActiveQuestion + 1);\n    } else {\n      setShowResult(true);\n      calculateResult();\n    }\n  };\n  const markForReview = () => {\n    // Update questionStatus for the marked question\n    const updatedQuestionStatus = [...questionStatus];\n    if (selectedAnswers[activeQuestion]) {\n      updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n      // if(selectedAnswers[activeQuestion] === \"Answered but marked for review\"){\n      //   updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n      // }\n    } else if (!selectedAnswers[activeQuestion]) {\n      updatedQuestionStatus[activeQuestion] = \"marked\";\n    }\n    setQuestionStatus(updatedQuestionStatus);\n  };\n\n  // const formatTime = (seconds) => {\n  //   const hours = Math.floor(seconds / 3600);\n\n  //   const minutes = Math.floor((seconds % 3600) / 60);\n\n  //   const remainingSeconds = seconds % 60;\n\n  //   return `${hours > 9 ? hours : \"0\" + hours}:${\n  //     minutes > 9 ? minutes : \"0\" + minutes\n  //   }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n  // };\n\n  // useEffect(() => {\n  //   // Set the timer to the saved value for the current question\n\n  //   setTimer(timers[currentQuestionIndex] || 0);\n\n  //   let interval;\n\n  //   interval = setInterval(() => {\n  //     setTimer((prevTimer) => prevTimer + 1);\n  //   }, 1000);\n\n  //   // Clear the interval when the component unmounts or when the user moves to the next question\n\n  //   return () => {\n  //     clearInterval(interval);\n  //   };\n  // }, [currentQuestionIndex, timers]);\n\n  // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\n  const currentQuestion = Qimages[currentQuestionIndex];\n  const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : \"\";\n  const addLeadingZero = number => number > 9 ? number : `0${number}`;\n\n  // const calculateResult = () => {\n  //   // Implement additional result calculations here if needed\n  //   // Example: Accuracy, Average Score, Top Score, Live Rank, etc.\n  // };\n\n  // Timer for whole page\n\n  //   const totalTime = 180 * 60; // 180 minutes in seconds\n  //   const [wtimer, setWTimer] = useState(totalTime);\n\n  //   useEffect(() => {\n  //     const interval = setInterval(() => {\n  //       setWTimer((prevTimer) => prevTimer - 1);\n  //     }, 1000);\n\n  //     // Clear the interval and handle time-up logic when timer reaches 0\n  //     if (timer <= 0) {\n  //       clearInterval(interval);\n  //       // Handle time-up logic here (e.g., navigate to a different component)\n  //     }\n\n  //     // Clean up the interval on component unmount or when navigating away\n  //     return () => {\n  //       clearInterval(interval);\n  //     };\n  //   }, [timer]);\n\n  //   const WformatTime = (seconds) => {\n  //     const hours = Math.floor(seconds / 3600);\n  //     const minutes = Math.floor((seconds % 3600) / 60);\n  //     const remainingSeconds = seconds % 60;\n  //     return `${hours > 9 ? hours : '0' + hours}:${minutes > 9 ? minutes : '0' + minutes}:${remainingSeconds > 9 ? remainingSeconds : '0' + remainingSeconds}`;\n  //   };\n\n  // const [answeredQuestions, setAnsweredQuestions] = useState([]);\n\n  // const handleButtonClick = (questionNumber) => {\n  //   onQuestionSelect(questionNumber);\n  //   setAnsweredQuestions([...answeredQuestions, questionNumber]);\n  // };\n\n  // const buttons = [\n  //   1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\n  //   22, 23, 24, 25, 26, 27, 28, 29, 30,\n  // ];\n  // const renderList = buttons.map((item, index) => {\n  //   let className = \"quesAns-btn\";\n  //   if (questionStatus && questionStatus[index] === \"answered\") {\n  //     className += \"answered\";\n  //   }\n  //   return (\n  //     <div>\n  //       <button className={className} onClick={() => handleButtonClick(item)}>\n  //         {item}\n  //       </button>\n  //     </div>\n  //   );\n  // });\n\n  const [opensubject_1, setOpensubject_1] = useState(true);\n  const [opensubject_2, setOpensubject_2] = useState(false);\n  const [opensubject_3, setOpensubject_3] = useState(false);\n  const openAlertSubject1 = () => {\n    setOpensubject_1(true);\n    setOpensubject_2(false);\n    setOpensubject_3(false);\n  };\n  const openAlertSubject2 = () => {\n    setOpensubject_2(true);\n    setOpensubject_1(false);\n    setOpensubject_3(false);\n  };\n  const openAlertSubject3 = () => {\n    setOpensubject_3(true);\n    setOpensubject_2(false);\n    setOpensubject_1(false);\n  };\n  const handleQuestionSelect = questionNumber => {\n    setCurrentQuestionIndex(questionNumber - 1);\n    setActiveQuestion(questionNumber - 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !showResult ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sub-main\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(PaperHeader, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1632,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1631,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"quiz-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"subjects\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"subject-btn\",\n                onClick: openAlertSubject1,\n                children: \"Mathematics\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1638,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"subject-btn\",\n                onClick: openAlertSubject2,\n                children: \"Physics\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1641,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"subject-btn\",\n                onClick: openAlertSubject3,\n                children: \"Chemistry\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1644,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1637,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"second-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"single-select-question\",\n                children: \"Single Select Question\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1649,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"right-header\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"marks\",\n                  children: [\"Marks: \", /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"plus-mark\",\n                    children: \"+1\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1654,\n                    columnNumber: 30\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"minus-mark\",\n                    children: \"-1\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1655,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1653,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1652,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1648,\n              columnNumber: 17\n            }, this), opensubject_1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"Subject-Container\",\n              children: [\"Mathematics\", /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"question-no\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"active-question-no\",\n                  children: [\"Question No. \", addLeadingZero(currentQuestionIndex + 1)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1674,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"total-question\",\n                  children: [\" \", \"of \", addLeadingZero(Qimages.length)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1677,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1673,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"question\",\n                children: Qimages && Qimages.length > 0 && Qimages[activeQuestion] ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                    src: `data:image/png;base64,${Qimages[activeQuestion].image_data}`,\n                    alt: `QImage ${activeQuestion + 1}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1687,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                    className: \"options-container\",\n                    children: OPTimages.slice(activeQuestion * 4, activeQuestion * 4 + 4).map((optImage, optIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                        type: \"radio\",\n                        name: \"index\",\n                        checked: selectedAnswers[activeQuestion] === String.fromCharCode(65 + optIndex),\n                        onChange: () => onAnswerSelected(String.fromCharCode(65 + optIndex))\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1697,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                        className: \"alpha-index\",\n                        children: /*#__PURE__*/_jsxDEV(\"img\", {\n                          src: `data:image/png;base64,${optImage.image_data}`,\n                          alt: `OPTImage ${optIndex + 2}-${optIndex + 5}`\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1711,\n                          columnNumber: 35\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1710,\n                        columnNumber: 33\n                      }, this)]\n                    }, optIndex, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1696,\n                      columnNumber: 31\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1691,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1686,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"loading-gif\",\n                  children: /*#__PURE__*/_jsxDEV(DotSpinner, {\n                    size: 90,\n                    speed: 0.9,\n                    color: \"black\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1724,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1723,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1682,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1671,\n              columnNumber: 19\n            }, this) : null, opensubject_2 ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"Subject-Container\",\n              children: [\"Physics\", /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"question-no\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"active-question-no\",\n                  children: [\"Question No. \", addLeadingZero(currentQuestionIndex + 1)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1735,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"total-question\",\n                  children: [\" \", \"of \", addLeadingZero(Qimages.length)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1738,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1734,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"question\",\n                children: Qimages && Qimages.length > 0 && Qimages[activeQuestion] ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                    src: `data:image/png;base64,${Qimages[activeQuestion].image_data}`,\n                    alt: `QImage ${activeQuestion + 1}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1748,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                    className: \"options-container\",\n                    children: OPTimages.slice(activeQuestion * 4, activeQuestion * 4 + 4).map((optImage, optIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                        type: \"radio\",\n                        name: \"index\",\n                        checked: selectedAnswers[activeQuestion] === String.fromCharCode(65 + optIndex),\n                        onChange: () => onAnswerSelected(String.fromCharCode(65 + optIndex))\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1758,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                        className: \"alpha-index\",\n                        children: /*#__PURE__*/_jsxDEV(\"img\", {\n                          src: `data:image/png;base64,${optImage.image_data}`,\n                          alt: `OPTImage ${optIndex + 2}-${optIndex + 5}`\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1772,\n                          columnNumber: 35\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1771,\n                        columnNumber: 33\n                      }, this)]\n                    }, optIndex, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1757,\n                      columnNumber: 31\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1752,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1747,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"loading-gif\",\n                  children: /*#__PURE__*/_jsxDEV(DotSpinner, {\n                    size: 90,\n                    speed: 0.9,\n                    color: \"black\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1785,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1784,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1743,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1732,\n              columnNumber: 19\n            }, this) : null, opensubject_3 ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"Subject-Container\",\n              children: [\"Chemistry\", /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"question-no\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"active-question-no\",\n                  children: [\"Question No. \", addLeadingZero(currentQuestionIndex + 1)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1796,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"total-question\",\n                  children: [\" \", \"of \", addLeadingZero(Qimages.length)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1799,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1795,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"question\",\n                children: Qimages && Qimages.length > 0 && Qimages[activeQuestion] ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                    src: `data:image/png;base64,${Qimages[activeQuestion].image_data}`,\n                    alt: `QImage ${activeQuestion + 1}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1809,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                    className: \"options-container\",\n                    children: OPTimages.slice(activeQuestion * 4, activeQuestion * 4 + 4).map((optImage, optIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                        type: \"radio\",\n                        name: \"index\",\n                        checked: selectedAnswers[activeQuestion] === String.fromCharCode(65 + optIndex),\n                        onChange: () => onAnswerSelected(String.fromCharCode(65 + optIndex))\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1819,\n                        columnNumber: 33\n                      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                        className: \"alpha-index\",\n                        children: /*#__PURE__*/_jsxDEV(\"img\", {\n                          src: `data:image/png;base64,${optImage.image_data}`,\n                          alt: `OPTImage ${optIndex + 2}-${optIndex + 5}`\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1833,\n                          columnNumber: 35\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1832,\n                        columnNumber: 33\n                      }, this)]\n                    }, optIndex, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1818,\n                      columnNumber: 31\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1813,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1808,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"loading-gif\",\n                  children: /*#__PURE__*/_jsxDEV(DotSpinner, {\n                    size: 90,\n                    speed: 0.9,\n                    color: \"black\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1846,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1845,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1804,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1793,\n              columnNumber: 19\n            }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex-right\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"clear-btn\",\n                onClick: markForReview,\n                children: \"Mark for Review & Next\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1854,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"clear-btn\",\n                onClick: clearResponse,\n                children: \"Clear Response\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1857,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"previous-btn\",\n                onClick: goToPreviousQuestion,\n                disabled: activeQuestion === 0,\n                children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"fa-solid fa-angles-left\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1865,\n                  columnNumber: 21\n                }, this), \" Previous\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1860,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"save-btn\",\n                onClick: onClickNext\n                // disabled={!selectedAnswers[activeQuestion]}\n                ,\n                children: [activeQuestion === Qimages.length - 1 ? \"Submit\" : \"Save & Next\", /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"fa-solid fa-angles-right\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1875,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1867,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1853,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1636,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1634,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1630,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rightsidebar\",\n        children: /*#__PURE__*/_jsxDEV(RightSidebar, {\n          onQuestionSelect: handleQuestionSelect,\n          questionStatus: questionStatus,\n          setQuestionStatus: setQuestionStatus,\n          answeredCount: answeredCount,\n          notAnsweredCount: notAnsweredCount,\n          answeredmarkedForReviewCount: answeredmarkedForReviewCount,\n          markedForReviewCount: markedForReviewCount,\n          VisitedCount: VisitedCount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1935,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1934,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1629,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        id: \"result_header\",\n        children: \"Result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1949,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"/QuizHome\",\n          element: /*#__PURE__*/_jsxDEV(QuizHome, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1950,\n            columnNumber: 46\n          }, this),\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1950,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1950,\n          columnNumber: 70\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: \"Download\",\n          children: \"Download QuestionPaper\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1950,\n          columnNumber: 76\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1950,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result_contents\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total Questions: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: Qimages.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1953,\n            columnNumber: 32\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1952,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total Score:\", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\" \", result.score]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1956,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1955,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Correct Answers:\", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\" \", result.correctAnswers]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1959,\n            columnNumber: 31\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1958,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Wrong Answers:\", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\" \", result.wrongAnswers]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1962,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1961,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Accuracy:\", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\" \", accuracy, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1965,\n            columnNumber: 24\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1964,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Average Score:\", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\" \", averageScore]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1968,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1967,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Top Score:\", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\" \", topScore]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1971,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1970,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Live Rank:\", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\" \", liveRank]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1974,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1973,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1951,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1948,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1627,\n    columnNumber: 5\n  }, this);\n};\n_s(Paper, \"7YT1ibZ/5erDoBYhWx7ESgRvW+A=\");\n_c = Paper;\nexport default Paper;\nvar _c;\n$RefreshReg$(_c, \"Paper\");","map":{"version":3,"names":["React","useEffect","useState","useRef","PaperHeader","RightSidebar","DotSpinner","Link","QuizHome","jsxDEV","_jsxDEV","Paper","answeredQuestions","_s","Qimages","setQImages","questionStatus","setQuestionStatus","Array","fill","answeredCount","setAnsweredCount","notAnsweredCount","setNotAnsweredCount","answeredmarkedForReviewCount","setAnsweredmarkedForReviewCount","markedForReviewCount","setMarkedForReviewCount","VisitedCount","setVisitedCount","updateCounters","answered","notAnswered","marked","markedForReview","Visited","forEach","status","OPTimages","setOPTImages","activeQuestion","setActiveQuestion","selectedAnswers","setSelectedAnswers","length","currentQuestionIndex","setCurrentQuestionIndex","showResult","setShowResult","result","setResult","score","correctAnswers","wrongAnswers","fetchQImages","fetchedQImages","i","response","fetch","data","json","push","error","console","fetchOPTImages","fetchedOPTImages","j","timers","setTimers","timer","setTimer","onAnswerSelected","OptionLetter","updatedSelectedAnswers","updatedQuestionStatus","clearResponse","goToPreviousQuestion","prevIndex","updatedTimers","accuracy","setAccuracy","averageScore","setAverageScore","topScore","setTopScore","liveRank","setLiveRank","calculateResult","totalAttempted","totalCorrect","calculatedAccuracy","toFixed","calculatedAverageScore","calculatedTopScore","calculatedLiveRank","onClickNext","correctAnswer","correct_answer","prev","markForReview","selectedAnswer","prevResult","prevActiveQuestion","currentQuestion","questionImageSrc","image_data","addLeadingZero","number","opensubject_1","setOpensubject_1","opensubject_2","setOpensubject_2","opensubject_3","setOpensubject_3","openAlertSubject1","openAlertSubject2","openAlertSubject3","handleQuestionSelect","questionNumber","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","slice","map","optImage","optIndex","type","name","checked","String","fromCharCode","onChange","size","speed","color","disabled","onQuestionSelect","id","to","element","_c","$RefreshReg$"],"sources":["D:/web projects files/Current_egate_Quiz_project/src/Pages/Paper/Paper.jsx"],"sourcesContent":["// test commit\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import quiz from '../../Data/quesAns'\r\n// import './Paper.css'\r\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\r\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader'\r\n\r\n// // Defining Timer code\r\n// const formatTime = (time) => {\r\n//     let minutes = Math.floor(time / 60);\r\n//     let seconds = Math.floor(time - minutes * 60);\r\n\r\n//     if (minutes < 10) minutes = '0' + minutes;\r\n//     if (seconds < 10) seconds = '0' + seconds;\r\n//     return minutes + ':' + seconds;\r\n// }; // End of Defining Timer code\r\n\r\n// const Paper = ({ seconds, answeredQuestions }) => {\r\n\r\n//     const [activeQuestion, setActiveQuestion] = useState(0);\r\n//     const handleQuestionSelect = (questionNumber) => {\r\n//         setActiveQuestion(questionNumber - 1);\r\n//     }\r\n\r\n//     // const [questionStatus, setQuestionStatus] = useState(Array(30).fill('notAnswered'))\r\n//     // const [activeQuestion, setActiveQuestion] = useState(0)\r\n//     // const [selectedAnswer, setSelectedAnswer] = useState('')\r\n\r\n//     const [selectedAnswers, setSelectedAnswers] = useState(new Array(quiz.questions.length).fill(''));\r\n//     const [showResult, setShowResult] = useState(false)\r\n//     const [result, setResult] = useState({\r\n//         score: 0,\r\n//         correctAnswers: 0,\r\n//         wrongAnswers: 0,\r\n//     })\r\n\r\n//     const { questions } = quiz\r\n//     const { question, choices, correctAnswer } = questions[activeQuestion]\r\n//     const onClickNext = () => {\r\n//         setResult((prev) =>\r\n//             selectedAnswers[activeQuestion] === correctAnswer\r\n//                 ? {\r\n//                     ...prev,\r\n//                     score: prev.score + 5,\r\n//                     correctAnswers: prev.correctAnswers + 1,\r\n//                 }\r\n//                 : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\r\n//         );\r\n//         if (activeQuestion !== questions.length - 1) {\r\n//             setActiveQuestion((prev) => prev + 1);\r\n//         } else {\r\n//             // setActiveQuestion(0);\r\n//             setShowResult(true);\r\n//             calculateResult();//new added code\r\n//         }\r\n//     };\r\n\r\n//     const onAnswerSelected = (OptionLetter) => {\r\n//         // Update the selected answer for the current question\r\n//         const updatedSelectedAnswers = [...selectedAnswers];\r\n//         updatedSelectedAnswers[activeQuestion] = OptionLetter;\r\n//         setSelectedAnswers(updatedSelectedAnswers);\r\n//         // setSelectedAnswers(updatedSelectedAnswers, OptionLetter);\r\n\r\n//     };\r\n\r\n//     const clearResponse = () => {\r\n//         // Clear the response for the current question\r\n//         const updatedSelectedAnswers = [...selectedAnswers];\r\n//         updatedSelectedAnswers[activeQuestion] = '';\r\n//         setSelectedAnswers(updatedSelectedAnswers);\r\n//     };\r\n\r\n//     const goToPreviousQuestion = () => {\r\n//         // Move to the previous question\r\n//         if (activeQuestion > 0) {\r\n//             setActiveQuestion((prev) => prev - 1);\r\n//         }\r\n//     };\r\n\r\n//     const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\r\n//     const [countdown, setCountDown] = useState(seconds);\r\n//     useEffect(() => {\r\n//         const timerId = setInterval(() => {\r\n//             setCountDown((prevCountDown) =>\r\n//                 prevCountDown - 1\r\n//             );\r\n//         }, 1000)\r\n//         return () => {\r\n//             clearInterval(timerId);\r\n//         };\r\n//     }, [])\r\n\r\n//     useEffect(() => {\r\n//         if (countdown <= 0) {\r\n//             setShowResult(true);\r\n//             // clearInterval(timerId.current);\r\n//             // alert(\"End\");\r\n//         }\r\n//     }, [countdown]);\r\n\r\n//    // NEW ADDED CODE\r\n\r\n//     // const [showResult, setShowResult] = useState(false);\r\n//     const [accuracy, setAccuracy] = useState(0);\r\n//     const [averageScore, setAverageScore] = useState(0);\r\n//     const [topScore, setTopScore] = useState(0);\r\n//     const [liveRank, setLiveRank] = useState(0);\r\n\r\n//     const calculateResult = () => {\r\n//         // Calculate accuracy\r\n//         const totalAttempted = answeredQuestions.length;\r\n//         const totalCorrect = result.correctAnswers;\r\n//         const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\r\n//         setAccuracy(calculatedAccuracy.toFixed(2));\r\n\r\n//         // Calculate average score\r\n//         const calculatedAverageScore = result.score / totalAttempted;\r\n//         setAverageScore(calculatedAverageScore.toFixed(2));\r\n\r\n//         // Placeholder for live ranking data - Replace this with actual data\r\n//         const calculatedTopScore = 100;\r\n//         const calculatedLiveRank = 1;\r\n\r\n//         setTopScore(calculatedTopScore);\r\n//         setLiveRank(calculatedLiveRank);\r\n//     };\r\n\r\n//     // const onClickSubmit = () => {\r\n//     //     calculateResult();\r\n//     //     setShowResult(true);\r\n//     // };\r\n\r\n//     return (\r\n\r\n//         <div className='main'>\r\n//             <div className='sub-main'>\r\n//                 <div><PaperHeader /></div>\r\n//                 <div className=\"quiz-container\">\r\n//                     {!showResult ? (\r\n//                         <div>\r\n//                             <div className='subjects'>\r\n//                                 <button className='subject-btn'>Mathematics</button>\r\n//                                 <button className='subject-btn'>Physics</button>\r\n//                                 <button className='subject-btn'>Chemistry</button>\r\n//                             </div>\r\n//                             <div className='second-header'>\r\n//                                 <div className='single-select-question'>\r\n//                                     Single Select Question\r\n//                                 </div>\r\n//                                 <div className='right-header'>\r\n//                                     <div className='marks'>\r\n//                                         Marks: <div className='plus-mark'>+1</div>\r\n//                                         <div className='minus-mark'>-1</div>\r\n//                                     </div>\r\n//                                     <div className='timer'>\r\n//                                         <h3>Time Left: {formatTime(countdown)}</h3>\r\n//                                     </div>\r\n//                                 </div>\r\n//                             </div>\r\n//                             <div className='question-no'>\r\n//                                 <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\r\n//                                 <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\r\n//                             </div>\r\n\r\n//                             <h2 className='question'><img src={question} alt=\"question\" /></h2>\r\n\r\n//                             <ul className='options-container'>\r\n//                                 {choices.map((answer, index) => (\r\n//                                     <li key={answer}>\r\n//                                         <input type=\"radio\"\r\n//                                             // id={answer}\r\n//                                             id={`option-${index}`}\r\n//                                             name='answer'\r\n//                                             value={answer}\r\n//                                             checked={selectedAnswers[activeQuestion] === answer}\r\n//                                             onChange={() => onAnswerSelected(answer)} />\r\n\r\n//                                         <label className='alpha-index' htmlFor={`option-${index}`}>\r\n//                                             {/* htmlFor={answer} */}\r\n//                                             {String.fromCharCode(65 + index)}.\r\n//                                             <img src={answer} alt=\"answer\" />\r\n//                                         </label>\r\n//                                     </li>\r\n//                                 ))}\r\n//                             </ul>\r\n\r\n//                             <div className=\"flex-right\">\r\n//                                 <button className='clear-btn'>Mark for Review & Next</button>\r\n//                                 <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\r\n//                                 <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\r\n//                                     <i class=\"fa-solid fa-angles-left\"></i>\r\n//                                     Previous\r\n//                                 </button>\r\n//                                 <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\r\n//                                     {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\r\n//                                 </button>\r\n\r\n//                             </div>\r\n//                         </div>\r\n//                     ) : (\r\n//                         <div className=\"result\">\r\n//                             <h3>Result</h3>\r\n//                             <p>\r\n//                                 Total Questions: <span>{questions.length}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Total Score:<span> {result.score}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Correct Answers:<span> {result.correctAnswers}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Wrong Answers:<span> {result.wrongAnswers}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Accuracy:<span> {accuracy}%</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Average Score:<span> {averageScore}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Top Score:<span> {topScore}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Live Rank:<span> {liveRank}</span>\r\n//                             </p>\r\n//                         </div>\r\n//                     )}\r\n//                 </div>\r\n//             </div>\r\n//             <div className='rightsidebar'><RightSidebar onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} /></div>\r\n//         </div>\r\n\r\n//     )\r\n// }\r\n\r\n// export default Paper\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// // import quiz from '../../Data/quesAns'\r\n// import './Paper.css'\r\n// // import RightSidebar from '../../Components/RightSidebar/RightSidebar';\r\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader'\r\n\r\n// // Defining Timer code\r\n// // const formatTime = (time) => {\r\n// //     let minutes = Math.floor(time / 60);\r\n// //     let seconds = Math.floor(time - minutes * 60);\r\n\r\n// //     if (minutes < 10) minutes = '0' + minutes;\r\n// //     if (seconds < 10) seconds = '0' + seconds;\r\n// //     return minutes + ':' + seconds;\r\n// // }; // End of Defining Timer code\r\n\r\n// const Paper = () => {\r\n\r\n//     // const [activeQuestion, setActiveQuestion] = useState(0);\r\n//     // const handleQuestionSelect = (questionNumber) => {\r\n//     //     setActiveQuestion(questionNumber - 1);\r\n//     // }\r\n\r\n//     // const [questionStatus, setQuestionStatus] = useState(Array(30).fill('notAnswered'))\r\n//     // const [activeQuestion, setActiveQuestion] = useState(0)\r\n//     // const [selectedAnswer, setSelectedAnswer] = useState('')\r\n\r\n//     // const [selectedAnswers, setSelectedAnswers] = useState(new Array(quiz.questions.length).fill(''));\r\n//     // const [showResult, setShowResult] = useState(false)\r\n//     // const [result, setResult] = useState({\r\n//     //     score: 0,\r\n//     //     correctAnswers: 0,\r\n//     //     wrongAnswers: 0,\r\n//     // })\r\n\r\n//     // const { questions } = quiz\r\n//     // const { Qimages, OPTimages, correctAnswer } = [activeQuestion]\r\n//     // const onClickNext = () => {\r\n//     //     setResult((prev) =>\r\n//     //         selectedAnswers[activeQuestion] === correctAnswer\r\n//     //             ? {\r\n//     //                 ...prev,\r\n//     //                 score: prev.score + 5,\r\n//     //                 correctAnswers: prev.correctAnswers + 1,\r\n//     //             }\r\n//     //             : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\r\n//     //     );\r\n//     //     if (activeQuestion !== questions.length - 1) {\r\n//     //         setActiveQuestion((prev) => prev + 1);\r\n//     //     } else {\r\n//     //         // setActiveQuestion(0);\r\n//     //         setShowResult(true);\r\n//     //         calculateResult();//new added code\r\n//     //     }\r\n//     // };\r\n\r\n//     // const onAnswerSelected = (OptionLetter) => {\r\n//     //     // Update the selected answer for the current question\r\n//     //     const updatedSelectedAnswers = [...selectedAnswers];\r\n//     //     updatedSelectedAnswers[activeQuestion] = OptionLetter;\r\n//     //     setSelectedAnswers(updatedSelectedAnswers);\r\n//     //     // setSelectedAnswers(updatedSelectedAnswers, OptionLetter);\r\n\r\n//     // };\r\n\r\n//     // const clearResponse = () => {\r\n//     //     // Clear the response for the current question\r\n//     //     const updatedSelectedAnswers = [...selectedAnswers];\r\n//     //     updatedSelectedAnswers[activeQuestion] = '';\r\n//     //     setSelectedAnswers(updatedSelectedAnswers);\r\n//     // };\r\n\r\n//     // const goToPreviousQuestion = () => {\r\n//     //     // Move to the previous question\r\n//     //     if (activeQuestion > 0) {\r\n//     //         setActiveQuestion((prev) => prev - 1);\r\n//     //     }\r\n//     // };\r\n\r\n//     // const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\r\n//     // const [countdown, setCountDown] = useState(seconds);\r\n//     // useEffect(() => {\r\n//     //     const timerId = setInterval(() => {\r\n//     //         setCountDown((prevCountDown) =>\r\n//     //             prevCountDown - 1\r\n//     //         );\r\n//     //     }, 1000)\r\n//     //     return () => {\r\n//     //         clearInterval(timerId);\r\n//     //     };\r\n//     // }, [])\r\n\r\n//     // useEffect(() => {\r\n//     //     if (countdown <= 0) {\r\n//     //         setShowResult(true);\r\n//     //         // clearInterval(timerId.current);\r\n//     //         // alert(\"End\");\r\n//     //     }\r\n//     // }, [countdown]);\r\n\r\n//     // NEW ADDED CODE\r\n\r\n//     // const [showResult, setShowResult] = useState(false);\r\n//     // const [accuracy, setAccuracy] = useState(0);\r\n//     // const [averageScore, setAverageScore] = useState(0);\r\n//     // const [topScore, setTopScore] = useState(0);\r\n//     // const [liveRank, setLiveRank] = useState(0);\r\n\r\n//     // const calculateResult = () => {\r\n//     //     // Calculate accuracy\r\n//     //     const totalAttempted = answeredQuestions.length;\r\n//     //     const totalCorrect = result.correctAnswers;\r\n//     //     const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\r\n//     //     setAccuracy(calculatedAccuracy.toFixed(2));\r\n\r\n//     //     // Calculate average score\r\n//     //     const calculatedAverageScore = result.score / totalAttempted;\r\n//     //     setAverageScore(calculatedAverageScore.toFixed(2));\r\n\r\n//     //     // Placeholder for live ranking data - Replace this with actual data\r\n//     //     const calculatedTopScore = 100;\r\n//     //     const calculatedLiveRank = 1;\r\n\r\n//     //     setTopScore(calculatedTopScore);\r\n//     //     setLiveRank(calculatedLiveRank);\r\n//     // };\r\n\r\n//     // const onClickSubmit = () => {\r\n//     //     calculateResult();\r\n//     //     setShowResult(true);\r\n//     // };\r\n\r\n//     const [Qimages,setQImages] = useState([]);\r\n//     const [OPTimages,setOPTImages] = useState([]);\r\n\r\n//     useEffect(() => {\r\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\r\n//         const fetchQImages = async () => {\r\n//             let fetchedQImages = [];\r\n\r\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\r\n//                 try {\r\n//                     const response = await fetch(`http://localhost:7000/images/${i}`);\r\n//                     const data = await response.json();\r\n//                     if (data.length > 0) {\r\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\r\n//                     }\r\n//                 } catch (error) {\r\n//                     console.error('Error fetching Qimages:', error);\r\n//                 }\r\n//             }\r\n\r\n//             setQImages(fetchedQImages);\r\n//         };\r\n\r\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\r\n//         const fetchOPTImages = async () => {\r\n//             let fetchedOPTImages = [];\r\n\r\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\r\n//                 try {\r\n//                     for (let j = i + 1; j <= i + 4; j++) {\r\n//                         const response = await fetch(`http://localhost:7000/images/${j}`);\r\n//                         const data = await response.json();\r\n//                         if (data.length > 0) {\r\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\r\n//                         }\r\n//                     }\r\n//                 } catch (error) {\r\n//                     console.error('Error fetching OPTimages:', error);\r\n//                 }\r\n//             }\r\n\r\n//             setOPTImages(fetchedOPTImages);\r\n//         };\r\n\r\n//         fetchQImages();\r\n//         fetchOPTImages();\r\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\r\n\r\n//     return (\r\n\r\n//         <div className='main'>\r\n//             <div className='sub-main'>\r\n//                 <div><PaperHeader /></div>\r\n//                 <div className=\"quiz-container\">\r\n//                     {/* {!showResult ? ( */}\r\n//                         <div>\r\n//                             <div className='subjects'>\r\n//                                 <button className='subject-btn'>Mathematics</button>\r\n//                                 <button className='subject-btn'>Physics</button>\r\n//                                 <button className='subject-btn'>Chemistry</button>\r\n//                             </div>\r\n//                             <div className='second-header'>\r\n//                                 <div className='single-select-question'>\r\n//                                     Single Select Question\r\n//                                 </div>\r\n//                                 {/* <div className='right-header'>\r\n//                                     <div className='marks'>\r\n//                                         Marks: <div className='plus-mark'>+1</div>\r\n//                                         <div className='minus-mark'>-1</div>\r\n//                                     </div>\r\n//                                     <div className='timer'>\r\n//                                         <h3>Time Left: {formatTime(countdown)}</h3>\r\n//                                     </div>\r\n//                                 </div> */}\r\n//                             </div>\r\n//                             {/* <div className='question-no'>\r\n//                                 <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\r\n//                                 <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\r\n//                             </div> */}\r\n\r\n//                             {Qimages.map((qImage, index) => (\r\n//                                 <div key={index}>\r\n//                                     {/* <h2>QImage {index + 1}</h2> */}\r\n//                                     {/* <div className='question-no'>\r\n//                                         <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\r\n//                                         <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\r\n//                                     </div> */}\r\n//                                     <h2 className='question'> <img\r\n//                                         src={`data:image/png;base64,${qImage.image_data}`}\r\n//                                         alt={`QImage ${index + 1}`}\r\n//                                     /></h2>\r\n\r\n//                                     <ul className='options-container'>\r\n//                                         {OPTimages.slice(index * 4, index * 4 + 4).map((optImage, optIndex) => (\r\n//                                             <li>\r\n//                                                 <input type=\"radio\"\r\n//                                                 // // id={answer}\r\n//                                                 //     id={`option-${index}`}\r\n//                                                 //     name='answer'\r\n//                                                 //     value={optImage}\r\n//                                                 //     checked={selectedAnswers[activeQuestion] === optImage}\r\n//                                                 //     onChange={() => onAnswerSelected(optImage)}\r\n//                                                 />\r\n\r\n//                                                 <label className='alpha-index' >\r\n//                                                     <img\r\n//                                                         key={optIndex}\r\n//                                                         src={`data:image/png;base64,${optImage.image_data}`}\r\n//                                                         alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\r\n//                                                     />\r\n//                                                 </label>\r\n//                                             </li>\r\n//                                         ))}\r\n//                                     </ul>\r\n//                                 </div>\r\n//                             ))}\r\n\r\n//                             {/* <div className=\"flex-right\">\r\n//                                 <button className='clear-btn'>Mark for Review & Next</button>\r\n//                                 <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\r\n//                                 <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\r\n//                                     <i class=\"fa-solid fa-angles-left\"></i>\r\n//                                     Previous\r\n//                                 </button>\r\n//                                 <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\r\n//                                     {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\r\n//                                 </button>\r\n\r\n//                             </div> */}\r\n//                         </div>\r\n//                     {/* ) : ( */}\r\n//                         {/* <div className=\"result\"> */}\r\n//                             {/* <h3>Result</h3>\r\n//                             <p>\r\n//                                 Total Questions: <span>{questions.length}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Total Score:<span> {result.score}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Correct Answers:<span> {result.correctAnswers}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Wrong Answers:<span> {result.wrongAnswers}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Accuracy:<span> {accuracy}%</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Average Score:<span> {averageScore}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Top Score:<span> {topScore}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Live Rank:<span> {liveRank}</span>\r\n//                             </p> */}\r\n//                         {/* </div> */}\r\n//                     {/* )} */}\r\n//                 </div>\r\n//             </div>\r\n//             {/* <div className='rightsidebar'><RightSidebar onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} /></div> */}\r\n//         </div>\r\n\r\n//     )\r\n// }\r\n\r\n// export default Paper\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import './Paper.css';\r\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\r\n\r\n// const Paper = () => {\r\n//     const [Qimages, setQImages] = useState([]);\r\n//     const [OPTimages, setOPTImages] = useState([]);\r\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n\r\n//         useEffect(() => {\r\n//             // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\r\n//             const fetchQImages = async () => {\r\n//                 let fetchedQImages = [];\r\n\r\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\r\n//                     try {\r\n//                         const response = await fetch(`http://localhost:7000/images/${i}`);\r\n//                         const data = await response.json();\r\n//                         if (data.length > 0) {\r\n//                             fetchedQImages.push(data[0]); // Add only the first image from each set\r\n//                         }\r\n//                     } catch (error) {\r\n//                         console.error('Error fetching Qimages:', error);\r\n//                     }\r\n//                 }\r\n\r\n//                 setQImages(fetchedQImages);\r\n//             };\r\n\r\n//             // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\r\n//             const fetchOPTImages = async () => {\r\n//                 let fetchedOPTImages = [];\r\n\r\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\r\n//                     try {\r\n//                         for (let j = i + 1; j <= i + 4; j++) {\r\n//                             const response = await fetch(`http://localhost:7000/images/${j}`);\r\n//                             const data = await response.json();\r\n//                             if (data.length > 0) {\r\n//                                 fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\r\n//                             }\r\n//                         }\r\n//                     } catch (error) {\r\n//                         console.error('Error fetching OPTimages:', error);\r\n//                     }\r\n//                 }\r\n\r\n//                 setOPTImages(fetchedOPTImages);\r\n//             };\r\n\r\n//             fetchQImages();\r\n//             fetchOPTImages();\r\n//         }, []); // Empty dependency array to fetch data only once when the component mounts\r\n\r\n//     const handleNextClick = () => {\r\n//         // Move to the next question when the \"Next\" button is clicked\r\n//         setCurrentQuestionIndex(prevIndex => prevIndex + 1);\r\n//     };\r\n\r\n//     return (\r\n//         <div className='main'>\r\n//             {/* ... */}\r\n//             <div><PaperHeader /></div>\r\n//             <div className='options-container'>\r\n//                 {/* Display only the current question and its options */}\r\n//                 <h2 className='question'>\r\n//                     <img\r\n//                         src={`data:image/png;base64,${Qimages[currentQuestionIndex].image_data}`}\r\n//                         alt={`QImage ${currentQuestionIndex + 1}`}\r\n//                     />\r\n//                 </h2>\r\n//                 <ul className='options-container'>\r\n//                     {OPTimages\r\n//                         .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\r\n//                         .map((optImage, optIndex) => (\r\n//                             <li key={optIndex}>\r\n//                                 <input type=\"radio\" />\r\n//                                 <label className='alpha-index'>\r\n//                                     <img\r\n//                                         src={`data:image/png;base64,${optImage.image_data}`}\r\n//                                         alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\r\n//                                     />\r\n//                                 </label>\r\n//                             </li>\r\n//                         ))}\r\n//                 </ul>\r\n//                 <button onClick={handleNextClick}>Next</button>\r\n//             </div>\r\n//             {/* ... */}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Paper;\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import './Paper.css';\r\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\r\n// // import { Waveform } from '@uiball/loaders'\r\n\r\n// const Paper = () => {\r\n\r\n//     const [Qimages, setQImages] = useState([]);\r\n//     const [OPTimages, setOPTImages] = useState([]);\r\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n\r\n//     useEffect(() => {\r\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\r\n//         const fetchQImages = async () => {\r\n//             let fetchedQImages = [];\r\n\r\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\r\n//                 try {\r\n//                     const response = await fetch(`http://localhost:7001/images/${i}`);\r\n//                     const data = await response.json();\r\n//                     if (data.length > 0) {\r\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\r\n//                     }\r\n//                 } catch (error) {\r\n//                     console.error('Error fetching Qimages:', error);\r\n//                 }\r\n//             }\r\n\r\n//             setQImages(fetchedQImages);\r\n//         };\r\n\r\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\r\n//         const fetchOPTImages = async () => {\r\n//             let fetchedOPTImages = [];\r\n\r\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\r\n//                 try {\r\n//                     for (let j = i + 1; j <= i + 4; j++) {\r\n//                         const response = await fetch(`http://localhost:7001/images/${j}`);\r\n//                         const data = await response.json();\r\n//                         if (data.length > 0) {\r\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\r\n//                         }\r\n//                     }\r\n//                 } catch (error) {\r\n//                     console.error('Error fetching OPTimages:', error);\r\n//                 }\r\n//             }\r\n\r\n//             setOPTImages(fetchedOPTImages);\r\n//         };\r\n\r\n//         fetchQImages();\r\n//         fetchOPTImages();\r\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\r\n\r\n//     const handleNextClick = () => {\r\n//         // Move to the next question when the \"Next\" button is clicked\r\n//         setCurrentQuestionIndex(prevIndex => prevIndex + 1);\r\n//     };\r\n\r\n//     // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\r\n//     const currentQuestion = Qimages[currentQuestionIndex];\r\n//     const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\r\n\r\n//     return (\r\n//         <div className='main'>\r\n//             <div className='sub-main'>\r\n//                 <div><PaperHeader /></div>\r\n//                 <div className=\"quiz-container\">\r\n//                     <div className='options-container'>\r\n//                         <h2 className='question'>\r\n//                             {currentQuestion ? (\r\n//                                 <img\r\n//                                     src={questionImageSrc}\r\n//                                     alt={`QImage ${currentQuestionIndex + 1}`}\r\n//                                 />\r\n//                             ) : (\r\n//                                 <p>Loading question...</p>\r\n\r\n//                             // <Waveform\r\n//                             //     size={40}\r\n//                             //     lineWeight={3.5}\r\n//                             //     speed={1}\r\n//                             //     color=\"black\"\r\n//                             // />\r\n//                             )}\r\n//                         </h2>\r\n//                         <ul className='options-container'>\r\n//                             {/* ... (options rendering logic) */}\r\n//                             {OPTimages\r\n//                                 .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\r\n//                                 .map((optImage, optIndex) => (\r\n\r\n//                                     <li key={optIndex}>\r\n//                                         <input type=\"radio\" />\r\n//                                         <label className='alpha-index'>\r\n//                                             <img\r\n//                                                 src={`data:image/png;base64,${optImage.image_data}`}\r\n//                                                 alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\r\n//                                             />\r\n//                                         </label>\r\n//                                     </li>\r\n//                                 ))}\r\n//                         </ul>\r\n//                         <button onClick={handleNextClick}>Next</button>\r\n//                     </div>\r\n\r\n//                 </div>\r\n//             </div>\r\n\r\n//             {/* ... */}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Paper;\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import './Paper.css';\r\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\r\n\r\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\r\n// import { DotSpinner } from '@uiball/loaders'\r\n\r\n// const Paper = () => {\r\n\r\n//     const [Qimages, setQImages] = useState([]);\r\n//     const [OPTimages, setOPTImages] = useState([]);\r\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n\r\n//     useEffect(() => {\r\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\r\n//         const fetchQImages = async () => {\r\n//             let fetchedQImages = [];\r\n\r\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\r\n//                 try {\r\n//                     const response = await fetch(`http://localhost:7002/images/${i}`);\r\n//                     const data = await response.json();\r\n//                     if (data.length > 0) {\r\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\r\n//                     }\r\n//                 } catch (error) {\r\n//                     console.error('Error fetching Qimages:', error);\r\n//                 }\r\n//             }\r\n\r\n//             setQImages(fetchedQImages);\r\n//         };\r\n\r\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\r\n//         const fetchOPTImages = async () => {\r\n//             let fetchedOPTImages = [];\r\n\r\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\r\n//                 try {\r\n//                     for (let j = i + 1; j <= i + 4; j++) {\r\n//                         const response = await fetch(`http://localhost:7002/images/${j}`);\r\n//                         const data = await response.json();\r\n//                         if (data.length > 0) {\r\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\r\n//                         }\r\n//                     }\r\n//                 } catch (error) {\r\n//                     console.error('Error fetching OPTimages:', error);\r\n//                 }\r\n//             }\r\n\r\n//             setOPTImages(fetchedOPTImages);\r\n//         };\r\n\r\n//         fetchQImages();\r\n//         fetchOPTImages();\r\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\r\n\r\n//     // const handleNextClick = () => {\r\n//     //     // Move to the next question when the \"Next\" button is clicked\r\n//     //     setCurrentQuestionIndex(prevIndex => prevIndex + 1);\r\n\r\n//     // };\r\n\r\n//     // const handlepreClick=()=>{\r\n//     //     setCurrentQuestionIndex(prevIndex => prevIndex - 1);\r\n//     //     // setTimer(timer)\r\n\r\n//     // }\r\n\r\n// // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\r\n// const currentQuestion = Qimages[currentQuestionIndex];\r\n// const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\r\n\r\n// const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\r\n\r\n//     return (\r\n//         <div className='main'>\r\n//             <div className='sub-main'>\r\n//                 <div><PaperHeader /></div>\r\n//                 <div className=\"quiz-container\">\r\n//                     <div>\r\n//                         <div className='subjects'>\r\n//                             <button className='subject-btn'>Mathematics</button>\r\n//                             <button className='subject-btn'>Physics</button>\r\n//                             <button className='subject-btn'>Chemistry</button>\r\n\r\n//                         </div>\r\n//                         <div className='second-header'>\r\n//                             <div className='single-select-question'>\r\n//                                 Single Select Question\r\n//                             </div>\r\n//                             <div className='right-header'>\r\n//                                 <div className='marks'>\r\n//                                     Marks: <div className='plus-mark'>+1</div>\r\n//                                     <div className='minus-mark'>-1</div>\r\n//                                 </div>\r\n//                                 {/* <div className='timer'>\r\n//                                     <h3>Time Left: {formatTime(countdown)}</h3>\r\n//                                 </div> */}\r\n//                             </div>\r\n//                         </div>\r\n//                         <div className='question-no'>\r\n//                             <span className=\"active-question-no\">Question No. {addLeadingZero(currentQuestionIndex + 1)}</span>\r\n//                             <span className=\"total-question\"> of {addLeadingZero(Qimages.length)}</span>\r\n//                         </div>\r\n\r\n//                         <div className='options-container'>\r\n\r\n//                             <h2 className='question'>\r\n//                                 {currentQuestion ? (\r\n//                                  <div>\r\n//                                         <img\r\n//                                             src={questionImageSrc}\r\n//                                             alt={`QImage ${currentQuestionIndex + 1}`}\r\n//                                         />\r\n//                                         <ul className='options-container'>\r\n//                                             {/* ... (options rendering logic) */}\r\n//                                             {OPTimages\r\n//                                                 .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\r\n//                                                 .map((optImage, optIndex) => (\r\n\r\n//                                                     <li key={optImage}>\r\n//                                                         <input\r\n//                                                         name='index'\r\n//                                                             type=\"radio\"\r\n//                                                           />\r\n//                                                         <label className='alpha-index'>\r\n//                                                             <img\r\n//                                                                 src={`data:image/png;base64,${optImage.image_data}`}\r\n//                                                                 alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\r\n//                                                             />\r\n//                                                         </label>\r\n//                                                     </li>\r\n//                                                 ))}\r\n//                                         </ul>\r\n//                                  </div>\r\n//                                 ) : (\r\n//                                     // <p>Loading question...</p>\r\n\r\n//                                  <div className='loading-gif'>\r\n//                                             <DotSpinner\r\n//                                                 size={90}\r\n//                                                 speed={0.9}\r\n//                                                 color=\"black\"\r\n\r\n//                                             />\r\n//                                  </div>\r\n//                                 )}\r\n\r\n//                             </h2>\r\n//                             {/* <ul className='options-container'>\r\n//                                 ... (options rendering logic)\r\n//                                 {OPTimages\r\n//                                     .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\r\n//                                     .map((optImage, optIndex) => (\r\n\r\n//                                         <li key={optIndex}>\r\n//                                             <input type=\"radio\" />\r\n//                                             <label className='alpha-index'>\r\n//                                                 <img\r\n//                                                     src={`data:image/png;base64,${optImage.image_data}`}\r\n//                                                     alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\r\n//                                                 />\r\n//                                             </label>\r\n//                                         </li>\r\n//                                     ))}\r\n//                             </ul> */}\r\n//                             {/* <button onClick={handleNextClick}>Next</button> */}\r\n//                         </div>\r\n//                         {/* a */}\r\n\r\n//                         <div className=\"flex-right\">\r\n//                             {/* <button className='clear-btn'>Mark for Review & Next</button>\r\n//                             <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\r\n//                             <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\r\n//                                 <i class=\"fa-solid fa-angles-left\"></i>\r\n//                                 Previous\r\n//                             </button>\r\n//                             <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\r\n//                                 {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\r\n//                             </button> */}\r\n// {/*\r\n//                             <button onClick={handlepreClick}>Previous</button>\r\n\r\n//                             <button onClick={handleNextClick}>Save&Next</button> */}\r\n\r\n//                         </div>\r\n//                     </div>\r\n\r\n//                 </div>\r\n//             </div>\r\n\r\n//             <div className='rightsidebar'><RightSidebar /></div>\r\n//             {/* onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} */}\r\n\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Paper;\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import './Paper.css';\r\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\r\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\r\n// import { DotSpinner } from '@uiball/loaders';\r\n\r\n// const Paper = () => {\r\n//     const [Qimages, setQImages] = useState([]);\r\n//     const [OPTimages, setOPTImages] = useState([]);\r\n//     const [activeQuestion, setActiveQuestion] = useState(0);\r\n//     const [selectedAnswers, setSelectedAnswers] = useState(Array(Qimages.length).fill(''));\r\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n//     const [showResult, setShowResult] = useState(false);\r\n//     const [result, setResult] = useState({\r\n//         score: 0,\r\n//         correctAnswers: 0,\r\n//         wrongAnswers: 0,\r\n//     });\r\n//     const [timers, setTimers] = useState(new Array(Qimages.length).fill(0));\r\n//     const [timer, setTimer] = useState(0);\r\n\r\n//     useEffect(() => {\r\n//             // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\r\n//             const fetchQImages = async () => {\r\n//                 let fetchedQImages = [];\r\n\r\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\r\n//                     try {\r\n//                         const response = await fetch(`http://localhost:7002/images/${i}`);\r\n//                         const data = await response.json();\r\n//                         if (data.length > 0) {\r\n//                             fetchedQImages.push(data[0]); // Add only the first image from each set\r\n//                         }\r\n//                     } catch (error) {\r\n//                         console.error('Error fetching Qimages:', error);\r\n//                     }\r\n//                 }\r\n\r\n//                 setQImages(fetchedQImages);\r\n//             };\r\n\r\n//             // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\r\n//             const fetchOPTImages = async () => {\r\n//                 let fetchedOPTImages = [];\r\n\r\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\r\n//                     try {\r\n//                         for (let j = i + 1; j <= i + 4; j++) {\r\n//                             const response = await fetch(`http://localhost:7002/images/${j}`);\r\n//                             const data = await response.json();\r\n//                             if (data.length > 0) {\r\n//                                 fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\r\n//                             }\r\n//                         }\r\n//                     } catch (error) {\r\n//                         console.error('Error fetching OPTimages:', error);\r\n//                     }\r\n//                 }\r\n\r\n//                 setOPTImages(fetchedOPTImages);\r\n//             };\r\n\r\n//             fetchQImages();\r\n//             fetchOPTImages();\r\n//         }, []); // Empty dependency array to fetch data only once when the component mounts\r\n\r\n//     const onAnswerSelected = (OptionLetter) => {\r\n//         const updatedSelectedAnswers = [...selectedAnswers];\r\n//         updatedSelectedAnswers[activeQuestion] = OptionLetter;\r\n//         setSelectedAnswers(updatedSelectedAnswers);\r\n//     };\r\n\r\n//     const clearResponse = () => {\r\n//         const updatedSelectedAnswers = [...selectedAnswers];\r\n//         updatedSelectedAnswers[activeQuestion] = '';\r\n//         setSelectedAnswers(updatedSelectedAnswers);\r\n//     };\r\n\r\n//     const goToPreviousQuestion = () => {\r\n//         setCurrentQuestionIndex(prevIndex => {\r\n\r\n//             // Save the current timer value for the question\r\n\r\n//             const updatedTimers = [...timers];\r\n\r\n//             updatedTimers[prevIndex] = timer;\r\n\r\n//             setTimers(updatedTimers);\r\n\r\n//             // Move to the previous question\r\n\r\n//             return prevIndex - 1;\r\n\r\n//         });\r\n//         if (activeQuestion > 0) {\r\n//             setActiveQuestion(activeQuestion - 1);\r\n//         }\r\n//     };\r\n\r\n//     const onClickNext = () => {\r\n//         setCurrentQuestionIndex(prevIndex => {\r\n\r\n//             // Save the current timer value for the question\r\n\r\n//             const updatedTimers = [...timers];\r\n\r\n//             updatedTimers[prevIndex] = timer;\r\n\r\n//             setTimers(updatedTimers);\r\n\r\n//             // Move to the next question\r\n\r\n//             return prevIndex + 1;\r\n\r\n//         });\r\n//         const correctAnswer = Qimages[activeQuestion].correct_answer; // Replace 'correct_answer' with the actual property name\r\n//         const selectedAnswer = selectedAnswers[activeQuestion];\r\n\r\n//         if (selectedAnswer === correctAnswer) {\r\n//             setResult(prevResult => ({\r\n//                 ...prevResult,\r\n//                 score: prevResult.score + 5,\r\n//                 correctAnswers: prevResult.correctAnswers + 1\r\n//             }));\r\n//         } else {\r\n//             setResult(prevResult => ({\r\n//                 ...prevResult,\r\n//                 wrongAnswers: prevResult.wrongAnswers + 1\r\n//             }));\r\n//         }\r\n\r\n//         if (activeQuestion < Qimages.length - 1) {\r\n//             setActiveQuestion(prevActiveQuestion => prevActiveQuestion + 1);\r\n//         } else {\r\n//             setShowResult(true);\r\n//             calculateResult(); // Implement this function for additional result calculations\r\n//         }\r\n//     };\r\n\r\n//     const formatTime = (seconds) => {\r\n\r\n//         const hours = Math.floor(seconds / 3600);\r\n\r\n//         const minutes = Math.floor((seconds % 3600) / 60);\r\n\r\n//         const remainingSeconds = seconds % 60;\r\n\r\n//         return `${hours > 9 ? hours : '0' + hours}:${minutes > 9 ? minutes : '0' + minutes}:${remainingSeconds > 9 ? remainingSeconds : '0' + remainingSeconds}`;\r\n\r\n//     };\r\n\r\n//     // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\r\n//     const currentQuestion = Qimages[currentQuestionIndex];\r\n//     const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\r\n//     const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\r\n\r\n//     const calculateResult = () => {\r\n//         // Implement additional result calculations here if needed\r\n//         // Example: Accuracy, Average Score, Top Score, Live Rank, etc.\r\n//     };\r\n\r\n//     return (\r\n//         <div className='main'>\r\n\r\n//             <div className='sub-main'>\r\n\r\n//                 <div><PaperHeader /></div>\r\n//                 <div className=\"quiz-container\">\r\n//                     <div>\r\n//                         <div className='subjects'>\r\n//                             <button className='subject-btn'>Mathematics</button>\r\n//                             <button className='subject-btn'>Physics</button>\r\n//                             <button className='subject-btn'>Chemistry</button>\r\n\r\n//                         </div>\r\n//                         <div className='second-header'>\r\n//                             <div className='single-select-question'>\r\n//                                 Single Select Question\r\n//                             </div>\r\n//                             <div className='right-header'>\r\n//                                 <div className='marks'>\r\n//                                     Marks: <div className='plus-mark'>+1</div>\r\n//                                     <div className='minus-mark'>-1</div>\r\n//                                 </div>\r\n//                                 <div>Timer: {formatTime(timer)}</div>\r\n//                             </div>\r\n//                         </div>\r\n//                         <div className='question-no'>\r\n//                             <span className=\"active-question-no\">Question No. {addLeadingZero(currentQuestionIndex + 1)}</span>\r\n//                             <span className=\"total-question\"> of {addLeadingZero(Qimages.length)}</span>\r\n//                         </div>\r\n\r\n//                         <div className='options-container'>\r\n\r\n//                             <h2 className='question'>\r\n//                                 {Qimages && Qimages.length > 0 && Qimages[activeQuestion] ? (\r\n\r\n//                                     <div>\r\n//                                         <img src={`data:image/png;base64,${Qimages[activeQuestion].image_data}`} alt={`QImage ${activeQuestion + 1}`} />\r\n//                                         <ul className='options-container'>\r\n//                                             {OPTimages.slice(activeQuestion * 4, activeQuestion * 4 + 4).map((optImage, optIndex) => (\r\n//                                                 <li key={optIndex}>\r\n//                                                     <input\r\n//                                                         type='radio'\r\n//                                                         name='index'\r\n//                                                         checked={selectedAnswers[activeQuestion] === String.fromCharCode(65 + optIndex)}\r\n//                                                         onChange={() => onAnswerSelected(String.fromCharCode(65 + optIndex))}\r\n//                                                     />\r\n//                                                     <label className='alpha-index'>\r\n//                                                         <img\r\n//                                                             src={`data:image/png;base64,${optImage.image_data}`}\r\n//                                                             alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\r\n//                                                         />\r\n//                                                     </label>\r\n//                                                 </li>\r\n//                                             ))}\r\n//                                         </ul>\r\n//                                     </div>\r\n\r\n//                                 ) : (\r\n\r\n//                                     <div className='loading-gif'>\r\n//                                         <DotSpinner\r\n//                                             size={90}\r\n//                                             speed={0.9}\r\n//                                             color=\"black\"\r\n//                                         />\r\n//                                     </div>\r\n//                                 )}\r\n//                             </h2>\r\n\r\n//                         </div>\r\n\r\n//                         <div className=\"flex-right\">\r\n\r\n//                         </div>\r\n//                     </div>\r\n\r\n//                 </div>\r\n\r\n//                 <div className='flex-right'>\r\n//                     <button className='clear-btn'>Mark for Review & Next</button>\r\n//                     <button className='clear-btn' onClick={clearResponse}>\r\n//                         Clear Response\r\n//                     </button>\r\n//                     <button className='previous-btn'  onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\r\n//                         <i className='fa-solid fa-angles-left'></i> Previous\r\n//                     </button>\r\n//                     <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\r\n//                         {activeQuestion === Qimages.length - 1 ? 'Submit' : 'Save & Next'}\r\n//                         <i className='fa-solid fa-angles-right'></i>\r\n//                     </button>\r\n//                 </div>\r\n//             </div>\r\n//             <div className='rightsidebar'>\r\n//                 <RightSidebar />\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Paper;\r\n\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport \"./Paper.css\";\r\nimport PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\r\nimport RightSidebar from \"../../Components/RightSidebar/RightSidebar\";\r\n// import \"../../Components/RightSidebar/RightSidebar.css\";\r\nimport { DotSpinner } from \"@uiball/loaders\";\r\nimport { Link } from \"react-router-dom\";\r\nimport QuizHome from '../QuizHome/QuizHome'\r\n\r\n\r\nconst Paper = ({ answeredQuestions }) => {\r\n  const [Qimages, setQImages] = useState([]);\r\n  const [questionStatus, setQuestionStatus] = useState([\r\n    \"notAnswered\",\r\n    ...Array(29).fill(\"notVisited\"),\r\n  ]);\r\n  const [answeredCount, setAnsweredCount] = useState(0);\r\n  const [notAnsweredCount, setNotAnsweredCount] = useState(0);\r\n  const [answeredmarkedForReviewCount, setAnsweredmarkedForReviewCount] =\r\n    useState(0);\r\n  const [markedForReviewCount, setMarkedForReviewCount] = useState(0);\r\n  const [VisitedCount, setVisitedCount] = useState(0);\r\n  const updateCounters = () => {\r\n    let answered = 0;\r\n    let notAnswered = 0;\r\n    let marked = 0;\r\n    let markedForReview = 0;\r\n    let Visited = 0;\r\n\r\n    questionStatus.forEach((status) => {\r\n      if (status === \"answered\") {\r\n        answered++;\r\n      } else if (status === \"notAnswered\") {\r\n        notAnswered++;\r\n      } else if (status === \"marked\") {\r\n        marked++;\r\n      } else if (status === \"Answered but marked for review\") {\r\n        markedForReview++;\r\n      } else if (status === \"notVisited\") {\r\n        Visited++;\r\n      }\r\n    });\r\n\r\n    setAnsweredCount(answered);\r\n    setNotAnsweredCount(notAnswered);\r\n    setAnsweredmarkedForReviewCount(marked);\r\n    setMarkedForReviewCount(markedForReview);\r\n    setVisitedCount(Visited);\r\n  };\r\n\r\n  // const [Qimages, setQImages] = useState([]);\r\n  const [OPTimages, setOPTImages] = useState([]);\r\n  const [activeQuestion, setActiveQuestion] = useState(0);\r\n  const [selectedAnswers, setSelectedAnswers] = useState(\r\n    Array(Qimages.length).fill(\"\")\r\n  );\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [showResult, setShowResult] = useState(false);\r\n  const [result, setResult] = useState({\r\n    score: 0,\r\n    correctAnswers: 0,\r\n    wrongAnswers: 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\r\n    const fetchQImages = async () => {\r\n      let fetchedQImages = [];\r\n\r\n      for (let i = 1; i <= 1000; i += 6) {\r\n        // Assuming there are 100 sets of images\r\n        try {\r\n          const response = await fetch(`http://localhost:4009/images/${i}`);\r\n          const data = await response.json();\r\n          if (data.length > 0) {\r\n            fetchedQImages.push(data[0]); // Add only the first image from each set\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error fetching Qimages:\", error);\r\n        }\r\n      }\r\n\r\n      setQImages(fetchedQImages);\r\n    };\r\n\r\n    // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\r\n    const fetchOPTImages = async () => {\r\n      let fetchedOPTImages = [];\r\n\r\n      for (let i = 1; i <= 1000; i += 6) {\r\n        // Assuming there are 100 sets of images\r\n        try {\r\n          for (let j = i + 1; j <= i + 4; j++) {\r\n            const response = await fetch(`http://localhost:4009/images/${j}`);\r\n            const data = await response.json();\r\n            if (data.length > 0) {\r\n              fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error fetching OPTimages:\", error);\r\n        }\r\n      }\r\n\r\n      setOPTImages(fetchedOPTImages);\r\n    };\r\n\r\n    fetchQImages();\r\n    fetchOPTImages();\r\n\r\n    updateCounters();\r\n  }, [questionStatus]); // Empty dependency array to fetch data only once when the component mounts\r\n\r\n  const [timers, setTimers] = useState(new Array(Qimages.length).fill(0));\r\n  const [timer, setTimer] = useState(0);\r\n\r\n  const onAnswerSelected = (OptionLetter) => {\r\n    const updatedSelectedAnswers = [...selectedAnswers];\r\n    updatedSelectedAnswers[activeQuestion] = OptionLetter;\r\n    setSelectedAnswers(updatedSelectedAnswers);\r\n\r\n    const updatedQuestionStatus = [...questionStatus];\r\n    updatedQuestionStatus[activeQuestion] = \"answered\";\r\n    setQuestionStatus(updatedQuestionStatus);\r\n  };\r\n\r\n  const clearResponse = () => {\r\n    const updatedSelectedAnswers = [...selectedAnswers];\r\n    updatedSelectedAnswers[activeQuestion] = \"\";\r\n    setSelectedAnswers(updatedSelectedAnswers);\r\n  };\r\n\r\n  const goToPreviousQuestion = () => {\r\n    setCurrentQuestionIndex((prevIndex) => {\r\n      // Save the current timer value for the question\r\n\r\n      const updatedTimers = [...timers];\r\n\r\n      updatedTimers[prevIndex] = timer;\r\n\r\n      setTimers(updatedTimers);\r\n\r\n      // Move to the previous question\r\n\r\n      return prevIndex - 1;\r\n    });\r\n    if (activeQuestion > 0) {\r\n      setActiveQuestion(activeQuestion - 1);\r\n    }\r\n  };\r\n\r\n  const [accuracy, setAccuracy] = useState(0);\r\n  const [averageScore, setAverageScore] = useState(0);\r\n  const [topScore, setTopScore] = useState(0);\r\n  const [liveRank, setLiveRank] = useState(0);\r\n\r\n  // const calculateResult = () => {\r\n  //     // Calculate accuracy\r\n  //     const totalAttempted = answeredQuestions.length;\r\n  //     const totalCorrect = result.correctAnswers;\r\n  //     const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\r\n  //     setAccuracy(calculatedAccuracy.toFixed(2));\r\n\r\n  //     // Calculate average score\r\n  //     const calculatedAverageScore = result.score / totalAttempted;\r\n  //     setAverageScore(calculatedAverageScore.toFixed(2));\r\n\r\n  //     // Placeholder for live ranking data - Replace this with actual data\r\n  //     const calculatedTopScore = 100;\r\n  //     const calculatedLiveRank = 1;\r\n\r\n  //     setTopScore(calculatedTopScore);\r\n  //     setLiveRank(calculatedLiveRank);\r\n  // };\r\n\r\n  const calculateResult = () => {\r\n    // Make sure answeredQuestions is defined before accessing its length\r\n    const totalAttempted = answeredQuestions ? answeredQuestions.length : 0;\r\n    const totalCorrect = result.correctAnswers;\r\n    const calculatedAccuracy =\r\n      totalAttempted > 0 ? (totalCorrect / totalAttempted) * 100 : 0;\r\n    setAccuracy(calculatedAccuracy.toFixed(2));\r\n\r\n    const calculatedAverageScore =\r\n      totalAttempted > 0 ? result.score / totalAttempted : 0;\r\n    setAverageScore(calculatedAverageScore.toFixed(2));\r\n\r\n    // Placeholder for live ranking data - Replace this with actual data\r\n    const calculatedTopScore = 100;\r\n    const calculatedLiveRank = 1;\r\n\r\n    setTopScore(calculatedTopScore);\r\n    setLiveRank(calculatedLiveRank);\r\n  };\r\n\r\n  const onClickNext = () => {\r\n    //starting result page code\r\n\r\n    const correctAnswer = Qimages[activeQuestion].correct_answer;\r\n    setResult((prev) =>\r\n      selectedAnswers[activeQuestion] === correctAnswer\r\n        ? {\r\n            ...prev,\r\n            score: prev.score + 5,\r\n            correctAnswers: prev.correctAnswers + 1,\r\n          }\r\n        : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\r\n    );\r\n    if (activeQuestion !== Qimages.length - 1) {\r\n      setActiveQuestion((prev) => prev + 1);\r\n    } else {\r\n      // setActiveQuestion(0);\r\n      setShowResult(true);\r\n      calculateResult(); //new added code\r\n    }\r\n    //end result page code\r\n\r\n    setCurrentQuestionIndex((prevIndex) => {\r\n      // Save the current timer value for the question\r\n\r\n      const updatedTimers = [...timers];\r\n\r\n      updatedTimers[prevIndex] = timer;\r\n\r\n      setTimers(updatedTimers);\r\n      return prevIndex + 1;\r\n    });\r\n\r\n    const updatedQuestionStatus = [...questionStatus];\r\n    // updatedQuestionStatus[activeQuestion] = \"notAnswered\";\r\n\r\n    // Set status of the next question (if any) to \"notAnswered\"\r\n    if (activeQuestion < Qimages.length - 1) {\r\n      updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\r\n    } else if (!selectedAnswers[activeQuestion] === \"answered\") {\r\n      updatedQuestionStatus[activeQuestion] = \"notAnswered\";\r\n    } else if (!markForReview() === true) {\r\n      markForReview();\r\n    } else if (selectedAnswers[activeQuestion]) {\r\n      updatedQuestionStatus[activeQuestion] = \"answered\";\r\n    } else if (!markForReview() === false) {\r\n      markForReview();\r\n    }\r\n\r\n    setQuestionStatus(updatedQuestionStatus);\r\n\r\n    // const correctAnswer = Qimages[activeQuestion].correct_answer; // Replace 'correct_answer' with the actual property name\r\n    const selectedAnswer = selectedAnswers[activeQuestion];\r\n\r\n    if (selectedAnswer === correctAnswer) {\r\n      setResult((prevResult) => ({\r\n        ...prevResult,\r\n        score: prevResult.score + 5,\r\n        correctAnswers: prevResult.correctAnswers + 1,\r\n      }));\r\n    } else {\r\n      setResult((prevResult) => ({\r\n        ...prevResult,\r\n        wrongAnswers: prevResult.wrongAnswers + 1,\r\n      }));\r\n    }\r\n\r\n    if (activeQuestion < Qimages.length - 1) {\r\n      setActiveQuestion((prevActiveQuestion) => prevActiveQuestion + 1);\r\n    } else {\r\n      setShowResult(true);\r\n      calculateResult();\r\n    }\r\n  };\r\n\r\n  const markForReview = () => {\r\n    // Update questionStatus for the marked question\r\n    const updatedQuestionStatus = [...questionStatus];\r\n    if (selectedAnswers[activeQuestion]) {\r\n      updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\r\n      // if(selectedAnswers[activeQuestion] === \"Answered but marked for review\"){\r\n      //   updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\r\n      // }\r\n    } else if (!selectedAnswers[activeQuestion]) {\r\n      updatedQuestionStatus[activeQuestion] = \"marked\";\r\n    }\r\n\r\n    setQuestionStatus(updatedQuestionStatus);\r\n  };\r\n\r\n  // const formatTime = (seconds) => {\r\n  //   const hours = Math.floor(seconds / 3600);\r\n\r\n  //   const minutes = Math.floor((seconds % 3600) / 60);\r\n\r\n  //   const remainingSeconds = seconds % 60;\r\n\r\n  //   return `${hours > 9 ? hours : \"0\" + hours}:${\r\n  //     minutes > 9 ? minutes : \"0\" + minutes\r\n  //   }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   // Set the timer to the saved value for the current question\r\n\r\n  //   setTimer(timers[currentQuestionIndex] || 0);\r\n\r\n  //   let interval;\r\n\r\n  //   interval = setInterval(() => {\r\n  //     setTimer((prevTimer) => prevTimer + 1);\r\n  //   }, 1000);\r\n\r\n  //   // Clear the interval when the component unmounts or when the user moves to the next question\r\n\r\n  //   return () => {\r\n  //     clearInterval(interval);\r\n  //   };\r\n  // }, [currentQuestionIndex, timers]);\r\n\r\n  // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\r\n  const currentQuestion = Qimages[currentQuestionIndex];\r\n  const questionImageSrc = currentQuestion\r\n    ? `data:image/png;base64,${currentQuestion.image_data}`\r\n    : \"\";\r\n  const addLeadingZero = (number) => (number > 9 ? number : `0${number}`);\r\n\r\n  // const calculateResult = () => {\r\n  //   // Implement additional result calculations here if needed\r\n  //   // Example: Accuracy, Average Score, Top Score, Live Rank, etc.\r\n  // };\r\n\r\n  // Timer for whole page\r\n\r\n  //   const totalTime = 180 * 60; // 180 minutes in seconds\r\n  //   const [wtimer, setWTimer] = useState(totalTime);\r\n\r\n  //   useEffect(() => {\r\n  //     const interval = setInterval(() => {\r\n  //       setWTimer((prevTimer) => prevTimer - 1);\r\n  //     }, 1000);\r\n\r\n  //     // Clear the interval and handle time-up logic when timer reaches 0\r\n  //     if (timer <= 0) {\r\n  //       clearInterval(interval);\r\n  //       // Handle time-up logic here (e.g., navigate to a different component)\r\n  //     }\r\n\r\n  //     // Clean up the interval on component unmount or when navigating away\r\n  //     return () => {\r\n  //       clearInterval(interval);\r\n  //     };\r\n  //   }, [timer]);\r\n\r\n  //   const WformatTime = (seconds) => {\r\n  //     const hours = Math.floor(seconds / 3600);\r\n  //     const minutes = Math.floor((seconds % 3600) / 60);\r\n  //     const remainingSeconds = seconds % 60;\r\n  //     return `${hours > 9 ? hours : '0' + hours}:${minutes > 9 ? minutes : '0' + minutes}:${remainingSeconds > 9 ? remainingSeconds : '0' + remainingSeconds}`;\r\n  //   };\r\n\r\n  // const [answeredQuestions, setAnsweredQuestions] = useState([]);\r\n\r\n  // const handleButtonClick = (questionNumber) => {\r\n  //   onQuestionSelect(questionNumber);\r\n  //   setAnsweredQuestions([...answeredQuestions, questionNumber]);\r\n  // };\r\n\r\n  // const buttons = [\r\n  //   1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\r\n  //   22, 23, 24, 25, 26, 27, 28, 29, 30,\r\n  // ];\r\n  // const renderList = buttons.map((item, index) => {\r\n  //   let className = \"quesAns-btn\";\r\n  //   if (questionStatus && questionStatus[index] === \"answered\") {\r\n  //     className += \"answered\";\r\n  //   }\r\n  //   return (\r\n  //     <div>\r\n  //       <button className={className} onClick={() => handleButtonClick(item)}>\r\n  //         {item}\r\n  //       </button>\r\n  //     </div>\r\n  //   );\r\n  // });\r\n\r\n  const [opensubject_1, setOpensubject_1] = useState(true);\r\n  const [opensubject_2, setOpensubject_2] = useState(false);\r\n  const [opensubject_3, setOpensubject_3] = useState(false);\r\n\r\n  const openAlertSubject1 = () => {\r\n    setOpensubject_1(true);\r\n    setOpensubject_2(false);\r\n    setOpensubject_3(false);\r\n  };\r\n  const openAlertSubject2 = () => {\r\n    setOpensubject_2(true);\r\n    setOpensubject_1(false);\r\n    setOpensubject_3(false);\r\n  };\r\n  const openAlertSubject3 = () => {\r\n    setOpensubject_3(true);\r\n    setOpensubject_2(false);\r\n    setOpensubject_1(false);\r\n  };\r\n\r\n  const handleQuestionSelect = (questionNumber) => {\r\n    setCurrentQuestionIndex(questionNumber - 1);\r\n    setActiveQuestion(questionNumber - 1);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!showResult ? (\r\n        <div className=\"main\">\r\n          <div className=\"sub-main\">\r\n            <div>\r\n              <PaperHeader />\r\n            </div>\r\n            <div className=\"quiz-container\">\r\n              {/* {!showResult ? ( */}\r\n              <div>\r\n                <div className=\"subjects\">\r\n                  <button className=\"subject-btn\" onClick={openAlertSubject1}>\r\n                    Mathematics\r\n                  </button>\r\n                  <button className=\"subject-btn\" onClick={openAlertSubject2}>\r\n                    Physics\r\n                  </button>\r\n                  <button className=\"subject-btn\" onClick={openAlertSubject3}>\r\n                    Chemistry\r\n                  </button>\r\n                </div>\r\n                <div className=\"second-header\">\r\n                  <div className=\"single-select-question\">\r\n                    Single Select Question\r\n                  </div>\r\n                  <div className=\"right-header\">\r\n                    <div className=\"marks\">\r\n                      Marks: <div className=\"plus-mark\">+1</div>\r\n                      <div className=\"minus-mark\">-1</div>\r\n                    </div>\r\n                    {/* <div>Timer: {formatTime(timer)}</div> */}\r\n                  </div>\r\n                </div>\r\n                {/* <div className=\"question-no\">\r\n               <span className=\"active-question-no\">\r\n                 Question No. {addLeadingZero(currentQuestionIndex + 1)}\r\n               </span>\r\n               <span className=\"total-question\">\r\n                 {\" \"}\r\n                 of {addLeadingZero(Qimages.length)}\r\n               </span>\r\n             </div> */}\r\n\r\n                {opensubject_1 ? (\r\n                  <div className=\"Subject-Container\">\r\n                    Mathematics\r\n                    <div className=\"question-no\">\r\n                      <span className=\"active-question-no\">\r\n                        Question No. {addLeadingZero(currentQuestionIndex + 1)}\r\n                      </span>\r\n                      <span className=\"total-question\">\r\n                        {\" \"}\r\n                        of {addLeadingZero(Qimages.length)}\r\n                      </span>\r\n                    </div>\r\n                    <h2 className=\"question\">\r\n                      {Qimages &&\r\n                      Qimages.length > 0 &&\r\n                      Qimages[activeQuestion] ? (\r\n                        <div>\r\n                          <img\r\n                            src={`data:image/png;base64,${Qimages[activeQuestion].image_data}`}\r\n                            alt={`QImage ${activeQuestion + 1}`}\r\n                          />\r\n                          <ul className=\"options-container\">\r\n                            {OPTimages.slice(\r\n                              activeQuestion * 4,\r\n                              activeQuestion * 4 + 4\r\n                            ).map((optImage, optIndex) => (\r\n                              <li key={optIndex}>\r\n                                <input\r\n                                  type=\"radio\"\r\n                                  name=\"index\"\r\n                                  checked={\r\n                                    selectedAnswers[activeQuestion] ===\r\n                                    String.fromCharCode(65 + optIndex)\r\n                                  }\r\n                                  onChange={() =>\r\n                                    onAnswerSelected(\r\n                                      String.fromCharCode(65 + optIndex)\r\n                                    )\r\n                                  }\r\n                                />\r\n                                <label className=\"alpha-index\">\r\n                                  <img\r\n                                    src={`data:image/png;base64,${optImage.image_data}`}\r\n                                    alt={`OPTImage ${optIndex + 2}-${\r\n                                      optIndex + 5\r\n                                    }`}\r\n                                  />\r\n                                </label>\r\n                              </li>\r\n                            ))}\r\n                          </ul>\r\n                        </div>\r\n                      ) : (\r\n                        <div className=\"loading-gif\">\r\n                          <DotSpinner size={90} speed={0.9} color=\"black\" />\r\n                        </div>\r\n                      )}\r\n                    </h2>\r\n                  </div>\r\n                ) : null}\r\n\r\n                {opensubject_2 ? (\r\n                  <div className=\"Subject-Container\">\r\n                    Physics\r\n                    <div className=\"question-no\">\r\n                      <span className=\"active-question-no\">\r\n                        Question No. {addLeadingZero(currentQuestionIndex + 1)}\r\n                      </span>\r\n                      <span className=\"total-question\">\r\n                        {\" \"}\r\n                        of {addLeadingZero(Qimages.length)}\r\n                      </span>\r\n                    </div>\r\n                    <h2 className=\"question\">\r\n                      {Qimages &&\r\n                      Qimages.length > 0 &&\r\n                      Qimages[activeQuestion] ? (\r\n                        <div>\r\n                          <img\r\n                            src={`data:image/png;base64,${Qimages[activeQuestion].image_data}`}\r\n                            alt={`QImage ${activeQuestion + 1}`}\r\n                          />\r\n                          <ul className=\"options-container\">\r\n                            {OPTimages.slice(\r\n                              activeQuestion * 4,\r\n                              activeQuestion * 4 + 4\r\n                            ).map((optImage, optIndex) => (\r\n                              <li key={optIndex}>\r\n                                <input\r\n                                  type=\"radio\"\r\n                                  name=\"index\"\r\n                                  checked={\r\n                                    selectedAnswers[activeQuestion] ===\r\n                                    String.fromCharCode(65 + optIndex)\r\n                                  }\r\n                                  onChange={() =>\r\n                                    onAnswerSelected(\r\n                                      String.fromCharCode(65 + optIndex)\r\n                                    )\r\n                                  }\r\n                                />\r\n                                <label className=\"alpha-index\">\r\n                                  <img\r\n                                    src={`data:image/png;base64,${optImage.image_data}`}\r\n                                    alt={`OPTImage ${optIndex + 2}-${\r\n                                      optIndex + 5\r\n                                    }`}\r\n                                  />\r\n                                </label>\r\n                              </li>\r\n                            ))}\r\n                          </ul>\r\n                        </div>\r\n                      ) : (\r\n                        <div className=\"loading-gif\">\r\n                          <DotSpinner size={90} speed={0.9} color=\"black\" />\r\n                        </div>\r\n                      )}\r\n                    </h2>\r\n                  </div>\r\n                ) : null}\r\n\r\n                {opensubject_3 ? (\r\n                  <div className=\"Subject-Container\">\r\n                    Chemistry\r\n                    <div className=\"question-no\">\r\n                      <span className=\"active-question-no\">\r\n                        Question No. {addLeadingZero(currentQuestionIndex + 1)}\r\n                      </span>\r\n                      <span className=\"total-question\">\r\n                        {\" \"}\r\n                        of {addLeadingZero(Qimages.length)}\r\n                      </span>\r\n                    </div>\r\n                    <h2 className=\"question\">\r\n                      {Qimages &&\r\n                      Qimages.length > 0 &&\r\n                      Qimages[activeQuestion] ? (\r\n                        <div>\r\n                          <img\r\n                            src={`data:image/png;base64,${Qimages[activeQuestion].image_data}`}\r\n                            alt={`QImage ${activeQuestion + 1}`}\r\n                          />\r\n                          <ul className=\"options-container\">\r\n                            {OPTimages.slice(\r\n                              activeQuestion * 4,\r\n                              activeQuestion * 4 + 4\r\n                            ).map((optImage, optIndex) => (\r\n                              <li key={optIndex}>\r\n                                <input\r\n                                  type=\"radio\"\r\n                                  name=\"index\"\r\n                                  checked={\r\n                                    selectedAnswers[activeQuestion] ===\r\n                                    String.fromCharCode(65 + optIndex)\r\n                                  }\r\n                                  onChange={() =>\r\n                                    onAnswerSelected(\r\n                                      String.fromCharCode(65 + optIndex)\r\n                                    )\r\n                                  }\r\n                                />\r\n                                <label className=\"alpha-index\">\r\n                                  <img\r\n                                    src={`data:image/png;base64,${optImage.image_data}`}\r\n                                    alt={`OPTImage ${optIndex + 2}-${\r\n                                      optIndex + 5\r\n                                    }`}\r\n                                  />\r\n                                </label>\r\n                              </li>\r\n                            ))}\r\n                          </ul>\r\n                        </div>\r\n                      ) : (\r\n                        <div className=\"loading-gif\">\r\n                          <DotSpinner size={90} speed={0.9} color=\"black\" />\r\n                        </div>\r\n                      )}\r\n                    </h2>\r\n                  </div>\r\n                ) : null}\r\n\r\n                <div className=\"flex-right\">\r\n                  <button className=\"clear-btn\" onClick={markForReview}>\r\n                    Mark for Review & Next\r\n                  </button>\r\n                  <button className=\"clear-btn\" onClick={clearResponse}>\r\n                    Clear Response\r\n                  </button>\r\n                  <button\r\n                    className=\"previous-btn\"\r\n                    onClick={goToPreviousQuestion}\r\n                    disabled={activeQuestion === 0}\r\n                  >\r\n                    <i className=\"fa-solid fa-angles-left\"></i> Previous\r\n                  </button>\r\n                  <button\r\n                    className=\"save-btn\"\r\n                    onClick={onClickNext}\r\n                    // disabled={!selectedAnswers[activeQuestion]}\r\n                  >\r\n                    {activeQuestion === Qimages.length - 1\r\n                      ? \"Submit\"\r\n                      : \"Save & Next\"}\r\n                    <i className=\"fa-solid fa-angles-right\"></i>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              {/* ) : ( */}\r\n              {/* <div className=\"result\">\r\n                <h3>Result</h3>\r\n                <p>\r\n                  Total Questions: <span>{Qimages.length}</span>\r\n                </p>\r\n                <p>\r\n                  Total Score:<span> {result.score}</span>\r\n                </p>\r\n                <p>\r\n                  Correct Answers:<span> {result.correctAnswers}</span>\r\n                </p>\r\n                <p>\r\n                  Wrong Answers:<span> {result.wrongAnswers}</span>\r\n                </p>\r\n                <p>\r\n                  Accuracy:<span> {accuracy}%</span>\r\n                </p>\r\n                <p>\r\n                  Average Score:<span> {averageScore}</span>\r\n                </p>\r\n                <p>\r\n                  Top Score:<span> {topScore}</span>\r\n                </p>\r\n                <p>\r\n                  Live Rank:<span> {liveRank}</span>\r\n                </p>\r\n              </div> */}\r\n              {/* )} */}\r\n            </div>\r\n\r\n            {/* <div className=\"flex-right\">\r\n          <button className=\"clear-btn\" onClick={markForReview}>\r\n            Mark for Review & Next\r\n          </button>\r\n          <button className=\"clear-btn\" onClick={clearResponse}>\r\n            Clear Response\r\n          </button>\r\n          <button\r\n            className=\"previous-btn\"\r\n            onClick={goToPreviousQuestion}\r\n            disabled={activeQuestion === 0}\r\n          >\r\n            <i className=\"fa-solid fa-angles-left\"></i> Previous\r\n          </button>\r\n          <button\r\n            className=\"save-btn\"\r\n            onClick={onClickNext}\r\n            // disabled={!selectedAnswers[activeQuestion]}\r\n          >\r\n            {activeQuestion === Qimages.length - 1 ? \"Submit\" : \"Save & Next\"}\r\n            <i className=\"fa-solid fa-angles-right\"></i>\r\n          </button>\r\n        </div> */}\r\n          </div>\r\n          <div className=\"rightsidebar\">\r\n            <RightSidebar\r\n              onQuestionSelect={handleQuestionSelect}\r\n              questionStatus={questionStatus}\r\n              setQuestionStatus={setQuestionStatus}\r\n              answeredCount={answeredCount}\r\n              notAnsweredCount={notAnsweredCount}\r\n              answeredmarkedForReviewCount={answeredmarkedForReviewCount}\r\n              markedForReviewCount={markedForReviewCount}\r\n              VisitedCount={VisitedCount}\r\n            />\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"result\">\r\n          <h3 id=\"result_header\">Result</h3>\r\n          <div><Link to='/QuizHome' element={<QuizHome/>}>Back</Link><br /><Link to='Download'>Download QuestionPaper</Link></div>\r\n          <div className=\"result_contents\">\r\n            <p>\r\n              Total Questions: <span>{Qimages.length}</span>\r\n            </p>\r\n            <p>\r\n              Total Score:<span> {result.score}</span>\r\n            </p>\r\n            <p>\r\n              Correct Answers:<span> {result.correctAnswers}</span>\r\n            </p>\r\n            <p>\r\n              Wrong Answers:<span> {result.wrongAnswers}</span>\r\n            </p>\r\n            <p>\r\n              Accuracy:<span> {accuracy}%</span>\r\n            </p>\r\n            <p>\r\n              Average Score:<span> {averageScore}</span>\r\n            </p>\r\n            <p>\r\n              Top Score:<span> {topScore}</span>\r\n            </p>\r\n            <p>\r\n              Live Rank:<span> {liveRank}</span>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Paper;\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE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"},"metadata":{},"sourceType":"module","externalDependencies":[]}