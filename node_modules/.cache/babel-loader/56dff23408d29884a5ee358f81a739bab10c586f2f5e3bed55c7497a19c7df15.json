{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/egate_Quiz_project/src/Pages/MainQuizFunctionality/QuestionsFunctionality.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { Link, useParams, useNavigate } from \"react-router-dom\";\n// import PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\n// import \"../Paper/Paper.css\";\n// import ButtonsFunctionality from \"./ButtonsFunctionality\";\n// import TestResultsPage from \"./TestResultsPage\";\n\n// const QuestionsFunctionality = ({ answeredQuestions }) => {\n\n//     const [selectedSubject, setSelectedSubject] = useState(null);\n\n//     const handleSubjectSelect = (subject) => {\n//         // Set the selected subject when a subject button is clicked\n//         setSelectedSubject(subject);\n//     };\n\n//     const [questionData, setQuestionData] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//     const [Subjects, setSubjects] = useState([]);\n//     const { testCreationTableId, subjectId } = useParams();\n//     const [sections, setSections] = useState([]);\n\n//     const [questionStatus, setQuestionStatus] = useState(\n//         Array(questionData.length).fill(\"notAnswered\")\n//     );\n\n//     const [answeredCount, setAnsweredCount] = useState(0);\n//     const [notAnsweredCount, setNotAnsweredCount] = useState(0);\n//     const [answeredmarkedForReviewCount, setAnsweredmarkedForReviewCount] =\n//         useState(0);\n//     const [markedForReviewCount, setMarkedForReviewCount] = useState(0);\n//     const [VisitedCount, setVisitedCount] = useState(0);\n\n//     const updateCounters = () => {\n//         let answered = 0;\n//         let notAnswered = 0;\n//         let marked = 0;\n//         let markedForReview = 0;\n//         let Visited = 0;\n\n//         questionStatus.forEach((status) => {\n//             if (status === \"answered\") {\n//                 answered++;\n//             } else if (status === \"notAnswered\") {\n//                 notAnswered++;\n//             } else if (status === \"marked\") {\n//                 marked++;\n//             } else if (status === \"Answered but marked for review\") {\n//                 markedForReview++;\n//             } else if (status === \"notVisited\") {\n//                 Visited++;\n//             }\n//         });\n\n//         setAnsweredCount(answered);\n//         setNotAnsweredCount(notAnswered);\n//         setAnsweredmarkedForReviewCount(marked);\n//         setMarkedForReviewCount(markedForReview);\n//         setVisitedCount(Visited);\n//     };\n\n//     // ---------------------------------Timer code Start--------------------------------\n//     const [timer, setTimer] = useState(0);\n//     const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\n\n//     const formatTime = (seconds) => {\n//         const hours = Math.floor(seconds / 3600);\n\n//         const minutes = Math.floor((seconds % 3600) / 60);\n\n//         const remainingSeconds = seconds % 60;\n\n//         return `${hours > 9 ? hours : \"0\" + hours}:${minutes > 9 ? minutes : \"0\" + minutes\n//             }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n//     };\n\n//     useEffect(() => {\n//         // Set the timer to the saved value for the current question\n//         setTimer(timers[currentQuestionIndex] || 0);\n//         let interval;\n//         interval = setInterval(() => {\n//             setTimer((prevTimer) => prevTimer + 1);\n//         }, 1000);\n//         // Clear the interval when the component unmounts or when the user moves to the next question\n//         return () => {\n//             clearInterval(interval);\n//         };\n//     }, [currentQuestionIndex, timers]);\n//     // ------------------------------------Timer code end--------------------------------\n\n//     useEffect(() => {\n//         const fetchSubjects = async () => {\n//             try {\n//                 const response = await fetch(\n//                     `http://localhost:4009/subjects/${testCreationTableId}`\n//                 );\n//                 const data = await response.json();\n//                 setSubjects(data);\n//             } catch (error) {\n//                 console.error(error);\n//             }\n//         };\n\n//         const fetchSections = async () => {\n//             try {\n//                 const response = await fetch(\n//                     `http://localhost:4009/fetchSections/${testCreationTableId}`\n//                 );\n//                 const data = await response.json();\n//                 setSections(data);\n//             } catch (error) {\n//                 console.error(error);\n//             }\n//         };\n\n//         const fetchQuestionData = async () => {\n//             try {\n//                 const response = await fetch(\n//                     `http://localhost:4009/getPaperData/${testCreationTableId}`\n//                 );\n//                 const data = await response.json();\n\n//                 // Check if the data has both 'questions' and 'options' properties\n//                 if (data && data.questions && data.options) {\n//                     // Assuming both questions and options are arrays, you might want to merge them\n//                     const mergedData = data.questions.map((question, index) => ({\n//                         ...question,\n//                         options: data.options.slice(index * 4, (index + 1) * 4), // Assuming 4 options per question\n//                     }));\n\n//                     setQuestionData(mergedData);\n//                     setQuestionStatus([\n//                         \"notAnswered\",\n//                         ...Array(mergedData.length - 1).fill(\"notVisited\"),\n//                     ]);\n//                 } else {\n//                     console.error(\"API response does not have expected structure:\", data);\n//                 }\n//             } catch (error) {\n//                 console.error(error);\n//             }\n//         };\n\n//         fetchSubjects();\n//         fetchSections();\n//         fetchQuestionData();\n//     }, [testCreationTableId]);\n\n//     useEffect(() => {\n//         // Call the updateCounters function initially when the component mounts\n//         updateCounters();\n//     }, [questionStatus]);\n\n//     const [selectedAnswers, setSelectedAnswers] = useState(\n//         Array(questionData.length).fill(\"\")\n//     );\n\n//     const onAnswerSelected = (OptionLetter) => {\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//         setSelectedAnswers(updatedSelectedAnswers);\n\n//     };\n\n//     const [activeQuestion, setActiveQuestion] = useState(0);\n\n//     const markForReview = () => {\n//         // Update questionStatus for the marked question\n//         const updatedQuestionStatus = [...questionStatus];\n//         if (selectedAnswers[activeQuestion]) {\n//             updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n//             if (selectedAnswers[activeQuestion] === \"Answered but marked for review\") {\n//                 updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n//             }\n//         } else if (!selectedAnswers[activeQuestion]) {\n//             updatedQuestionStatus[activeQuestion] = \"marked\";\n//         }\n\n//         setQuestionStatus(updatedQuestionStatus);\n//     };\n\n//     const clearResponse = () => {\n//         // Clear the selected answer\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[currentQuestionIndex] = \"\";\n//         setSelectedAnswers(updatedSelectedAnswers);\n\n//         // Update the question status to \"notAnswered\"\n//         setQuestionStatus((prevQuestionStatus) => {\n//             const currentStatus = prevQuestionStatus[currentQuestionIndex];\n//             if (currentStatus === \"answered\") {\n//                 return [\n//                     ...prevQuestionStatus.slice(0, currentQuestionIndex),\n//                     \"notAnswered\",\n//                     ...prevQuestionStatus.slice(currentQuestionIndex + 1),\n//                 ];\n//             }\n//             return prevQuestionStatus;\n//         });\n//     };\n\n//     const goToPreviousQuestion = () => {\n//         setCurrentQuestionIndex((prevIndex) => {\n//             // Save the current timer value for the question\n//             const updatedTimers = [...timers];\n//             updatedTimers[prevIndex] = timer;\n//             setTimers(updatedTimers);\n//             // Move to the previous question\n//             return prevIndex - 1;\n//         });\n\n//         setActiveQuestion((prevActiveQuestion) => prevActiveQuestion - 1);\n//     };\n\n//     const handleNextClick = () => {\n\n//         setCurrentQuestionIndex((prevIndex) => {\n//             // Save the current timer value for the question\n\n//             const updatedTimers = [...timers];\n\n//             updatedTimers[prevIndex] = timer;\n\n//             setTimers(updatedTimers);\n//             return prevIndex + 1;\n//         });\n\n//         const updatedQuestionStatus = [...questionStatus];\n\n//         if (activeQuestion < questionData.length - 1) {\n//             // Check the status of the next question\n//             const nextQuestionStatus = questionStatus[activeQuestion + 1];\n\n//             if (nextQuestionStatus === \"answered\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"answered\";\n//             } else if (nextQuestionStatus === \"notAnswered\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n//             } else if (!markForReview() === false) {\n//                 markForReview();\n//             }\n\n//             setActiveQuestion((prevActiveQuestion) => prevActiveQuestion + 1);\n//         }\n\n//         updateCounters();\n\n//         // Set status of the next question (if any) to \"notAnswered\"\n\n//         if (activeQuestion < questionData.length - 1) {\n//             const updatedQuestionStatus = [...questionStatus];\n//             const nextQuestionStatus = questionStatus[activeQuestion + 1];\n\n//             if (nextQuestionStatus === \"notVisited\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n//             }\n\n//             if (selectedAnswers[activeQuestion] === \"answered\") {\n//                 updatedQuestionStatus[activeQuestion] = \"answered\";\n//             } else if (markForReview() === true) {\n//                 updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n//             } else if (markForReview() === false) {\n//                 updatedQuestionStatus[activeQuestion] = \"marked\";\n//             }\n\n//             if (nextQuestionStatus === \"notAnswered\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n//             }\n\n//             setQuestionStatus(updatedQuestionStatus);\n//         }\n\n//             // Update the question status to \"answered\" only if an answer has been selected\n//     if (selectedAnswers[activeQuestion]) {\n//         setQuestionStatus((prevQuestionStatus) => {\n//             const currentStatus = prevQuestionStatus[activeQuestion];\n//             if (currentStatus === \"notAnswered\") {\n//                 return [\n//                     ...prevQuestionStatus.slice(0, activeQuestion),\n//                     \"answered\",\n//                     ...prevQuestionStatus.slice(activeQuestion + 1),\n//                 ];\n//             }\n//             return prevQuestionStatus;\n//         });\n//     }\n\n//     };\n\n//     const [accuracy, setAccuracy] = useState(0);\n//     const [averageScore, setAverageScore] = useState(0);\n//     const [topScore, setTopScore] = useState(0);\n//     const [liveRank, setLiveRank] = useState(0);\n\n//     const calculateQuestionCounts = () => {\n//         let answered = 0;\n//         let notAnswered = 0;\n//         let markedForReview = 0;\n//         let answeredmarkedForReviewCount = 0;\n//         let VisitedCount = 0;\n\n//         questionStatus.forEach((status, index) => {\n//             if (status === \"answered\") {\n//                 answered++;\n//             } else if (status === \"notAnswered\") {\n//                 notAnswered++;\n//             } else if (status === \"marked\") {\n//                 markedForReview++;\n//             } else if (status === \"Answered but marked for review\") {\n//                 answeredmarkedForReviewCount++;\n//             } else if (status === \"notVisited\") {\n//                 VisitedCount++;\n//             }\n//         });\n\n//         return {\n//             answered,\n//             notAnswered,\n//             markedForReview,\n//             answeredmarkedForReviewCount,\n//             VisitedCount,\n//         };\n//     };\n\n//     const [showResult, setShowResult] = useState(false);\n//     const navigate = useNavigate();\n\n//     const handleSubmit = () => {\n//         window.alert(\"Your Test has been Submitted!! Click Ok to See Result.\");\n\n//         // Call the function to get question counts\n//         const {\n//             answered,\n//             notAnswered,\n//             markedForReview,\n//             answeredmarkedForReviewCount,\n//             VisitedCount,\n//         } = calculateQuestionCounts();\n\n//         // Add any additional logic you need for submitting the exam\n//         // For example, you might want to send this data to the server.\n//          // Redirect to the result page\n//          navigate(\"/result\", {\n//             state: {\n//               answeredCount: answered,\n//               notAnsweredCount: notAnswered,\n//               markedForReviewCount: markedForReview,\n//               answeredmarkedForReviewCount: answeredmarkedForReviewCount,\n//               VisitedCount: VisitedCount,\n//             },\n//         });\n//     };\n\n//     const handleQuestionSelect = (questionNumber) => {\n//         setCurrentQuestionIndex(questionNumber - 1);\n//         setActiveQuestion(questionNumber - 1);\n//     };\n\n//     return (\n\n//         <div className=\"Main-Page\">\n//            {showResult ? (\n//         // Render the ResultPage component here\n//         <TestResultsPage\n//           answeredCount={answeredCount}\n//           notAnsweredCount={notAnsweredCount}\n//           markedForReviewCount={markedForReviewCount}\n//           answeredmarkedForReviewCount={answeredmarkedForReviewCount}\n//           VisitedCount={VisitedCount}\n//         />\n//       ) : (\n//         <div>\n//         <div>\n//             <PaperHeader />\n//         </div>\n//         <div className=\"QUESTIONS_CONTAINER\">\n//             <div className=\"QUESTIONS_CONTAINER_subpart\">\n//             <div className=\"subjects\">\n//             {Subjects.map((subjectTitle, index) => (\n//                 <li key={index}>\n//                     <Link ><button className=\"subject-btn\" onClick={() => handleSubjectSelect(subjectTitle.subjectName)}>{subjectTitle.subjectName}</button></Link>\n//                     {/* <button className=\"subject-btn\">{subjectTitle.subjectName}</button> */}\n//                 </li>\n//             ))}\n\n//         </div>\n\n//         <div className=\"second-header\">\n//             <div className=\"single-select-question\">\n//                 {sections.map((sectionTitle, index) => (\n//                     <li key={index}>\n//                         <p>{sectionTitle.sectionName}</p>\n\n//                     </li>\n//                 ))}\n//                 {/* Single Select Question */}\n//             </div>\n//             <div className=\"right-header\">\n//                 <div className=\"marks\">\n//                     Marks: <div className=\"plus-mark\">+1</div>\n//                     <div className=\"minus-mark\">-1</div>\n//                 </div>\n//                 <div>Timer: {formatTime(timer)}</div>\n//             </div>\n//         </div>\n\n//         <div className=\"Question_No_heading\">\n//             <p>  Question No. {currentQuestionIndex + 1}  of {questionData.length}</p>\n//         </div>\n\n//         <div  className=\"_quizexampart \">\n// {questionData.length > 0 && (\n//             <div className=\"quizexampart_q_O_container\">\n//                 <h4>\n//                     {/* {currentQuestionIndex + 1}. */}\n\n//                     <img\n//                         src={`data:image/png;base64,${questionData[currentQuestionIndex].question_img}`}\n//                         alt={`Question ${currentQuestionIndex + 1}`}\n//                     />\n//                 </h4>\n\n//                 {questionData[currentQuestionIndex].options.map(\n//                     (OptionImage, optionIndex) => (\n//                         <li key={optionIndex}>\n//                             <input\n//                                 type=\"radio\"\n//                                 name={`question-${currentQuestionIndex}-option`}\n//                                 value={optionIndex}\n//                                 checked={\n//                                     selectedAnswers[currentQuestionIndex] === optionIndex\n//                                 }\n//                                 onChange={() => onAnswerSelected(optionIndex)}\n//                             />\n//                             {OptionImage && OptionImage.option_img && (\n//                                 <img\n//                                     key={OptionImage.question_id}\n//                                     src={`data:image/png;base64,${OptionImage.option_img}`}\n//                                     alt={`Option ${optionIndex + 1}`}\n//                                 />\n//                             )}\n//                         </li>\n//                     )\n//                 )}\n//                 <div className=\"flex-right\">\n//                     <button className=\"clear-btn\" onClick={markForReview}>\n//                         Mark for Review & Next\n//                     </button>\n//                     <button className=\"clear-btn\" onClick={clearResponse}>\n//                         Clear Response\n//                     </button>\n//                     <button\n//                         className=\"previous-btn\"\n//                         onClick={goToPreviousQuestion}\n//                         disabled={currentQuestionIndex === 0}\n//                     >\n//                         <i className=\"fa-solid fa-angles-left\"></i> Previous\n//                     </button>\n//                     <button className=\"save-btn\" onClick={handleNextClick}>\n//                         Next <i className=\"fa-solid fa-angles-right\"></i>\n//                     </button>\n//                 </div>\n//             </div>\n//         )}\n// </div>\n//             </div>\n\n// <div className=\"rightsidebar\">\n//                 <ButtonsFunctionality\n//                     onQuestionSelect={handleQuestionSelect}\n//                     questionStatus={questionStatus}\n//                     setQuestionStatus={setQuestionStatus}\n//                     answeredCount={answeredCount}\n//                     notAnsweredCount={notAnsweredCount}\n//                     answeredmarkedForReviewCount={answeredmarkedForReviewCount}\n//                     markedForReviewCount={markedForReviewCount}\n//                     VisitedCount={VisitedCount}\n//                     selectedSubject={selectedSubject}\n//                     questionData={questionData}\n//                 />\n//                 <button onClick={handleSubmit} id=\"resume_btn\">\n//                     Submit\n//                 </button>\n//             </div>\n\n//         </div>\n\n//     </div>\n//       )}\n\n//         </div>\n//     )\n// }\n\n// export default QuestionsFunctionality\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport ButtonsFunctionality from \"./ButtonsFunctionality\";\nimport TestResultsPage from \"./TestResultsPage\";\nimport \"../Paper/Paper.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionsFunctionality = ({\n  answeredQuestions\n}) => {\n  _s();\n  const [selectedSubject, setSelectedSubject] = useState(null);\n  const [data, setData] = useState(null);\n  const {\n    subjectId,\n    testCreationTableId\n  } = useParams();\n  const [Subjects, setSubjects] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch all subjects\n        const responseSubjects = await fetch(`http://localhost:4009/subjects/${testCreationTableId}`);\n        const subjectsData = await responseSubjects.json();\n        setSubjects(subjectsData);\n        console.log(subjectsData);\n\n        // Find the least subjectId\n        const leastSubjectId = subjectsData.length > 0 ? Math.min(...subjectsData.map(subject => subject.subjectId)) : null;\n\n        // If subjectId is not provided, set it to the least subjectId\n        const defaultSubjectId = subjectId || leastSubjectId;\n\n        // Fetch data for the default subject\n        const response = await fetch(`http://localhost:4009/getPaperData/${testCreationTableId}/${defaultSubjectId}`);\n        const result = await response.json();\n        setData(result);\n\n        // Construct the link with the least subjectId\n        const linkUrl = `/subjects/${testCreationTableId}/${subjectId || leastSubjectId}`;\n        // Use linkUrl as needed in your component\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  }, [testCreationTableId, subjectId]);\n  const [sections, setSections] = useState([]);\n  useEffect(() => {\n    const fetchSections = async () => {\n      try {\n        const response = await fetch(`http://localhost:4009/fetchSections/${testCreationTableId}`);\n        const data = await response.json();\n        setSections(data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchSections();\n  }, [testCreationTableId]);\n  const [selectedAnswersMap, setSelectedAnswersMap] = useState({});\n  const handleSubjectsClick = async clickedSubjectId => {\n    setData(null);\n    setCurrentQuestionIndex(0); // Reset current question index\n\n    // Check if there are selected answers for the current subject\n    const selectedAnswersForSubject = selectedAnswersMap[clickedSubjectId] || [];\n    setSelectedAnswers(selectedAnswersForSubject);\n    try {\n      const response = await fetch(`http://localhost:4009/getPaperData/${testCreationTableId}/${clickedSubjectId}`);\n      const subjectsData = await response.json();\n      if (subjectsData && subjectsData.questions) {\n        setData(subjectsData);\n      } else {\n        console.error(\"Invalid data format:\", subjectsData);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const handleNextClick = () => {\n    // Update the current question index to move to the next question\n    setCurrentQuestionIndex(prevIndex => prevIndex < data.questions.length - 1 ? prevIndex + 1 : prevIndex);\n  };\n  const handlePreviousClick = () => {\n    // Update the current question index to move to the previous question\n    setCurrentQuestionIndex(prevIndex => prevIndex > 0 ? prevIndex - 1 : prevIndex);\n  };\n\n  // ---------------------------------Timer code Start--------------------------------\n  const [timer, setTimer] = useState(0);\n  // const [timers, setTimers] = useState(new Array(data.length).fill(0));\n  const [timers, setTimers] = useState(Array(data));\n  const formatTime = seconds => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor(seconds % 3600 / 60);\n    const remainingSeconds = seconds % 60;\n    return `${hours > 9 ? hours : \"0\" + hours}:${minutes > 9 ? minutes : \"0\" + minutes}:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n  };\n\n  //working code\n  useEffect(() => {\n    // Set the timer to the saved value for the current question\n    setTimer(timers[currentQuestionIndex] || 0);\n    let interval;\n    interval = setInterval(() => {\n      setTimer(prevTimer => prevTimer + 1);\n    }, 1000);\n    // Clear the interval when the component unmounts or when the user moves to the next question\n    return () => {\n      clearInterval(interval);\n    };\n  }, [currentQuestionIndex, timers]);\n  // ------------------------------------Timer code end--------------------------------\n\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n\n  //working code\n  const onAnswerSelected = optionIndex => {\n    const updatedSelectedAnswers = [...selectedAnswers];\n    updatedSelectedAnswers[currentQuestionIndex] = optionIndex;\n\n    // Update the selected answers map for the current subject\n    setSelectedAnswersMap(prevMap => ({\n      ...prevMap,\n      [data.subjectId]: updatedSelectedAnswers\n    }));\n    setSelectedAnswers(updatedSelectedAnswers);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"subjects\",\n      children: Subjects.map(subjectTitle => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"#\",\n          onClick: () => handleSubjectsClick(subjectTitle.subjectId),\n          className: \"subject-btn\",\n          children: subjectTitle.subjectName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 732,\n          columnNumber: 17\n        }, this)\n      }, subjectTitle.subjectId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 731,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 729,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"second-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"single-select-question\",\n        children: sections.map((sectionTitle, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: sectionTitle.sectionName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 747,\n            columnNumber: 19\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 746,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 744,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"marks\",\n          children: [\"Marks: \", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"plus-mark\",\n            children: \"+1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 754,\n            columnNumber: 24\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"minus-mark\",\n            children: \"-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 755,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 753,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Timer: \", formatTime(timer)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 757,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 752,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 743,\n      columnNumber: 11\n    }, this), data !== null && data.questions.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [currentQuestionIndex + 1, \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 765,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `data:image/png;base64,${data.questions[currentQuestionIndex].question_img}`,\n          alt: \"Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 766,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 763,\n        columnNumber: 15\n      }, this), data.options.filter(opt => opt.question_id === data.questions[currentQuestionIndex].question_id).map((option, optionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"option\",\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: `question-${currentQuestionIndex}-option`,\n            value: optionIndex,\n            checked: selectedAnswers[currentQuestionIndex] === optionIndex\n            // onChange={() => onAnswerSelected(subjectIndex, optionIndex)}\n            ,\n            onChange: () => onAnswerSelected(optionIndex)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 782,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `data:image/png;base64,${option.option_img}`,\n            alt: \"Option\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 792,\n            columnNumber: 23\n          }, this)]\n        }, optionIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 781,\n          columnNumber: 21\n        }, this)\n      }, option.option_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 780,\n        columnNumber: 19\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"previous-btn\",\n          onClick: handlePreviousClick,\n          disabled: currentQuestionIndex === 0,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa-solid fa-angles-left\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 806,\n            columnNumber: 19\n          }, this), \" Previous\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 801,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-btn\",\n          onClick: handleNextClick,\n          children: [\"Next \", /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa-solid fa-angles-right\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 809,\n            columnNumber: 24\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 808,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 800,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rightsidebar\",\n        children: [/*#__PURE__*/_jsxDEV(ButtonsFunctionality, {\n          onQuestionSelect: handleQuestionSelect,\n          questionStatus: questionStatus,\n          setQuestionStatus: setQuestionStatus,\n          answeredCount: answeredCount,\n          notAnsweredCount: notAnsweredCount,\n          answeredmarkedForReviewCount: answeredmarkedForReviewCount,\n          markedForReviewCount: markedForReviewCount,\n          VisitedCount: VisitedCount,\n          selectedSubject: selectedSubject,\n          questionData: questionData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 814,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSubmit,\n          id: \"resume_btn\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 826,\n          columnNumber: 18\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 813,\n        columnNumber: 14\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 762,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 835,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 728,\n    columnNumber: 9\n  }, this);\n};\n_s(QuestionsFunctionality, \"9xjjjws9dbUW0QSAvBVi3LP4NEw=\", false, function () {\n  return [useParams];\n});\n_c = QuestionsFunctionality;\nexport default QuestionsFunctionality;\nvar _c;\n$RefreshReg$(_c, \"QuestionsFunctionality\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Link","ButtonsFunctionality","TestResultsPage","jsxDEV","_jsxDEV","QuestionsFunctionality","answeredQuestions","_s","selectedSubject","setSelectedSubject","data","setData","subjectId","testCreationTableId","Subjects","setSubjects","currentQuestionIndex","setCurrentQuestionIndex","fetchData","responseSubjects","fetch","subjectsData","json","console","log","leastSubjectId","length","Math","min","map","subject","defaultSubjectId","response","result","linkUrl","error","sections","setSections","fetchSections","selectedAnswersMap","setSelectedAnswersMap","handleSubjectsClick","clickedSubjectId","selectedAnswersForSubject","setSelectedAnswers","questions","handleNextClick","prevIndex","handlePreviousClick","timer","setTimer","timers","setTimers","Array","formatTime","seconds","hours","floor","minutes","remainingSeconds","interval","setInterval","prevTimer","clearInterval","selectedAnswers","onAnswerSelected","optionIndex","updatedSelectedAnswers","prevMap","children","className","subjectTitle","to","onClick","subjectName","fileName","_jsxFileName","lineNumber","columnNumber","sectionTitle","index","sectionName","src","question_img","alt","options","filter","opt","question_id","option","type","name","value","checked","onChange","option_img","option_id","disabled","onQuestionSelect","handleQuestionSelect","questionStatus","setQuestionStatus","answeredCount","notAnsweredCount","answeredmarkedForReviewCount","markedForReviewCount","VisitedCount","questionData","handleSubmit","id","_c","$RefreshReg$"],"sources":["/home/user/Documents/egate_Quiz_project/src/Pages/MainQuizFunctionality/QuestionsFunctionality.jsx"],"sourcesContent":["\n// import React, { useState, useEffect } from \"react\";\n// import { Link, useParams, useNavigate } from \"react-router-dom\";\n// import PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\n// import \"../Paper/Paper.css\";\n// import ButtonsFunctionality from \"./ButtonsFunctionality\";\n// import TestResultsPage from \"./TestResultsPage\";\n\n\n\n\n// const QuestionsFunctionality = ({ answeredQuestions }) => {\n\n//     const [selectedSubject, setSelectedSubject] = useState(null);\n\n//     const handleSubjectSelect = (subject) => {\n//         // Set the selected subject when a subject button is clicked\n//         setSelectedSubject(subject);\n//     };\n\n//     const [questionData, setQuestionData] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//     const [Subjects, setSubjects] = useState([]);\n//     const { testCreationTableId, subjectId } = useParams();\n//     const [sections, setSections] = useState([]);\n\n\n//     const [questionStatus, setQuestionStatus] = useState(\n//         Array(questionData.length).fill(\"notAnswered\")\n//     );\n\n//     const [answeredCount, setAnsweredCount] = useState(0);\n//     const [notAnsweredCount, setNotAnsweredCount] = useState(0);\n//     const [answeredmarkedForReviewCount, setAnsweredmarkedForReviewCount] =\n//         useState(0);\n//     const [markedForReviewCount, setMarkedForReviewCount] = useState(0);\n//     const [VisitedCount, setVisitedCount] = useState(0);\n\n\n//     const updateCounters = () => {\n//         let answered = 0;\n//         let notAnswered = 0;\n//         let marked = 0;\n//         let markedForReview = 0;\n//         let Visited = 0;\n\n//         questionStatus.forEach((status) => {\n//             if (status === \"answered\") {\n//                 answered++;\n//             } else if (status === \"notAnswered\") {\n//                 notAnswered++;\n//             } else if (status === \"marked\") {\n//                 marked++;\n//             } else if (status === \"Answered but marked for review\") {\n//                 markedForReview++;\n//             } else if (status === \"notVisited\") {\n//                 Visited++;\n//             }\n//         });\n\n//         setAnsweredCount(answered);\n//         setNotAnsweredCount(notAnswered);\n//         setAnsweredmarkedForReviewCount(marked);\n//         setMarkedForReviewCount(markedForReview);\n//         setVisitedCount(Visited);\n//     };\n\n\n//     // ---------------------------------Timer code Start--------------------------------\n//     const [timer, setTimer] = useState(0);\n//     const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\n\n//     const formatTime = (seconds) => {\n//         const hours = Math.floor(seconds / 3600);\n\n//         const minutes = Math.floor((seconds % 3600) / 60);\n\n//         const remainingSeconds = seconds % 60;\n\n//         return `${hours > 9 ? hours : \"0\" + hours}:${minutes > 9 ? minutes : \"0\" + minutes\n//             }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n//     };\n\n//     useEffect(() => {\n//         // Set the timer to the saved value for the current question\n//         setTimer(timers[currentQuestionIndex] || 0);\n//         let interval;\n//         interval = setInterval(() => {\n//             setTimer((prevTimer) => prevTimer + 1);\n//         }, 1000);\n//         // Clear the interval when the component unmounts or when the user moves to the next question\n//         return () => {\n//             clearInterval(interval);\n//         };\n//     }, [currentQuestionIndex, timers]);\n//     // ------------------------------------Timer code end--------------------------------\n\n\n//     useEffect(() => {\n//         const fetchSubjects = async () => {\n//             try {\n//                 const response = await fetch(\n//                     `http://localhost:4009/subjects/${testCreationTableId}`\n//                 );\n//                 const data = await response.json();\n//                 setSubjects(data);\n//             } catch (error) {\n//                 console.error(error);\n//             }\n//         };\n\n\n\n\n//         const fetchSections = async () => {\n//             try {\n//                 const response = await fetch(\n//                     `http://localhost:4009/fetchSections/${testCreationTableId}`\n//                 );\n//                 const data = await response.json();\n//                 setSections(data);\n//             } catch (error) {\n//                 console.error(error);\n//             }\n//         };\n\n\n\n\n\n\n//         const fetchQuestionData = async () => {\n//             try {\n//                 const response = await fetch(\n//                     `http://localhost:4009/getPaperData/${testCreationTableId}`\n//                 );\n//                 const data = await response.json();\n\n//                 // Check if the data has both 'questions' and 'options' properties\n//                 if (data && data.questions && data.options) {\n//                     // Assuming both questions and options are arrays, you might want to merge them\n//                     const mergedData = data.questions.map((question, index) => ({\n//                         ...question,\n//                         options: data.options.slice(index * 4, (index + 1) * 4), // Assuming 4 options per question\n//                     }));\n\n//                     setQuestionData(mergedData);\n//                     setQuestionStatus([\n//                         \"notAnswered\",\n//                         ...Array(mergedData.length - 1).fill(\"notVisited\"),\n//                     ]);\n//                 } else {\n//                     console.error(\"API response does not have expected structure:\", data);\n//                 }\n//             } catch (error) {\n//                 console.error(error);\n//             }\n//         };\n\n\n//         fetchSubjects();\n//         fetchSections();\n//         fetchQuestionData();\n//     }, [testCreationTableId]);\n\n\n//     useEffect(() => {\n//         // Call the updateCounters function initially when the component mounts\n//         updateCounters();\n//     }, [questionStatus]);\n\n\n\n//     const [selectedAnswers, setSelectedAnswers] = useState(\n//         Array(questionData.length).fill(\"\")\n//     );\n\n\n\n\n\n\n//     const onAnswerSelected = (OptionLetter) => {\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//         setSelectedAnswers(updatedSelectedAnswers);\n\n//     };\n\n//     const [activeQuestion, setActiveQuestion] = useState(0);\n\n\n//     const markForReview = () => {\n//         // Update questionStatus for the marked question\n//         const updatedQuestionStatus = [...questionStatus];\n//         if (selectedAnswers[activeQuestion]) {\n//             updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n//             if (selectedAnswers[activeQuestion] === \"Answered but marked for review\") {\n//                 updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n//             }\n//         } else if (!selectedAnswers[activeQuestion]) {\n//             updatedQuestionStatus[activeQuestion] = \"marked\";\n//         }\n\n//         setQuestionStatus(updatedQuestionStatus);\n//     };\n\n\n\n\n\n//     const clearResponse = () => {\n//         // Clear the selected answer\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[currentQuestionIndex] = \"\";\n//         setSelectedAnswers(updatedSelectedAnswers);\n    \n//         // Update the question status to \"notAnswered\"\n//         setQuestionStatus((prevQuestionStatus) => {\n//             const currentStatus = prevQuestionStatus[currentQuestionIndex];\n//             if (currentStatus === \"answered\") {\n//                 return [\n//                     ...prevQuestionStatus.slice(0, currentQuestionIndex),\n//                     \"notAnswered\",\n//                     ...prevQuestionStatus.slice(currentQuestionIndex + 1),\n//                 ];\n//             }\n//             return prevQuestionStatus;\n//         });\n//     };\n\n\n//     const goToPreviousQuestion = () => {\n//         setCurrentQuestionIndex((prevIndex) => {\n//             // Save the current timer value for the question\n//             const updatedTimers = [...timers];\n//             updatedTimers[prevIndex] = timer;\n//             setTimers(updatedTimers);\n//             // Move to the previous question\n//             return prevIndex - 1;\n//         });\n\n//         setActiveQuestion((prevActiveQuestion) => prevActiveQuestion - 1);\n//     };\n\n\n//     const handleNextClick = () => {\n\n\n//         setCurrentQuestionIndex((prevIndex) => {\n//             // Save the current timer value for the question\n\n//             const updatedTimers = [...timers];\n\n//             updatedTimers[prevIndex] = timer;\n\n//             setTimers(updatedTimers);\n//             return prevIndex + 1;\n//         });\n\n//         const updatedQuestionStatus = [...questionStatus];\n\n//         if (activeQuestion < questionData.length - 1) {\n//             // Check the status of the next question\n//             const nextQuestionStatus = questionStatus[activeQuestion + 1];\n\n//             if (nextQuestionStatus === \"answered\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"answered\";\n//             } else if (nextQuestionStatus === \"notAnswered\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n//             } else if (!markForReview() === false) {\n//                 markForReview();\n//             }\n\n//             setActiveQuestion((prevActiveQuestion) => prevActiveQuestion + 1);\n//         }\n\n//         updateCounters();\n\n\n\n//         // Set status of the next question (if any) to \"notAnswered\"\n\n//         if (activeQuestion < questionData.length - 1) {\n//             const updatedQuestionStatus = [...questionStatus];\n//             const nextQuestionStatus = questionStatus[activeQuestion + 1];\n\n//             if (nextQuestionStatus === \"notVisited\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n//             }\n\n//             if (selectedAnswers[activeQuestion] === \"answered\") {\n//                 updatedQuestionStatus[activeQuestion] = \"answered\";\n//             } else if (markForReview() === true) {\n//                 updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n//             } else if (markForReview() === false) {\n//                 updatedQuestionStatus[activeQuestion] = \"marked\";\n//             }\n\n//             if (nextQuestionStatus === \"notAnswered\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n//             }\n\n//             setQuestionStatus(updatedQuestionStatus);\n//         }\n\n\n\n//             // Update the question status to \"answered\" only if an answer has been selected\n//     if (selectedAnswers[activeQuestion]) {\n//         setQuestionStatus((prevQuestionStatus) => {\n//             const currentStatus = prevQuestionStatus[activeQuestion];\n//             if (currentStatus === \"notAnswered\") {\n//                 return [\n//                     ...prevQuestionStatus.slice(0, activeQuestion),\n//                     \"answered\",\n//                     ...prevQuestionStatus.slice(activeQuestion + 1),\n//                 ];\n//             }\n//             return prevQuestionStatus;\n//         });\n//     }\n\n//     };\n\n\n//     const [accuracy, setAccuracy] = useState(0);\n//     const [averageScore, setAverageScore] = useState(0);\n//     const [topScore, setTopScore] = useState(0);\n//     const [liveRank, setLiveRank] = useState(0);\n\n//     const calculateQuestionCounts = () => {\n//         let answered = 0;\n//         let notAnswered = 0;\n//         let markedForReview = 0;\n//         let answeredmarkedForReviewCount = 0;\n//         let VisitedCount = 0;\n\n//         questionStatus.forEach((status, index) => {\n//             if (status === \"answered\") {\n//                 answered++;\n//             } else if (status === \"notAnswered\") {\n//                 notAnswered++;\n//             } else if (status === \"marked\") {\n//                 markedForReview++;\n//             } else if (status === \"Answered but marked for review\") {\n//                 answeredmarkedForReviewCount++;\n//             } else if (status === \"notVisited\") {\n//                 VisitedCount++;\n//             }\n//         });\n\n//         return {\n//             answered,\n//             notAnswered,\n//             markedForReview,\n//             answeredmarkedForReviewCount,\n//             VisitedCount,\n//         };\n//     };\n\n\n//     const [showResult, setShowResult] = useState(false);\n//     const navigate = useNavigate();\n    \n\n//     const handleSubmit = () => {\n//         window.alert(\"Your Test has been Submitted!! Click Ok to See Result.\");\n\n\n\n//         // Call the function to get question counts\n//         const {\n//             answered,\n//             notAnswered,\n//             markedForReview,\n//             answeredmarkedForReviewCount,\n//             VisitedCount,\n//         } = calculateQuestionCounts();\n\n\n//         // Add any additional logic you need for submitting the exam\n//         // For example, you might want to send this data to the server.\n//          // Redirect to the result page\n//          navigate(\"/result\", {\n//             state: {\n//               answeredCount: answered,\n//               notAnsweredCount: notAnswered,\n//               markedForReviewCount: markedForReview,\n//               answeredmarkedForReviewCount: answeredmarkedForReviewCount,\n//               VisitedCount: VisitedCount,\n//             },\n//         });\n//     };\n\n\n\n//     const handleQuestionSelect = (questionNumber) => {\n//         setCurrentQuestionIndex(questionNumber - 1);\n//         setActiveQuestion(questionNumber - 1);\n//     };\n\n\n\n\n\n\n\n//     return (\n\n//         <div className=\"Main-Page\">\n//            {showResult ? (\n//         // Render the ResultPage component here\n//         <TestResultsPage\n//           answeredCount={answeredCount}\n//           notAnsweredCount={notAnsweredCount}\n//           markedForReviewCount={markedForReviewCount}\n//           answeredmarkedForReviewCount={answeredmarkedForReviewCount}\n//           VisitedCount={VisitedCount}\n//         />\n//       ) : (\n//         <div>\n//         <div>\n//             <PaperHeader />\n//         </div>\n//         <div className=\"QUESTIONS_CONTAINER\">\n//             <div className=\"QUESTIONS_CONTAINER_subpart\">\n//             <div className=\"subjects\">\n//             {Subjects.map((subjectTitle, index) => (\n//                 <li key={index}>\n//                     <Link ><button className=\"subject-btn\" onClick={() => handleSubjectSelect(subjectTitle.subjectName)}>{subjectTitle.subjectName}</button></Link>\n//                     {/* <button className=\"subject-btn\">{subjectTitle.subjectName}</button> */}\n//                 </li>\n//             ))}\n\n//         </div>\n\n\n//         <div className=\"second-header\">\n//             <div className=\"single-select-question\">\n//                 {sections.map((sectionTitle, index) => (\n//                     <li key={index}>\n//                         <p>{sectionTitle.sectionName}</p>\n\n//                     </li>\n//                 ))}\n//                 {/* Single Select Question */}\n//             </div>\n//             <div className=\"right-header\">\n//                 <div className=\"marks\">\n//                     Marks: <div className=\"plus-mark\">+1</div>\n//                     <div className=\"minus-mark\">-1</div>\n//                 </div>\n//                 <div>Timer: {formatTime(timer)}</div>\n//             </div>\n//         </div>\n\n\n//         <div className=\"Question_No_heading\">\n//             <p>  Question No. {currentQuestionIndex + 1}  of {questionData.length}</p>\n//         </div>\n\n    \n//         <div  className=\"_quizexampart \">\n// {questionData.length > 0 && (\n//             <div className=\"quizexampart_q_O_container\">\n//                 <h4>\n//                     {/* {currentQuestionIndex + 1}. */}\n\n//                     <img\n//                         src={`data:image/png;base64,${questionData[currentQuestionIndex].question_img}`}\n//                         alt={`Question ${currentQuestionIndex + 1}`}\n//                     />\n//                 </h4>\n\n//                 {questionData[currentQuestionIndex].options.map(\n//                     (OptionImage, optionIndex) => (\n//                         <li key={optionIndex}>\n//                             <input\n//                                 type=\"radio\"\n//                                 name={`question-${currentQuestionIndex}-option`}\n//                                 value={optionIndex}\n//                                 checked={\n//                                     selectedAnswers[currentQuestionIndex] === optionIndex\n//                                 }\n//                                 onChange={() => onAnswerSelected(optionIndex)}\n//                             />\n//                             {OptionImage && OptionImage.option_img && (\n//                                 <img\n//                                     key={OptionImage.question_id}\n//                                     src={`data:image/png;base64,${OptionImage.option_img}`}\n//                                     alt={`Option ${optionIndex + 1}`}\n//                                 />\n//                             )}\n//                         </li>\n//                     )\n//                 )}\n//                 <div className=\"flex-right\">\n//                     <button className=\"clear-btn\" onClick={markForReview}>\n//                         Mark for Review & Next\n//                     </button>\n//                     <button className=\"clear-btn\" onClick={clearResponse}>\n//                         Clear Response\n//                     </button>\n//                     <button\n//                         className=\"previous-btn\"\n//                         onClick={goToPreviousQuestion}\n//                         disabled={currentQuestionIndex === 0}\n//                     >\n//                         <i className=\"fa-solid fa-angles-left\"></i> Previous\n//                     </button>\n//                     <button className=\"save-btn\" onClick={handleNextClick}>\n//                         Next <i className=\"fa-solid fa-angles-right\"></i>\n//                     </button>\n//                 </div>\n//             </div>\n//         )}\n// </div>\n//             </div>\n\n\n// <div className=\"rightsidebar\">\n//                 <ButtonsFunctionality\n//                     onQuestionSelect={handleQuestionSelect}\n//                     questionStatus={questionStatus}\n//                     setQuestionStatus={setQuestionStatus}\n//                     answeredCount={answeredCount}\n//                     notAnsweredCount={notAnsweredCount}\n//                     answeredmarkedForReviewCount={answeredmarkedForReviewCount}\n//                     markedForReviewCount={markedForReviewCount}\n//                     VisitedCount={VisitedCount}\n//                     selectedSubject={selectedSubject}\n//                     questionData={questionData}\n//                 />\n//                 <button onClick={handleSubmit} id=\"resume_btn\">\n//                     Submit\n//                 </button>\n//             </div>\n\n//         </div>\n     \n       \n      \n      \n\n//     </div>\n//       )}\n            \n\n\n\n//         </div>\n//     )\n// }\n\n// export default QuestionsFunctionality\n\n\n\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport ButtonsFunctionality from \"./ButtonsFunctionality\";\nimport TestResultsPage from \"./TestResultsPage\";\nimport \"../Paper/Paper.css\";\n\nconst QuestionsFunctionality = ({ answeredQuestions }) => {\n    const [selectedSubject, setSelectedSubject] = useState(null);\n\n    const [data, setData] = useState(null);\n    const { subjectId, testCreationTableId } = useParams();\n    const [Subjects, setSubjects] = useState([]);\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n   \n    useEffect(() => {\n      const fetchData = async () => {\n        try {\n          // Fetch all subjects\n          const responseSubjects = await fetch(\n            `http://localhost:4009/subjects/${testCreationTableId}`\n          );\n          const subjectsData = await responseSubjects.json();\n          setSubjects(subjectsData);\n          console.log(subjectsData);\n   \n          // Find the least subjectId\n          const leastSubjectId =\n            subjectsData.length > 0\n              ? Math.min(...subjectsData.map((subject) => subject.subjectId))\n              : null;\n   \n          // If subjectId is not provided, set it to the least subjectId\n          const defaultSubjectId = subjectId || leastSubjectId;\n   \n          // Fetch data for the default subject\n          const response = await fetch(\n            `http://localhost:4009/getPaperData/${testCreationTableId}/${defaultSubjectId}`\n          );\n          const result = await response.json();\n          setData(result);\n   \n       \n   \n          // Construct the link with the least subjectId\n          const linkUrl = `/subjects/${testCreationTableId}/${\n            subjectId || leastSubjectId\n          }`;\n          // Use linkUrl as needed in your component\n        } catch (error) {\n          console.error(\"Error fetching data:\", error);\n        }\n      };\n   \n      fetchData();\n    }, [testCreationTableId, subjectId]);\n   \n    const [sections, setSections] = useState([]);\n    useEffect(() => {\n      const fetchSections = async () => {\n        try {\n          const response = await fetch(\n            `http://localhost:4009/fetchSections/${testCreationTableId}`\n          );\n          const data = await response.json();\n          setSections(data);\n        } catch (error) {\n          console.error(error);\n        }\n      };\n   \n      fetchSections();\n    }, [testCreationTableId]);\n   \n   \n   \n    const [selectedAnswersMap, setSelectedAnswersMap] = useState({});\n    const handleSubjectsClick = async (clickedSubjectId) => {\n      setData(null);\n      setCurrentQuestionIndex(0); // Reset current question index\n   \n      // Check if there are selected answers for the current subject\n      const selectedAnswersForSubject = selectedAnswersMap[clickedSubjectId] || [];\n      setSelectedAnswers(selectedAnswersForSubject);\n   \n      try {\n        const response = await fetch(\n          `http://localhost:4009/getPaperData/${testCreationTableId}/${clickedSubjectId}`\n        );\n        const subjectsData = await response.json();\n   \n        if (subjectsData && subjectsData.questions) {\n          setData(subjectsData);\n        } else {\n          console.error(\"Invalid data format:\", subjectsData);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n   \n   \n    const handleNextClick = () => {\n      // Update the current question index to move to the next question\n      setCurrentQuestionIndex((prevIndex) =>\n        prevIndex < data.questions.length - 1 ? prevIndex + 1 : prevIndex\n      );\n    };\n   \n    const handlePreviousClick = () => {\n      // Update the current question index to move to the previous question\n      setCurrentQuestionIndex((prevIndex) =>\n        prevIndex > 0 ? prevIndex - 1 : prevIndex\n      );\n    };\n   \n    // ---------------------------------Timer code Start--------------------------------\n    const [timer, setTimer] = useState(0);\n    // const [timers, setTimers] = useState(new Array(data.length).fill(0));\n    const [timers, setTimers] = useState(Array(data));\n    const formatTime = (seconds) => {\n      const hours = Math.floor(seconds / 3600);\n      const minutes = Math.floor((seconds % 3600) / 60);\n      const remainingSeconds = seconds % 60;\n      return `${hours > 9 ? hours : \"0\" + hours}:${\n        minutes > 9 ? minutes : \"0\" + minutes\n      }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n    };\n   \n    //working code\n    useEffect(() => {\n      // Set the timer to the saved value for the current question\n      setTimer(timers[currentQuestionIndex] || 0);\n      let interval;\n      interval = setInterval(() => {\n        setTimer((prevTimer) => prevTimer + 1);\n      }, 1000);\n      // Clear the interval when the component unmounts or when the user moves to the next question\n      return () => {\n        clearInterval(interval);\n      };\n    }, [currentQuestionIndex, timers]);\n    // ------------------------------------Timer code end--------------------------------\n   \n    const [selectedAnswers, setSelectedAnswers] = useState([]);\n   \n   \n   \n    //working code\n    const onAnswerSelected = (optionIndex) => {\n      const updatedSelectedAnswers = [...selectedAnswers];\n      updatedSelectedAnswers[currentQuestionIndex] = optionIndex;\n   \n      // Update the selected answers map for the current subject\n      setSelectedAnswersMap((prevMap) => ({\n        ...prevMap,\n        [data.subjectId]: updatedSelectedAnswers,\n      }));\n   \n      setSelectedAnswers(updatedSelectedAnswers);\n    };\n   \n\n\n\n\n\n    return (\n        <div>\n          <div className=\"subjects\">\n            {Subjects.map((subjectTitle) => (\n              <li key={subjectTitle.subjectId}>\n                <Link\n                  to=\"#\"\n                  onClick={() => handleSubjectsClick(subjectTitle.subjectId)}\n                  className=\"subject-btn\"\n                >\n                  {/* {subjectTitle.subjectId[0]} */}\n                  {subjectTitle.subjectName}\n                </Link>\n              </li>\n            ))}\n          </div>\n          <div className=\"second-header\">\n            <div className=\"single-select-question\">\n              {sections.map((sectionTitle, index) => (\n                <li key={index}>\n                  <p>{sectionTitle.sectionName}</p>\n                </li>\n              ))}\n              {/* Single Select Question */}\n            </div>\n            <div className=\"right-header\">\n              <div className=\"marks\">\n                Marks: <div className=\"plus-mark\">+1</div>\n                <div className=\"minus-mark\">-1</div>\n              </div>\n              <div>Timer: {formatTime(timer)}</div>\n            </div>\n          </div>\n     \n          {data !== null && data.questions.length > 0 ? (\n            <div>\n              <div className=\"question\">\n                {/* Render the current question based on currentQuestionIndex */}\n                <h3>{currentQuestionIndex + 1}.</h3>\n                <img\n                  src={`data:image/png;base64,${data.questions[currentQuestionIndex].question_img}`}\n                  alt=\"Question\"\n                />\n              </div>\n     \n              {/* Map over options for the current question and render them */}\n              {data.options\n                .filter(\n                  (opt) =>\n                    opt.question_id ===\n                    data.questions[currentQuestionIndex].question_id\n                )\n                .map((option, optionIndex) => (\n                  <div className=\"option\" key={option.option_id}>\n                    <li key={optionIndex}>\n                      <input\n                        type=\"radio\"\n                        name={`question-${currentQuestionIndex}-option`}\n                        value={optionIndex}\n                        checked={\n                          selectedAnswers[currentQuestionIndex] === optionIndex\n                        }\n                        // onChange={() => onAnswerSelected(subjectIndex, optionIndex)}\n                        onChange={() => onAnswerSelected(optionIndex)}\n                      />\n                      <img\n                        src={`data:image/png;base64,${option.option_img}`}\n                        alt=\"Option\"\n                      />\n                    </li>\n                  </div>\n                ))}\n     \n              <div>\n                <button\n                  className=\"previous-btn\"\n                  onClick={handlePreviousClick}\n                  disabled={currentQuestionIndex === 0}\n                >\n                  <i className=\"fa-solid fa-angles-left\"></i> Previous\n                </button>\n                <button className=\"save-btn\" onClick={handleNextClick}>\n                  Next <i className=\"fa-solid fa-angles-right\"></i>\n                </button>\n              </div>\n\n             <div className=\"rightsidebar\">\n                <ButtonsFunctionality\n                     onQuestionSelect={handleQuestionSelect}\n                     questionStatus={questionStatus}\n                     setQuestionStatus={setQuestionStatus}\n                     answeredCount={answeredCount}\n                     notAnsweredCount={notAnsweredCount}\n                     answeredmarkedForReviewCount={answeredmarkedForReviewCount}\n                     markedForReviewCount={markedForReviewCount}\n                     VisitedCount={VisitedCount}\n                     selectedSubject={selectedSubject}\n                     questionData={questionData}\n                 />\n                 <button onClick={handleSubmit} id=\"resume_btn\">\n                    Submit\n                </button>\n             </div>\n\n\n              \n            </div>\n          ) : (\n            <p>Loading data...</p>\n          )}\n\n\n        </div>\n      );\n}\n\nexport default QuestionsFunctionality"],"mappings":";;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAOA;AACA;AACA;AACA;;AAEA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAMA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;;AAGA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAIA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAGA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAQA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;;AAKA;AACA;AACA;;AAEA;;AAKA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,IAAI,QAAQ,kBAAkB;AAClD,OAAOC,oBAAoB,MAAM,wBAAwB;AACzD,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,sBAAsB,GAAGA,C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"},"metadata":{},"sourceType":"module","externalDependencies":[]}