{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\egate_Quiz_project\\\\src\\\\Pages\\\\Paper\\\\Paper.jsx\",\n  _s = $RefreshSig$();\n// test commit\n\n// import React, { useEffect, useState } from 'react';\n// import quiz from '../../Data/quesAns'\n// import './Paper.css'\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader'\n\n// // Defining Timer code\n// const formatTime = (time) => {\n//     let minutes = Math.floor(time / 60);\n//     let seconds = Math.floor(time - minutes * 60);\n\n//     if (minutes < 10) minutes = '0' + minutes;\n//     if (seconds < 10) seconds = '0' + seconds;\n//     return minutes + ':' + seconds;\n// }; // End of Defining Timer code\n\n// const Paper = ({ seconds, answeredQuestions }) => {\n\n//     const [activeQuestion, setActiveQuestion] = useState(0);\n//     const handleQuestionSelect = (questionNumber) => {\n//         setActiveQuestion(questionNumber - 1);\n//     }\n\n//     // const [questionStatus, setQuestionStatus] = useState(Array(30).fill('notAnswered'))\n//     // const [activeQuestion, setActiveQuestion] = useState(0)\n//     // const [selectedAnswer, setSelectedAnswer] = useState('')\n\n//     const [selectedAnswers, setSelectedAnswers] = useState(new Array(quiz.questions.length).fill(''));\n//     const [showResult, setShowResult] = useState(false)\n//     const [result, setResult] = useState({\n//         score: 0,\n//         correctAnswers: 0,\n//         wrongAnswers: 0,\n//     })\n\n//     const { questions } = quiz\n//     const { question, choices, correctAnswer } = questions[activeQuestion]\n//     const onClickNext = () => {\n//         setResult((prev) =>\n//             selectedAnswers[activeQuestion] === correctAnswer\n//                 ? {\n//                     ...prev,\n//                     score: prev.score + 5,\n//                     correctAnswers: prev.correctAnswers + 1,\n//                 }\n//                 : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\n//         );\n//         if (activeQuestion !== questions.length - 1) {\n//             setActiveQuestion((prev) => prev + 1);\n//         } else {\n//             // setActiveQuestion(0);\n//             setShowResult(true);\n//             calculateResult();//new added code\n//         }\n//     };\n\n//     const onAnswerSelected = (OptionLetter) => {\n//         // Update the selected answer for the current question\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//         setSelectedAnswers(updatedSelectedAnswers);\n//         // setSelectedAnswers(updatedSelectedAnswers, OptionLetter);\n\n//     };\n\n//     const clearResponse = () => {\n//         // Clear the response for the current question\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = '';\n//         setSelectedAnswers(updatedSelectedAnswers);\n//     };\n\n//     const goToPreviousQuestion = () => {\n//         // Move to the previous question\n//         if (activeQuestion > 0) {\n//             setActiveQuestion((prev) => prev - 1);\n//         }\n//     };\n\n//     const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n//     const [countdown, setCountDown] = useState(seconds);\n//     useEffect(() => {\n//         const timerId = setInterval(() => {\n//             setCountDown((prevCountDown) =>\n//                 prevCountDown - 1\n//             );\n//         }, 1000)\n//         return () => {\n//             clearInterval(timerId);\n//         };\n//     }, [])\n\n//     useEffect(() => {\n//         if (countdown <= 0) {\n//             setShowResult(true);\n//             // clearInterval(timerId.current);\n//             // alert(\"End\");\n//         }\n//     }, [countdown]);\n\n//    // NEW ADDED CODE\n\n//     // const [showResult, setShowResult] = useState(false);\n//     const [accuracy, setAccuracy] = useState(0);\n//     const [averageScore, setAverageScore] = useState(0);\n//     const [topScore, setTopScore] = useState(0);\n//     const [liveRank, setLiveRank] = useState(0);\n\n//     const calculateResult = () => {\n//         // Calculate accuracy\n//         const totalAttempted = answeredQuestions.length;\n//         const totalCorrect = result.correctAnswers;\n//         const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\n//         setAccuracy(calculatedAccuracy.toFixed(2));\n\n//         // Calculate average score\n//         const calculatedAverageScore = result.score / totalAttempted;\n//         setAverageScore(calculatedAverageScore.toFixed(2));\n\n//         // Placeholder for live ranking data - Replace this with actual data\n//         const calculatedTopScore = 100;\n//         const calculatedLiveRank = 1;\n\n//         setTopScore(calculatedTopScore);\n//         setLiveRank(calculatedLiveRank);\n//     };\n\n//     // const onClickSubmit = () => {\n//     //     calculateResult();\n//     //     setShowResult(true);\n//     // };\n\n//     return (\n\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     {!showResult ? (\n//                         <div>\n//                             <div className='subjects'>\n//                                 <button className='subject-btn'>Mathematics</button>\n//                                 <button className='subject-btn'>Physics</button>\n//                                 <button className='subject-btn'>Chemistry</button>\n//                             </div>\n//                             <div className='second-header'>\n//                                 <div className='single-select-question'>\n//                                     Single Select Question\n//                                 </div>\n//                                 <div className='right-header'>\n//                                     <div className='marks'>\n//                                         Marks: <div className='plus-mark'>+1</div>\n//                                         <div className='minus-mark'>-1</div>\n//                                     </div>\n//                                     <div className='timer'>\n//                                         <h3>Time Left: {formatTime(countdown)}</h3>\n//                                     </div>\n//                                 </div>\n//                             </div>\n//                             <div className='question-no'>\n//                                 <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\n//                                 <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\n//                             </div>\n\n//                             <h2 className='question'><img src={question} alt=\"question\" /></h2>\n\n//                             <ul className='options-container'>\n//                                 {choices.map((answer, index) => (\n//                                     <li key={answer}>\n//                                         <input type=\"radio\"\n//                                             // id={answer}\n//                                             id={`option-${index}`}\n//                                             name='answer'\n//                                             value={answer}\n//                                             checked={selectedAnswers[activeQuestion] === answer}\n//                                             onChange={() => onAnswerSelected(answer)} />\n\n//                                         <label className='alpha-index' htmlFor={`option-${index}`}>\n//                                             {/* htmlFor={answer} */}\n//                                             {String.fromCharCode(65 + index)}.\n//                                             <img src={answer} alt=\"answer\" />\n//                                         </label>\n//                                     </li>\n//                                 ))}\n//                             </ul>\n\n//                             <div className=\"flex-right\">\n//                                 <button className='clear-btn'>Mark for Review & Next</button>\n//                                 <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\n//                                 <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                                     <i class=\"fa-solid fa-angles-left\"></i>\n//                                     Previous\n//                                 </button>\n//                                 <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                                     {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\n//                                 </button>\n\n//                             </div>\n//                         </div>\n//                     ) : (\n//                         <div className=\"result\">\n//                             <h3>Result</h3>\n//                             <p>\n//                                 Total Questions: <span>{questions.length}</span>\n//                             </p>\n//                             <p>\n//                                 Total Score:<span> {result.score}</span>\n//                             </p>\n//                             <p>\n//                                 Correct Answers:<span> {result.correctAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Wrong Answers:<span> {result.wrongAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Accuracy:<span> {accuracy}%</span>\n//                             </p>\n//                             <p>\n//                                 Average Score:<span> {averageScore}</span>\n//                             </p>\n//                             <p>\n//                                 Top Score:<span> {topScore}</span>\n//                             </p>\n//                             <p>\n//                                 Live Rank:<span> {liveRank}</span>\n//                             </p>\n//                         </div>\n//                     )}\n//                 </div>\n//             </div>\n//             <div className='rightsidebar'><RightSidebar onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} /></div>\n//         </div>\n\n//     )\n// }\n\n// export default Paper\n\n// import React, { useEffect, useState } from 'react';\n// // import quiz from '../../Data/quesAns'\n// import './Paper.css'\n// // import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader'\n\n// // Defining Timer code\n// // const formatTime = (time) => {\n// //     let minutes = Math.floor(time / 60);\n// //     let seconds = Math.floor(time - minutes * 60);\n\n// //     if (minutes < 10) minutes = '0' + minutes;\n// //     if (seconds < 10) seconds = '0' + seconds;\n// //     return minutes + ':' + seconds;\n// // }; // End of Defining Timer code\n\n// const Paper = () => {\n\n//     // const [activeQuestion, setActiveQuestion] = useState(0);\n//     // const handleQuestionSelect = (questionNumber) => {\n//     //     setActiveQuestion(questionNumber - 1);\n//     // }\n\n//     // const [questionStatus, setQuestionStatus] = useState(Array(30).fill('notAnswered'))\n//     // const [activeQuestion, setActiveQuestion] = useState(0)\n//     // const [selectedAnswer, setSelectedAnswer] = useState('')\n\n//     // const [selectedAnswers, setSelectedAnswers] = useState(new Array(quiz.questions.length).fill(''));\n//     // const [showResult, setShowResult] = useState(false)\n//     // const [result, setResult] = useState({\n//     //     score: 0,\n//     //     correctAnswers: 0,\n//     //     wrongAnswers: 0,\n//     // })\n\n//     // const { questions } = quiz\n//     // const { Qimages, OPTimages, correctAnswer } = [activeQuestion]\n//     // const onClickNext = () => {\n//     //     setResult((prev) =>\n//     //         selectedAnswers[activeQuestion] === correctAnswer\n//     //             ? {\n//     //                 ...prev,\n//     //                 score: prev.score + 5,\n//     //                 correctAnswers: prev.correctAnswers + 1,\n//     //             }\n//     //             : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\n//     //     );\n//     //     if (activeQuestion !== questions.length - 1) {\n//     //         setActiveQuestion((prev) => prev + 1);\n//     //     } else {\n//     //         // setActiveQuestion(0);\n//     //         setShowResult(true);\n//     //         calculateResult();//new added code\n//     //     }\n//     // };\n\n//     // const onAnswerSelected = (OptionLetter) => {\n//     //     // Update the selected answer for the current question\n//     //     const updatedSelectedAnswers = [...selectedAnswers];\n//     //     updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//     //     setSelectedAnswers(updatedSelectedAnswers);\n//     //     // setSelectedAnswers(updatedSelectedAnswers, OptionLetter);\n\n//     // };\n\n//     // const clearResponse = () => {\n//     //     // Clear the response for the current question\n//     //     const updatedSelectedAnswers = [...selectedAnswers];\n//     //     updatedSelectedAnswers[activeQuestion] = '';\n//     //     setSelectedAnswers(updatedSelectedAnswers);\n//     // };\n\n//     // const goToPreviousQuestion = () => {\n//     //     // Move to the previous question\n//     //     if (activeQuestion > 0) {\n//     //         setActiveQuestion((prev) => prev - 1);\n//     //     }\n//     // };\n\n//     // const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n//     // const [countdown, setCountDown] = useState(seconds);\n//     // useEffect(() => {\n//     //     const timerId = setInterval(() => {\n//     //         setCountDown((prevCountDown) =>\n//     //             prevCountDown - 1\n//     //         );\n//     //     }, 1000)\n//     //     return () => {\n//     //         clearInterval(timerId);\n//     //     };\n//     // }, [])\n\n//     // useEffect(() => {\n//     //     if (countdown <= 0) {\n//     //         setShowResult(true);\n//     //         // clearInterval(timerId.current);\n//     //         // alert(\"End\");\n//     //     }\n//     // }, [countdown]);\n\n//     // NEW ADDED CODE\n\n//     // const [showResult, setShowResult] = useState(false);\n//     // const [accuracy, setAccuracy] = useState(0);\n//     // const [averageScore, setAverageScore] = useState(0);\n//     // const [topScore, setTopScore] = useState(0);\n//     // const [liveRank, setLiveRank] = useState(0);\n\n//     // const calculateResult = () => {\n//     //     // Calculate accuracy\n//     //     const totalAttempted = answeredQuestions.length;\n//     //     const totalCorrect = result.correctAnswers;\n//     //     const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\n//     //     setAccuracy(calculatedAccuracy.toFixed(2));\n\n//     //     // Calculate average score\n//     //     const calculatedAverageScore = result.score / totalAttempted;\n//     //     setAverageScore(calculatedAverageScore.toFixed(2));\n\n//     //     // Placeholder for live ranking data - Replace this with actual data\n//     //     const calculatedTopScore = 100;\n//     //     const calculatedLiveRank = 1;\n\n//     //     setTopScore(calculatedTopScore);\n//     //     setLiveRank(calculatedLiveRank);\n//     // };\n\n//     // const onClickSubmit = () => {\n//     //     calculateResult();\n//     //     setShowResult(true);\n//     // };\n\n//     const [Qimages,setQImages] = useState([]);\n//     const [OPTimages,setOPTImages] = useState([]);\n\n//     useEffect(() => {\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//         const fetchQImages = async () => {\n//             let fetchedQImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     const response = await fetch(`http://localhost:7000/images/${i}`);\n//                     const data = await response.json();\n//                     if (data.length > 0) {\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching Qimages:', error);\n//                 }\n//             }\n\n//             setQImages(fetchedQImages);\n//         };\n\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//         const fetchOPTImages = async () => {\n//             let fetchedOPTImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     for (let j = i + 1; j <= i + 4; j++) {\n//                         const response = await fetch(`http://localhost:7000/images/${j}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                         }\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching OPTimages:', error);\n//                 }\n//             }\n\n//             setOPTImages(fetchedOPTImages);\n//         };\n\n//         fetchQImages();\n//         fetchOPTImages();\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     return (\n\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     {/* {!showResult ? ( */}\n//                         <div>\n//                             <div className='subjects'>\n//                                 <button className='subject-btn'>Mathematics</button>\n//                                 <button className='subject-btn'>Physics</button>\n//                                 <button className='subject-btn'>Chemistry</button>\n//                             </div>\n//                             <div className='second-header'>\n//                                 <div className='single-select-question'>\n//                                     Single Select Question\n//                                 </div>\n//                                 {/* <div className='right-header'>\n//                                     <div className='marks'>\n//                                         Marks: <div className='plus-mark'>+1</div>\n//                                         <div className='minus-mark'>-1</div>\n//                                     </div>\n//                                     <div className='timer'>\n//                                         <h3>Time Left: {formatTime(countdown)}</h3>\n//                                     </div>\n//                                 </div> */}\n//                             </div>\n//                             {/* <div className='question-no'>\n//                                 <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\n//                                 <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\n//                             </div> */}\n\n//                             {Qimages.map((qImage, index) => (\n//                                 <div key={index}>\n//                                     {/* <h2>QImage {index + 1}</h2> */}\n//                                     {/* <div className='question-no'>\n//                                         <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\n//                                         <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\n//                                     </div> */}\n//                                     <h2 className='question'> <img\n//                                         src={`data:image/png;base64,${qImage.image_data}`}\n//                                         alt={`QImage ${index + 1}`}\n//                                     /></h2>\n\n//                                     <ul className='options-container'>\n//                                         {OPTimages.slice(index * 4, index * 4 + 4).map((optImage, optIndex) => (\n//                                             <li>\n//                                                 <input type=\"radio\"\n//                                                 // // id={answer}\n//                                                 //     id={`option-${index}`}\n//                                                 //     name='answer'\n//                                                 //     value={optImage}\n//                                                 //     checked={selectedAnswers[activeQuestion] === optImage}\n//                                                 //     onChange={() => onAnswerSelected(optImage)}\n//                                                 />\n\n//                                                 <label className='alpha-index' >\n//                                                     <img\n//                                                         key={optIndex}\n//                                                         src={`data:image/png;base64,${optImage.image_data}`}\n//                                                         alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                                     />\n//                                                 </label>\n//                                             </li>\n//                                         ))}\n//                                     </ul>\n//                                 </div>\n//                             ))}\n\n//                             {/* <div className=\"flex-right\">\n//                                 <button className='clear-btn'>Mark for Review & Next</button>\n//                                 <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\n//                                 <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                                     <i class=\"fa-solid fa-angles-left\"></i>\n//                                     Previous\n//                                 </button>\n//                                 <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                                     {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\n//                                 </button>\n\n//                             </div> */}\n//                         </div>\n//                     {/* ) : ( */}\n//                         {/* <div className=\"result\"> */}\n//                             {/* <h3>Result</h3>\n//                             <p>\n//                                 Total Questions: <span>{questions.length}</span>\n//                             </p>\n//                             <p>\n//                                 Total Score:<span> {result.score}</span>\n//                             </p>\n//                             <p>\n//                                 Correct Answers:<span> {result.correctAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Wrong Answers:<span> {result.wrongAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Accuracy:<span> {accuracy}%</span>\n//                             </p>\n//                             <p>\n//                                 Average Score:<span> {averageScore}</span>\n//                             </p>\n//                             <p>\n//                                 Top Score:<span> {topScore}</span>\n//                             </p>\n//                             <p>\n//                                 Live Rank:<span> {liveRank}</span>\n//                             </p> */}\n//                         {/* </div> */}\n//                     {/* )} */}\n//                 </div>\n//             </div>\n//             {/* <div className='rightsidebar'><RightSidebar onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} /></div> */}\n//         </div>\n\n//     )\n// }\n\n// export default Paper\n\n// import React, { useEffect, useState } from 'react';\n// import './Paper.css';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\n\n// const Paper = () => {\n//     const [Qimages, setQImages] = useState([]);\n//     const [OPTimages, setOPTImages] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n//         useEffect(() => {\n//             // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//             const fetchQImages = async () => {\n//                 let fetchedQImages = [];\n\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                     try {\n//                         const response = await fetch(`http://localhost:7000/images/${i}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedQImages.push(data[0]); // Add only the first image from each set\n//                         }\n//                     } catch (error) {\n//                         console.error('Error fetching Qimages:', error);\n//                     }\n//                 }\n\n//                 setQImages(fetchedQImages);\n//             };\n\n//             // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//             const fetchOPTImages = async () => {\n//                 let fetchedOPTImages = [];\n\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                     try {\n//                         for (let j = i + 1; j <= i + 4; j++) {\n//                             const response = await fetch(`http://localhost:7000/images/${j}`);\n//                             const data = await response.json();\n//                             if (data.length > 0) {\n//                                 fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                             }\n//                         }\n//                     } catch (error) {\n//                         console.error('Error fetching OPTimages:', error);\n//                     }\n//                 }\n\n//                 setOPTImages(fetchedOPTImages);\n//             };\n\n//             fetchQImages();\n//             fetchOPTImages();\n//         }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     const handleNextClick = () => {\n//         // Move to the next question when the \"Next\" button is clicked\n//         setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n//     };\n\n//     return (\n//         <div className='main'>\n//             {/* ... */}\n//             <div><PaperHeader /></div>\n//             <div className='options-container'>\n//                 {/* Display only the current question and its options */}\n//                 <h2 className='question'>\n//                     <img\n//                         src={`data:image/png;base64,${Qimages[currentQuestionIndex].image_data}`}\n//                         alt={`QImage ${currentQuestionIndex + 1}`}\n//                     />\n//                 </h2>\n//                 <ul className='options-container'>\n//                     {OPTimages\n//                         .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                         .map((optImage, optIndex) => (\n//                             <li key={optIndex}>\n//                                 <input type=\"radio\" />\n//                                 <label className='alpha-index'>\n//                                     <img\n//                                         src={`data:image/png;base64,${optImage.image_data}`}\n//                                         alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                     />\n//                                 </label>\n//                             </li>\n//                         ))}\n//                 </ul>\n//                 <button onClick={handleNextClick}>Next</button>\n//             </div>\n//             {/* ... */}\n//         </div>\n//     );\n// };\n\n// export default Paper;\n\n// import React, { useEffect, useState } from 'react';\n// import './Paper.css';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\n// // import { Waveform } from '@uiball/loaders'\n\n// const Paper = () => {\n\n//     const [Qimages, setQImages] = useState([]);\n//     const [OPTimages, setOPTImages] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n//     useEffect(() => {\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//         const fetchQImages = async () => {\n//             let fetchedQImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     const response = await fetch(`http://localhost:7001/images/${i}`);\n//                     const data = await response.json();\n//                     if (data.length > 0) {\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching Qimages:', error);\n//                 }\n//             }\n\n//             setQImages(fetchedQImages);\n//         };\n\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//         const fetchOPTImages = async () => {\n//             let fetchedOPTImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     for (let j = i + 1; j <= i + 4; j++) {\n//                         const response = await fetch(`http://localhost:7001/images/${j}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                         }\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching OPTimages:', error);\n//                 }\n//             }\n\n//             setOPTImages(fetchedOPTImages);\n//         };\n\n//         fetchQImages();\n//         fetchOPTImages();\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     const handleNextClick = () => {\n//         // Move to the next question when the \"Next\" button is clicked\n//         setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n//     };\n\n//     // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\n//     const currentQuestion = Qimages[currentQuestionIndex];\n//     const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\n\n//     return (\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     <div className='options-container'>\n//                         <h2 className='question'>\n//                             {currentQuestion ? (\n//                                 <img\n//                                     src={questionImageSrc}\n//                                     alt={`QImage ${currentQuestionIndex + 1}`}\n//                                 />\n//                             ) : (\n//                                 <p>Loading question...</p>\n\n//                             // <Waveform\n//                             //     size={40}\n//                             //     lineWeight={3.5}\n//                             //     speed={1}\n//                             //     color=\"black\"\n//                             // />\n//                             )}\n//                         </h2>\n//                         <ul className='options-container'>\n//                             {/* ... (options rendering logic) */}\n//                             {OPTimages\n//                                 .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                                 .map((optImage, optIndex) => (\n\n//                                     <li key={optIndex}>\n//                                         <input type=\"radio\" />\n//                                         <label className='alpha-index'>\n//                                             <img\n//                                                 src={`data:image/png;base64,${optImage.image_data}`}\n//                                                 alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                             />\n//                                         </label>\n//                                     </li>\n//                                 ))}\n//                         </ul>\n//                         <button onClick={handleNextClick}>Next</button>\n//                     </div>\n\n//                 </div>\n//             </div>\n\n//             {/* ... */}\n//         </div>\n//     );\n// };\n\n// export default Paper;\n\n// import React, { useEffect, useState } from 'react';\n// import './Paper.css';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\n\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import { DotSpinner } from '@uiball/loaders'\n\n// const Paper = () => {\n\n//     const [Qimages, setQImages] = useState([]);\n//     const [OPTimages, setOPTImages] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n//     useEffect(() => {\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//         const fetchQImages = async () => {\n//             let fetchedQImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     const response = await fetch(`http://localhost:7002/images/${i}`);\n//                     const data = await response.json();\n//                     if (data.length > 0) {\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching Qimages:', error);\n//                 }\n//             }\n\n//             setQImages(fetchedQImages);\n//         };\n\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//         const fetchOPTImages = async () => {\n//             let fetchedOPTImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     for (let j = i + 1; j <= i + 4; j++) {\n//                         const response = await fetch(`http://localhost:7002/images/${j}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                         }\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching OPTimages:', error);\n//                 }\n//             }\n\n//             setOPTImages(fetchedOPTImages);\n//         };\n\n//         fetchQImages();\n//         fetchOPTImages();\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     // const handleNextClick = () => {\n//     //     // Move to the next question when the \"Next\" button is clicked\n//     //     setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n\n//     // };\n\n//     // const handlepreClick=()=>{\n//     //     setCurrentQuestionIndex(prevIndex => prevIndex - 1);\n//     //     // setTimer(timer)\n\n//     // }\n\n// // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\n// const currentQuestion = Qimages[currentQuestionIndex];\n// const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\n\n// const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n\n//     return (\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     <div>\n//                         <div className='subjects'>\n//                             <button className='subject-btn'>Mathematics</button>\n//                             <button className='subject-btn'>Physics</button>\n//                             <button className='subject-btn'>Chemistry</button>\n\n//                         </div>\n//                         <div className='second-header'>\n//                             <div className='single-select-question'>\n//                                 Single Select Question\n//                             </div>\n//                             <div className='right-header'>\n//                                 <div className='marks'>\n//                                     Marks: <div className='plus-mark'>+1</div>\n//                                     <div className='minus-mark'>-1</div>\n//                                 </div>\n//                                 {/* <div className='timer'>\n//                                     <h3>Time Left: {formatTime(countdown)}</h3>\n//                                 </div> */}\n//                             </div>\n//                         </div>\n//                         <div className='question-no'>\n//                             <span className=\"active-question-no\">Question No. {addLeadingZero(currentQuestionIndex + 1)}</span>\n//                             <span className=\"total-question\"> of {addLeadingZero(Qimages.length)}</span>\n//                         </div>\n\n//                         <div className='options-container'>\n\n//                             <h2 className='question'>\n//                                 {currentQuestion ? (\n//                                  <div>\n//                                         <img\n//                                             src={questionImageSrc}\n//                                             alt={`QImage ${currentQuestionIndex + 1}`}\n//                                         />\n//                                         <ul className='options-container'>\n//                                             {/* ... (options rendering logic) */}\n//                                             {OPTimages\n//                                                 .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                                                 .map((optImage, optIndex) => (\n\n//                                                     <li key={optImage}>\n//                                                         <input\n//                                                         name='index'\n//                                                             type=\"radio\"\n//                                                           />\n//                                                         <label className='alpha-index'>\n//                                                             <img\n//                                                                 src={`data:image/png;base64,${optImage.image_data}`}\n//                                                                 alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                                             />\n//                                                         </label>\n//                                                     </li>\n//                                                 ))}\n//                                         </ul>\n//                                  </div>\n//                                 ) : (\n//                                     // <p>Loading question...</p>\n\n//                                  <div className='loading-gif'>\n//                                             <DotSpinner\n//                                                 size={90}\n//                                                 speed={0.9}\n//                                                 color=\"black\"\n\n//                                             />\n//                                  </div>\n//                                 )}\n\n//                             </h2>\n//                             {/* <ul className='options-container'>\n//                                 ... (options rendering logic)\n//                                 {OPTimages\n//                                     .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                                     .map((optImage, optIndex) => (\n\n//                                         <li key={optIndex}>\n//                                             <input type=\"radio\" />\n//                                             <label className='alpha-index'>\n//                                                 <img\n//                                                     src={`data:image/png;base64,${optImage.image_data}`}\n//                                                     alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                                 />\n//                                             </label>\n//                                         </li>\n//                                     ))}\n//                             </ul> */}\n//                             {/* <button onClick={handleNextClick}>Next</button> */}\n//                         </div>\n//                         {/* a */}\n\n//                         <div className=\"flex-right\">\n//                             {/* <button className='clear-btn'>Mark for Review & Next</button>\n//                             <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\n//                             <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                                 <i class=\"fa-solid fa-angles-left\"></i>\n//                                 Previous\n//                             </button>\n//                             <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                                 {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\n//                             </button> */}\n// {/*\n//                             <button onClick={handlepreClick}>Previous</button>\n\n//                             <button onClick={handleNextClick}>Save&Next</button> */}\n\n//                         </div>\n//                     </div>\n\n//                 </div>\n//             </div>\n\n//             <div className='rightsidebar'><RightSidebar /></div>\n//             {/* onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} */}\n\n//         </div>\n//     );\n// };\n\n// export default Paper;\n\n// import React, { useEffect, useState } from 'react';\n// import './Paper.css';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import { DotSpinner } from '@uiball/loaders';\n\n// const Paper = () => {\n//     const [Qimages, setQImages] = useState([]);\n//     const [OPTimages, setOPTImages] = useState([]);\n//     const [activeQuestion, setActiveQuestion] = useState(0);\n//     const [selectedAnswers, setSelectedAnswers] = useState(Array(Qimages.length).fill(''));\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//     const [showResult, setShowResult] = useState(false);\n//     const [result, setResult] = useState({\n//         score: 0,\n//         correctAnswers: 0,\n//         wrongAnswers: 0,\n//     });\n//     const [timers, setTimers] = useState(new Array(Qimages.length).fill(0));\n//     const [timer, setTimer] = useState(0);\n\n//     useEffect(() => {\n//             // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//             const fetchQImages = async () => {\n//                 let fetchedQImages = [];\n\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                     try {\n//                         const response = await fetch(`http://localhost:7002/images/${i}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedQImages.push(data[0]); // Add only the first image from each set\n//                         }\n//                     } catch (error) {\n//                         console.error('Error fetching Qimages:', error);\n//                     }\n//                 }\n\n//                 setQImages(fetchedQImages);\n//             };\n\n//             // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//             const fetchOPTImages = async () => {\n//                 let fetchedOPTImages = [];\n\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                     try {\n//                         for (let j = i + 1; j <= i + 4; j++) {\n//                             const response = await fetch(`http://localhost:7002/images/${j}`);\n//                             const data = await response.json();\n//                             if (data.length > 0) {\n//                                 fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                             }\n//                         }\n//                     } catch (error) {\n//                         console.error('Error fetching OPTimages:', error);\n//                     }\n//                 }\n\n//                 setOPTImages(fetchedOPTImages);\n//             };\n\n//             fetchQImages();\n//             fetchOPTImages();\n//         }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     const onAnswerSelected = (OptionLetter) => {\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//         setSelectedAnswers(updatedSelectedAnswers);\n//     };\n\n//     const clearResponse = () => {\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = '';\n//         setSelectedAnswers(updatedSelectedAnswers);\n//     };\n\n//     const goToPreviousQuestion = () => {\n//         setCurrentQuestionIndex(prevIndex => {\n\n//             // Save the current timer value for the question\n\n//             const updatedTimers = [...timers];\n\n//             updatedTimers[prevIndex] = timer;\n\n//             setTimers(updatedTimers);\n\n//             // Move to the previous question\n\n//             return prevIndex - 1;\n\n//         });\n//         if (activeQuestion > 0) {\n//             setActiveQuestion(activeQuestion - 1);\n//         }\n//     };\n\n//     const onClickNext = () => {\n//         setCurrentQuestionIndex(prevIndex => {\n\n//             // Save the current timer value for the question\n\n//             const updatedTimers = [...timers];\n\n//             updatedTimers[prevIndex] = timer;\n\n//             setTimers(updatedTimers);\n\n//             // Move to the next question\n\n//             return prevIndex + 1;\n\n//         });\n//         const correctAnswer = Qimages[activeQuestion].correct_answer; // Replace 'correct_answer' with the actual property name\n//         const selectedAnswer = selectedAnswers[activeQuestion];\n\n//         if (selectedAnswer === correctAnswer) {\n//             setResult(prevResult => ({\n//                 ...prevResult,\n//                 score: prevResult.score + 5,\n//                 correctAnswers: prevResult.correctAnswers + 1\n//             }));\n//         } else {\n//             setResult(prevResult => ({\n//                 ...prevResult,\n//                 wrongAnswers: prevResult.wrongAnswers + 1\n//             }));\n//         }\n\n//         if (activeQuestion < Qimages.length - 1) {\n//             setActiveQuestion(prevActiveQuestion => prevActiveQuestion + 1);\n//         } else {\n//             setShowResult(true);\n//             calculateResult(); // Implement this function for additional result calculations\n//         }\n//     };\n\n//     const formatTime = (seconds) => {\n\n//         const hours = Math.floor(seconds / 3600);\n\n//         const minutes = Math.floor((seconds % 3600) / 60);\n\n//         const remainingSeconds = seconds % 60;\n\n//         return `${hours > 9 ? hours : '0' + hours}:${minutes > 9 ? minutes : '0' + minutes}:${remainingSeconds > 9 ? remainingSeconds : '0' + remainingSeconds}`;\n\n//     };\n\n//     // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\n//     const currentQuestion = Qimages[currentQuestionIndex];\n//     const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\n//     const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n\n//     const calculateResult = () => {\n//         // Implement additional result calculations here if needed\n//         // Example: Accuracy, Average Score, Top Score, Live Rank, etc.\n//     };\n\n//     return (\n//         <div className='main'>\n\n//             <div className='sub-main'>\n\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     <div>\n//                         <div className='subjects'>\n//                             <button className='subject-btn'>Mathematics</button>\n//                             <button className='subject-btn'>Physics</button>\n//                             <button className='subject-btn'>Chemistry</button>\n\n//                         </div>\n//                         <div className='second-header'>\n//                             <div className='single-select-question'>\n//                                 Single Select Question\n//                             </div>\n//                             <div className='right-header'>\n//                                 <div className='marks'>\n//                                     Marks: <div className='plus-mark'>+1</div>\n//                                     <div className='minus-mark'>-1</div>\n//                                 </div>\n//                                 <div>Timer: {formatTime(timer)}</div>\n//                             </div>\n//                         </div>\n//                         <div className='question-no'>\n//                             <span className=\"active-question-no\">Question No. {addLeadingZero(currentQuestionIndex + 1)}</span>\n//                             <span className=\"total-question\"> of {addLeadingZero(Qimages.length)}</span>\n//                         </div>\n\n//                         <div className='options-container'>\n\n//                             <h2 className='question'>\n//                                 {Qimages && Qimages.length > 0 && Qimages[activeQuestion] ? (\n\n//                                     <div>\n//                                         <img src={`data:image/png;base64,${Qimages[activeQuestion].image_data}`} alt={`QImage ${activeQuestion + 1}`} />\n//                                         <ul className='options-container'>\n//                                             {OPTimages.slice(activeQuestion * 4, activeQuestion * 4 + 4).map((optImage, optIndex) => (\n//                                                 <li key={optIndex}>\n//                                                     <input\n//                                                         type='radio'\n//                                                         name='index'\n//                                                         checked={selectedAnswers[activeQuestion] === String.fromCharCode(65 + optIndex)}\n//                                                         onChange={() => onAnswerSelected(String.fromCharCode(65 + optIndex))}\n//                                                     />\n//                                                     <label className='alpha-index'>\n//                                                         <img\n//                                                             src={`data:image/png;base64,${optImage.image_data}`}\n//                                                             alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                                         />\n//                                                     </label>\n//                                                 </li>\n//                                             ))}\n//                                         </ul>\n//                                     </div>\n\n//                                 ) : (\n\n//                                     <div className='loading-gif'>\n//                                         <DotSpinner\n//                                             size={90}\n//                                             speed={0.9}\n//                                             color=\"black\"\n//                                         />\n//                                     </div>\n//                                 )}\n//                             </h2>\n\n//                         </div>\n\n//                         <div className=\"flex-right\">\n\n//                         </div>\n//                     </div>\n\n//                 </div>\n\n//                 <div className='flex-right'>\n//                     <button className='clear-btn'>Mark for Review & Next</button>\n//                     <button className='clear-btn' onClick={clearResponse}>\n//                         Clear Response\n//                     </button>\n//                     <button className='previous-btn'  onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                         <i className='fa-solid fa-angles-left'></i> Previous\n//                     </button>\n//                     <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                         {activeQuestion === Qimages.length - 1 ? 'Submit' : 'Save & Next'}\n//                         <i className='fa-solid fa-angles-right'></i>\n//                     </button>\n//                 </div>\n//             </div>\n//             <div className='rightsidebar'>\n//                 <RightSidebar />\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Paper;\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport \"./Paper.css\";\nimport PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\nimport RightSidebar from \"../../Components/RightSidebar/RightSidebar\";\n// import \"../../Components/RightSidebar/RightSidebar.css\";\nimport { DotSpinner } from \"@uiball/loaders\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Paper = () => {\n  _s();\n  const [questionStatus, setQuestionStatus] = useState(Array(30).fill(\"notVisited\"));\n  const [Qimages, setQImages] = useState([]);\n  const [OPTimages, setOPTImages] = useState([]);\n  const [activeQuestion, setActiveQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState(Array(Qimages.length).fill(\"\"));\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [showResult, setShowResult] = useState(false);\n  const [result, setResult] = useState({\n    score: 0,\n    correctAnswers: 0,\n    wrongAnswers: 0\n  });\n  useEffect(() => {\n    // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n    const fetchQImages = async () => {\n      let fetchedQImages = [];\n      for (let i = 1; i <= 1000; i += 6) {\n        // Assuming there are 100 sets of images\n        try {\n          const response = await fetch(`http://localhost:10000/images/${i}`);\n          const data = await response.json();\n          if (data.length > 0) {\n            fetchedQImages.push(data[0]); // Add only the first image from each set\n          }\n        } catch (error) {\n          console.error(\"Error fetching Qimages:\", error);\n        }\n      }\n      setQImages(fetchedQImages);\n    };\n\n    // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n    const fetchOPTImages = async () => {\n      let fetchedOPTImages = [];\n      for (let i = 1; i <= 1000; i += 6) {\n        // Assuming there are 100 sets of images\n        try {\n          for (let j = i + 1; j <= i + 4; j++) {\n            const response = await fetch(`http://localhost:10000/images/${j}`);\n            const data = await response.json();\n            if (data.length > 0) {\n              fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n            }\n          }\n        } catch (error) {\n          console.error(\"Error fetching OPTimages:\", error);\n        }\n      }\n      setOPTImages(fetchedOPTImages);\n    };\n    fetchQImages();\n    fetchOPTImages();\n  }, []); // Empty dependency array to fetch data only once when the component mounts\n\n  const [timers, setTimers] = useState(new Array(Qimages.length).fill(0));\n  const [timer, setTimer] = useState(0);\n  const onAnswerSelected = OptionLetter => {\n    const updatedSelectedAnswers = [...selectedAnswers];\n    updatedSelectedAnswers[activeQuestion] = OptionLetter;\n    setSelectedAnswers(updatedSelectedAnswers);\n    const updatedQuestionStatus = [...questionStatus];\n    updatedQuestionStatus[activeQuestion] = \"answered\";\n    setQuestionStatus(updatedQuestionStatus);\n  };\n  const clearResponse = () => {\n    const updatedSelectedAnswers = [...selectedAnswers];\n    updatedSelectedAnswers[activeQuestion] = \"\";\n    setSelectedAnswers(updatedSelectedAnswers);\n  };\n  const goToPreviousQuestion = () => {\n    setCurrentQuestionIndex(prevIndex => {\n      // Save the current timer value for the question\n\n      const updatedTimers = [...timers];\n      updatedTimers[prevIndex] = timer;\n      setTimers(updatedTimers);\n\n      // Move to the previous question\n\n      return prevIndex - 1;\n    });\n    if (activeQuestion > 0) {\n      setActiveQuestion(activeQuestion - 1);\n    }\n  };\n  const onClickNext = () => {\n    setCurrentQuestionIndex(prevIndex => {\n      // Save the current timer value for the question\n\n      const updatedTimers = [...timers];\n      updatedTimers[prevIndex] = timer;\n      setTimers(updatedTimers);\n      return prevIndex + 1;\n    });\n\n    // Mark the question as not answered\n\n    const updatedQuestionStatus = [...questionStatus];\n    if (!selectedAnswers[activeQuestion] === \"answered\") {\n      updatedQuestionStatus[activeQuestion] = \"notAnswered\";\n    } else if (!markForReview() === true) {\n      markForReview();\n    } else if (selectedAnswers[activeQuestion]) {\n      updatedQuestionStatus[activeQuestion] = \"answered\";\n    } else if (!markForReview() === false) {\n      markForReview();\n    }\n    setQuestionStatus(updatedQuestionStatus);\n    const correctAnswer = Qimages[activeQuestion].correct_answer; // Replace 'correct_answer' with the actual property name\n    const selectedAnswer = selectedAnswers[activeQuestion];\n    if (selectedAnswer === correctAnswer) {\n      setResult(prevResult => ({\n        ...prevResult,\n        score: prevResult.score + 5,\n        correctAnswers: prevResult.correctAnswers + 1\n      }));\n    } else {\n      setResult(prevResult => ({\n        ...prevResult,\n        wrongAnswers: prevResult.wrongAnswers + 1\n      }));\n    }\n    if (activeQuestion < Qimages.length - 1) {\n      setActiveQuestion(prevActiveQuestion => prevActiveQuestion + 1);\n    } else {\n      setShowResult(true);\n      calculateResult();\n    }\n  };\n  const markForReview = () => {\n    // Update questionStatus for the marked question\n    const updatedQuestionStatus = [...questionStatus];\n    if (selectedAnswers[activeQuestion]) {\n      updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n      // if(selectedAnswers[activeQuestion] === \"Answered but marked for review\"){\n      //   updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n      // }\n    } else if (!selectedAnswers[activeQuestion]) {\n      updatedQuestionStatus[activeQuestion] = \"marked\";\n    }\n    setQuestionStatus(updatedQuestionStatus);\n  };\n\n  // const formatTime = (seconds) => {\n  //   const hours = Math.floor(seconds / 3600);\n\n  //   const minutes = Math.floor((seconds % 3600) / 60);\n\n  //   const remainingSeconds = seconds % 60;\n\n  //   return `${hours > 9 ? hours : \"0\" + hours}:${\n  //     minutes > 9 ? minutes : \"0\" + minutes\n  //   }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n  // };\n\n  // useEffect(() => {\n  //   // Set the timer to the saved value for the current question\n\n  //   setTimer(timers[currentQuestionIndex] || 0);\n\n  //   let interval;\n\n  //   interval = setInterval(() => {\n  //     setTimer((prevTimer) => prevTimer + 1);\n  //   }, 1000);\n\n  //   // Clear the interval when the component unmounts or when the user moves to the next question\n\n  //   return () => {\n  //     clearInterval(interval);\n  //   };\n  // }, [currentQuestionIndex, timers]);\n\n  // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\n  const currentQuestion = Qimages[currentQuestionIndex];\n  const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : \"\";\n  const addLeadingZero = number => number > 9 ? number : `0${number}`;\n  const calculateResult = () => {\n    // Implement additional result calculations here if needed\n    // Example: Accuracy, Average Score, Top Score, Live Rank, etc.\n  };\n\n  // Timer for whole page\n\n  //   const totalTime = 180 * 60; // 180 minutes in seconds\n  //   const [wtimer, setWTimer] = useState(totalTime);\n\n  //   useEffect(() => {\n  //     const interval = setInterval(() => {\n  //       setWTimer((prevTimer) => prevTimer - 1);\n  //     }, 1000);\n\n  //     // Clear the interval and handle time-up logic when timer reaches 0\n  //     if (timer <= 0) {\n  //       clearInterval(interval);\n  //       // Handle time-up logic here (e.g., navigate to a different component)\n  //     }\n\n  //     // Clean up the interval on component unmount or when navigating away\n  //     return () => {\n  //       clearInterval(interval);\n  //     };\n  //   }, [timer]);\n\n  //   const WformatTime = (seconds) => {\n  //     const hours = Math.floor(seconds / 3600);\n  //     const minutes = Math.floor((seconds % 3600) / 60);\n  //     const remainingSeconds = seconds % 60;\n  //     return `${hours > 9 ? hours : '0' + hours}:${minutes > 9 ? minutes : '0' + minutes}:${remainingSeconds > 9 ? remainingSeconds : '0' + remainingSeconds}`;\n  //   };\n\n  // const [answeredQuestions, setAnsweredQuestions] = useState([]);\n\n  // const handleButtonClick = (questionNumber) => {\n  //   onQuestionSelect(questionNumber);\n  //   setAnsweredQuestions([...answeredQuestions, questionNumber]);\n  // };\n\n  // const buttons = [\n  //   1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\n  //   22, 23, 24, 25, 26, 27, 28, 29, 30,\n  // ];\n  // const renderList = buttons.map((item, index) => {\n  //   let className = \"quesAns-btn\";\n  //   if (questionStatus && questionStatus[index] === \"answered\") {\n  //     className += \"answered\";\n  //   }\n  //   return (\n  //     <div>\n  //       <button className={className} onClick={() => handleButtonClick(item)}>\n  //         {item}\n  //       </button>\n  //     </div>\n  //   );\n  // });\n\n  const [opensubject_1, setOpensubject_1] = useState(true);\n  const [opensubject_2, setOpensubject_2] = useState(false);\n  const [opensubject_3, setOpensubject_3] = useState(false);\n  const openAlertSubject1 = () => {\n    setOpensubject_1(true);\n    setOpensubject_2(false);\n    setOpensubject_3(false);\n  };\n  const openAlertSubject2 = () => {\n    setOpensubject_2(true);\n    setOpensubject_1(false);\n    setOpensubject_3(false);\n  };\n  const openAlertSubject3 = () => {\n    setOpensubject_3(true);\n    setOpensubject_2(false);\n    setOpensubject_1(false);\n  };\n  const handleQuestionSelect = questionNumber => {\n    setCurrentQuestionIndex(questionNumber - 1);\n    setActiveQuestion(questionNumber - 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sub-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(PaperHeader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1551,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1550,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"subjects\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"subject-btn\",\n              onClick: openAlertSubject1,\n              children: \"Mathematics\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1556,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"subject-btn\",\n              onClick: openAlertSubject2,\n              children: \"Physics\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1557,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"subject-btn\",\n              onClick: openAlertSubject3,\n              children: \"Chemistry\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1558,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1555,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"second-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"single-select-question\",\n              children: \"Single Select Question\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1561,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"right-header\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"marks\",\n                children: [\"Marks: \", /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"plus-mark\",\n                  children: \"+1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1566,\n                  columnNumber: 26\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"minus-mark\",\n                  children: \"-1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1567,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1565,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1564,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1560,\n            columnNumber: 13\n          }, this), opensubject_1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Subject-Container\",\n            children: [\"maths\", /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"question-no\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"active-question-no\",\n                children: [\"Question No. \", addLeadingZero(currentQuestionIndex + 1)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1587,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"total-question\",\n                children: [\" \", \"of \", addLeadingZero(Qimages.length)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1590,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1585,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"question\",\n              children: Qimages && Qimages.length > 0 && Qimages[activeQuestion] ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: `data:image/png;base64,${Qimages[activeQuestion].image_data}`,\n                  alt: `QImage ${activeQuestion + 1}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1598,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                  className: \"options-container\",\n                  children: OPTimages.slice(activeQuestion * 4, activeQuestion * 4 + 4).map((optImage, optIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"radio\",\n                      name: \"index\",\n                      checked: selectedAnswers[activeQuestion] === String.fromCharCode(65 + optIndex),\n                      onChange: () => onAnswerSelected(String.fromCharCode(65 + optIndex))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1608,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"alpha-index\",\n                      children: /*#__PURE__*/_jsxDEV(\"img\", {\n                        src: `data:image/png;base64,${optImage.image_data}`,\n                        alt: `OPTImage ${optIndex + 2}-${optIndex + 5}`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1622,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1621,\n                      columnNumber: 27\n                    }, this)]\n                  }, optIndex, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1607,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1602,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1597,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"loading-gif\",\n                children: /*#__PURE__*/_jsxDEV(DotSpinner, {\n                  size: 90,\n                  speed: 0.9,\n                  color: \"black\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1633,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1632,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1595,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1583,\n            columnNumber: 2\n          }, this) : null, opensubject_2 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Subject-Container\",\n            children: [\"Physics\", /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"question-no\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"active-question-no\",\n                children: [\"Question No. \", addLeadingZero(currentQuestionIndex + 1)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1647,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"total-question\",\n                children: [\" \", \"of \", addLeadingZero(Qimages.length)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1650,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1645,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"question\",\n              children: Qimages && Qimages.length > 0 && Qimages[activeQuestion] ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: `data:image/png;base64,${Qimages[activeQuestion].image_data}`,\n                  alt: `QImage ${activeQuestion + 1}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1658,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                  className: \"options-container\",\n                  children: OPTimages.slice(activeQuestion * 4, activeQuestion * 4 + 4).map((optImage, optIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"radio\",\n                      name: \"index\",\n                      checked: selectedAnswers[activeQuestion] === String.fromCharCode(65 + optIndex),\n                      onChange: () => onAnswerSelected(String.fromCharCode(65 + optIndex))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1668,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"alpha-index\",\n                      children: /*#__PURE__*/_jsxDEV(\"img\", {\n                        src: `data:image/png;base64,${optImage.image_data}`,\n                        alt: `OPTImage ${optIndex + 2}-${optIndex + 5}`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1682,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1681,\n                      columnNumber: 27\n                    }, this)]\n                  }, optIndex, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1667,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1662,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1657,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"loading-gif\",\n                children: /*#__PURE__*/_jsxDEV(DotSpinner, {\n                  size: 90,\n                  speed: 0.9,\n                  color: \"black\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1693,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1692,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1655,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1643,\n            columnNumber: 2\n          }, this) : null, opensubject_3 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Subject-Container\",\n            children: [\"Chemistry\", /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"question-no\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"active-question-no\",\n                children: [\"Question No. \", addLeadingZero(currentQuestionIndex + 1)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1707,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"total-question\",\n                children: [\" \", \"of \", addLeadingZero(Qimages.length)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1710,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1705,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"question\",\n              children: Qimages && Qimages.length > 0 && Qimages[activeQuestion] ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: `data:image/png;base64,${Qimages[activeQuestion].image_data}`,\n                  alt: `QImage ${activeQuestion + 1}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1718,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                  className: \"options-container\",\n                  children: OPTimages.slice(activeQuestion * 4, activeQuestion * 4 + 4).map((optImage, optIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"radio\",\n                      name: \"index\",\n                      checked: selectedAnswers[activeQuestion] === String.fromCharCode(65 + optIndex),\n                      onChange: () => onAnswerSelected(String.fromCharCode(65 + optIndex))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1728,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"alpha-index\",\n                      children: /*#__PURE__*/_jsxDEV(\"img\", {\n                        src: `data:image/png;base64,${optImage.image_data}`,\n                        alt: `OPTImage ${optIndex + 2}-${optIndex + 5}`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1742,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1741,\n                      columnNumber: 27\n                    }, this)]\n                  }, optIndex, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1727,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1722,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1717,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"loading-gif\",\n                children: /*#__PURE__*/_jsxDEV(DotSpinner, {\n                  size: 90,\n                  speed: 0.9,\n                  color: \"black\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1753,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1752,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1715,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1703,\n            columnNumber: 2\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex-right\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1762,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1554,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1553,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-right\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"clear-btn\",\n          onClick: markForReview,\n          children: \"Mark for Review & Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1767,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"clear-btn\",\n          onClick: clearResponse,\n          children: \"Clear Response\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1768,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"previous-btn\",\n          onClick: goToPreviousQuestion,\n          disabled: activeQuestion === 0,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa-solid fa-angles-left\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1776,\n            columnNumber: 13\n          }, this), \" Previous\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1771,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-btn\",\n          onClick: onClickNext\n          // disabled={!selectedAnswers[activeQuestion]}\n          ,\n          children: [activeQuestion === Qimages.length - 1 ? \"Submit\" : \"Save & Next\", /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa-solid fa-angles-right\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1784,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1778,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1766,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1549,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rightsidebar\",\n      children: /*#__PURE__*/_jsxDEV(RightSidebar, {\n        onQuestionSelect: handleQuestionSelect,\n        questionStatus: questionStatus,\n        setQuestionStatus: setQuestionStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1789,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1788,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1548,\n    columnNumber: 5\n  }, this);\n};\n_s(Paper, \"T3jStIuzsGEGH5cJp11vAofE+84=\");\n_c = Paper;\nexport default Paper;\nvar _c;\n$RefreshReg$(_c, \"Paper\");","map":{"version":3,"names":["React","useEffect","useState","useRef","PaperHeader","RightSidebar","DotSpinner","jsxDEV","_jsxDEV","Paper","_s","questionStatus","setQuestionStatus","Array","fill","Qimages","setQImages","OPTimages","setOPTImages","activeQuestion","setActiveQuestion","selectedAnswers","setSelectedAnswers","length","currentQuestionIndex","setCurrentQuestionIndex","showResult","setShowResult","result","setResult","score","correctAnswers","wrongAnswers","fetchQImages","fetchedQImages","i","response","fetch","data","json","push","error","console","fetchOPTImages","fetchedOPTImages","j","timers","setTimers","timer","setTimer","onAnswerSelected","OptionLetter","updatedSelectedAnswers","updatedQuestionStatus","clearResponse","goToPreviousQuestion","prevIndex","updatedTimers","onClickNext","markForReview","correctAnswer","correct_answer","selectedAnswer","prevResult","prevActiveQuestion","calculateResult","currentQuestion","questionImageSrc","image_data","addLeadingZero","number","opensubject_1","setOpensubject_1","opensubject_2","setOpensubject_2","opensubject_3","setOpensubject_3","openAlertSubject1","openAlertSubject2","openAlertSubject3","handleQuestionSelect","questionNumber","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","slice","map","optImage","optIndex","type","name","checked","String","fromCharCode","onChange","size","speed","color","disabled","onQuestionSelect","_c","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/egate_Quiz_project/src/Pages/Paper/Paper.jsx"],"sourcesContent":["// test commit\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import quiz from '../../Data/quesAns'\r\n// import './Paper.css'\r\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\r\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader'\r\n\r\n// // Defining Timer code\r\n// const formatTime = (time) => {\r\n//     let minutes = Math.floor(time / 60);\r\n//     let seconds = Math.floor(time - minutes * 60);\r\n\r\n//     if (minutes < 10) minutes = '0' + minutes;\r\n//     if (seconds < 10) seconds = '0' + seconds;\r\n//     return minutes + ':' + seconds;\r\n// }; // End of Defining Timer code\r\n\r\n// const Paper = ({ seconds, answeredQuestions }) => {\r\n\r\n//     const [activeQuestion, setActiveQuestion] = useState(0);\r\n//     const handleQuestionSelect = (questionNumber) => {\r\n//         setActiveQuestion(questionNumber - 1);\r\n//     }\r\n\r\n//     // const [questionStatus, setQuestionStatus] = useState(Array(30).fill('notAnswered'))\r\n//     // const [activeQuestion, setActiveQuestion] = useState(0)\r\n//     // const [selectedAnswer, setSelectedAnswer] = useState('')\r\n\r\n//     const [selectedAnswers, setSelectedAnswers] = useState(new Array(quiz.questions.length).fill(''));\r\n//     const [showResult, setShowResult] = useState(false)\r\n//     const [result, setResult] = useState({\r\n//         score: 0,\r\n//         correctAnswers: 0,\r\n//         wrongAnswers: 0,\r\n//     })\r\n\r\n//     const { questions } = quiz\r\n//     const { question, choices, correctAnswer } = questions[activeQuestion]\r\n//     const onClickNext = () => {\r\n//         setResult((prev) =>\r\n//             selectedAnswers[activeQuestion] === correctAnswer\r\n//                 ? {\r\n//                     ...prev,\r\n//                     score: prev.score + 5,\r\n//                     correctAnswers: prev.correctAnswers + 1,\r\n//                 }\r\n//                 : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\r\n//         );\r\n//         if (activeQuestion !== questions.length - 1) {\r\n//             setActiveQuestion((prev) => prev + 1);\r\n//         } else {\r\n//             // setActiveQuestion(0);\r\n//             setShowResult(true);\r\n//             calculateResult();//new added code\r\n//         }\r\n//     };\r\n\r\n//     const onAnswerSelected = (OptionLetter) => {\r\n//         // Update the selected answer for the current question\r\n//         const updatedSelectedAnswers = [...selectedAnswers];\r\n//         updatedSelectedAnswers[activeQuestion] = OptionLetter;\r\n//         setSelectedAnswers(updatedSelectedAnswers);\r\n//         // setSelectedAnswers(updatedSelectedAnswers, OptionLetter);\r\n\r\n//     };\r\n\r\n//     const clearResponse = () => {\r\n//         // Clear the response for the current question\r\n//         const updatedSelectedAnswers = [...selectedAnswers];\r\n//         updatedSelectedAnswers[activeQuestion] = '';\r\n//         setSelectedAnswers(updatedSelectedAnswers);\r\n//     };\r\n\r\n//     const goToPreviousQuestion = () => {\r\n//         // Move to the previous question\r\n//         if (activeQuestion > 0) {\r\n//             setActiveQuestion((prev) => prev - 1);\r\n//         }\r\n//     };\r\n\r\n//     const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\r\n//     const [countdown, setCountDown] = useState(seconds);\r\n//     useEffect(() => {\r\n//         const timerId = setInterval(() => {\r\n//             setCountDown((prevCountDown) =>\r\n//                 prevCountDown - 1\r\n//             );\r\n//         }, 1000)\r\n//         return () => {\r\n//             clearInterval(timerId);\r\n//         };\r\n//     }, [])\r\n\r\n//     useEffect(() => {\r\n//         if (countdown <= 0) {\r\n//             setShowResult(true);\r\n//             // clearInterval(timerId.current);\r\n//             // alert(\"End\");\r\n//         }\r\n//     }, [countdown]);\r\n\r\n//    // NEW ADDED CODE\r\n\r\n//     // const [showResult, setShowResult] = useState(false);\r\n//     const [accuracy, setAccuracy] = useState(0);\r\n//     const [averageScore, setAverageScore] = useState(0);\r\n//     const [topScore, setTopScore] = useState(0);\r\n//     const [liveRank, setLiveRank] = useState(0);\r\n\r\n//     const calculateResult = () => {\r\n//         // Calculate accuracy\r\n//         const totalAttempted = answeredQuestions.length;\r\n//         const totalCorrect = result.correctAnswers;\r\n//         const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\r\n//         setAccuracy(calculatedAccuracy.toFixed(2));\r\n\r\n//         // Calculate average score\r\n//         const calculatedAverageScore = result.score / totalAttempted;\r\n//         setAverageScore(calculatedAverageScore.toFixed(2));\r\n\r\n//         // Placeholder for live ranking data - Replace this with actual data\r\n//         const calculatedTopScore = 100;\r\n//         const calculatedLiveRank = 1;\r\n\r\n//         setTopScore(calculatedTopScore);\r\n//         setLiveRank(calculatedLiveRank);\r\n//     };\r\n\r\n//     // const onClickSubmit = () => {\r\n//     //     calculateResult();\r\n//     //     setShowResult(true);\r\n//     // };\r\n\r\n//     return (\r\n\r\n//         <div className='main'>\r\n//             <div className='sub-main'>\r\n//                 <div><PaperHeader /></div>\r\n//                 <div className=\"quiz-container\">\r\n//                     {!showResult ? (\r\n//                         <div>\r\n//                             <div className='subjects'>\r\n//                                 <button className='subject-btn'>Mathematics</button>\r\n//                                 <button className='subject-btn'>Physics</button>\r\n//                                 <button className='subject-btn'>Chemistry</button>\r\n//                             </div>\r\n//                             <div className='second-header'>\r\n//                                 <div className='single-select-question'>\r\n//                                     Single Select Question\r\n//                                 </div>\r\n//                                 <div className='right-header'>\r\n//                                     <div className='marks'>\r\n//                                         Marks: <div className='plus-mark'>+1</div>\r\n//                                         <div className='minus-mark'>-1</div>\r\n//                                     </div>\r\n//                                     <div className='timer'>\r\n//                                         <h3>Time Left: {formatTime(countdown)}</h3>\r\n//                                     </div>\r\n//                                 </div>\r\n//                             </div>\r\n//                             <div className='question-no'>\r\n//                                 <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\r\n//                                 <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\r\n//                             </div>\r\n\r\n//                             <h2 className='question'><img src={question} alt=\"question\" /></h2>\r\n\r\n//                             <ul className='options-container'>\r\n//                                 {choices.map((answer, index) => (\r\n//                                     <li key={answer}>\r\n//                                         <input type=\"radio\"\r\n//                                             // id={answer}\r\n//                                             id={`option-${index}`}\r\n//                                             name='answer'\r\n//                                             value={answer}\r\n//                                             checked={selectedAnswers[activeQuestion] === answer}\r\n//                                             onChange={() => onAnswerSelected(answer)} />\r\n\r\n//                                         <label className='alpha-index' htmlFor={`option-${index}`}>\r\n//                                             {/* htmlFor={answer} */}\r\n//                                             {String.fromCharCode(65 + index)}.\r\n//                                             <img src={answer} alt=\"answer\" />\r\n//                                         </label>\r\n//                                     </li>\r\n//                                 ))}\r\n//                             </ul>\r\n\r\n//                             <div className=\"flex-right\">\r\n//                                 <button className='clear-btn'>Mark for Review & Next</button>\r\n//                                 <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\r\n//                                 <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\r\n//                                     <i class=\"fa-solid fa-angles-left\"></i>\r\n//                                     Previous\r\n//                                 </button>\r\n//                                 <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\r\n//                                     {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\r\n//                                 </button>\r\n\r\n//                             </div>\r\n//                         </div>\r\n//                     ) : (\r\n//                         <div className=\"result\">\r\n//                             <h3>Result</h3>\r\n//                             <p>\r\n//                                 Total Questions: <span>{questions.length}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Total Score:<span> {result.score}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Correct Answers:<span> {result.correctAnswers}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Wrong Answers:<span> {result.wrongAnswers}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Accuracy:<span> {accuracy}%</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Average Score:<span> {averageScore}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Top Score:<span> {topScore}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Live Rank:<span> {liveRank}</span>\r\n//                             </p>\r\n//                         </div>\r\n//                     )}\r\n//                 </div>\r\n//             </div>\r\n//             <div className='rightsidebar'><RightSidebar onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} /></div>\r\n//         </div>\r\n\r\n//     )\r\n// }\r\n\r\n// export default Paper\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// // import quiz from '../../Data/quesAns'\r\n// import './Paper.css'\r\n// // import RightSidebar from '../../Components/RightSidebar/RightSidebar';\r\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader'\r\n\r\n// // Defining Timer code\r\n// // const formatTime = (time) => {\r\n// //     let minutes = Math.floor(time / 60);\r\n// //     let seconds = Math.floor(time - minutes * 60);\r\n\r\n// //     if (minutes < 10) minutes = '0' + minutes;\r\n// //     if (seconds < 10) seconds = '0' + seconds;\r\n// //     return minutes + ':' + seconds;\r\n// // }; // End of Defining Timer code\r\n\r\n// const Paper = () => {\r\n\r\n//     // const [activeQuestion, setActiveQuestion] = useState(0);\r\n//     // const handleQuestionSelect = (questionNumber) => {\r\n//     //     setActiveQuestion(questionNumber - 1);\r\n//     // }\r\n\r\n//     // const [questionStatus, setQuestionStatus] = useState(Array(30).fill('notAnswered'))\r\n//     // const [activeQuestion, setActiveQuestion] = useState(0)\r\n//     // const [selectedAnswer, setSelectedAnswer] = useState('')\r\n\r\n//     // const [selectedAnswers, setSelectedAnswers] = useState(new Array(quiz.questions.length).fill(''));\r\n//     // const [showResult, setShowResult] = useState(false)\r\n//     // const [result, setResult] = useState({\r\n//     //     score: 0,\r\n//     //     correctAnswers: 0,\r\n//     //     wrongAnswers: 0,\r\n//     // })\r\n\r\n//     // const { questions } = quiz\r\n//     // const { Qimages, OPTimages, correctAnswer } = [activeQuestion]\r\n//     // const onClickNext = () => {\r\n//     //     setResult((prev) =>\r\n//     //         selectedAnswers[activeQuestion] === correctAnswer\r\n//     //             ? {\r\n//     //                 ...prev,\r\n//     //                 score: prev.score + 5,\r\n//     //                 correctAnswers: prev.correctAnswers + 1,\r\n//     //             }\r\n//     //             : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\r\n//     //     );\r\n//     //     if (activeQuestion !== questions.length - 1) {\r\n//     //         setActiveQuestion((prev) => prev + 1);\r\n//     //     } else {\r\n//     //         // setActiveQuestion(0);\r\n//     //         setShowResult(true);\r\n//     //         calculateResult();//new added code\r\n//     //     }\r\n//     // };\r\n\r\n//     // const onAnswerSelected = (OptionLetter) => {\r\n//     //     // Update the selected answer for the current question\r\n//     //     const updatedSelectedAnswers = [...selectedAnswers];\r\n//     //     updatedSelectedAnswers[activeQuestion] = OptionLetter;\r\n//     //     setSelectedAnswers(updatedSelectedAnswers);\r\n//     //     // setSelectedAnswers(updatedSelectedAnswers, OptionLetter);\r\n\r\n//     // };\r\n\r\n//     // const clearResponse = () => {\r\n//     //     // Clear the response for the current question\r\n//     //     const updatedSelectedAnswers = [...selectedAnswers];\r\n//     //     updatedSelectedAnswers[activeQuestion] = '';\r\n//     //     setSelectedAnswers(updatedSelectedAnswers);\r\n//     // };\r\n\r\n//     // const goToPreviousQuestion = () => {\r\n//     //     // Move to the previous question\r\n//     //     if (activeQuestion > 0) {\r\n//     //         setActiveQuestion((prev) => prev - 1);\r\n//     //     }\r\n//     // };\r\n\r\n//     // const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\r\n//     // const [countdown, setCountDown] = useState(seconds);\r\n//     // useEffect(() => {\r\n//     //     const timerId = setInterval(() => {\r\n//     //         setCountDown((prevCountDown) =>\r\n//     //             prevCountDown - 1\r\n//     //         );\r\n//     //     }, 1000)\r\n//     //     return () => {\r\n//     //         clearInterval(timerId);\r\n//     //     };\r\n//     // }, [])\r\n\r\n//     // useEffect(() => {\r\n//     //     if (countdown <= 0) {\r\n//     //         setShowResult(true);\r\n//     //         // clearInterval(timerId.current);\r\n//     //         // alert(\"End\");\r\n//     //     }\r\n//     // }, [countdown]);\r\n\r\n//     // NEW ADDED CODE\r\n\r\n//     // const [showResult, setShowResult] = useState(false);\r\n//     // const [accuracy, setAccuracy] = useState(0);\r\n//     // const [averageScore, setAverageScore] = useState(0);\r\n//     // const [topScore, setTopScore] = useState(0);\r\n//     // const [liveRank, setLiveRank] = useState(0);\r\n\r\n//     // const calculateResult = () => {\r\n//     //     // Calculate accuracy\r\n//     //     const totalAttempted = answeredQuestions.length;\r\n//     //     const totalCorrect = result.correctAnswers;\r\n//     //     const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\r\n//     //     setAccuracy(calculatedAccuracy.toFixed(2));\r\n\r\n//     //     // Calculate average score\r\n//     //     const calculatedAverageScore = result.score / totalAttempted;\r\n//     //     setAverageScore(calculatedAverageScore.toFixed(2));\r\n\r\n//     //     // Placeholder for live ranking data - Replace this with actual data\r\n//     //     const calculatedTopScore = 100;\r\n//     //     const calculatedLiveRank = 1;\r\n\r\n//     //     setTopScore(calculatedTopScore);\r\n//     //     setLiveRank(calculatedLiveRank);\r\n//     // };\r\n\r\n//     // const onClickSubmit = () => {\r\n//     //     calculateResult();\r\n//     //     setShowResult(true);\r\n//     // };\r\n\r\n//     const [Qimages,setQImages] = useState([]);\r\n//     const [OPTimages,setOPTImages] = useState([]);\r\n\r\n//     useEffect(() => {\r\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\r\n//         const fetchQImages = async () => {\r\n//             let fetchedQImages = [];\r\n\r\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\r\n//                 try {\r\n//                     const response = await fetch(`http://localhost:7000/images/${i}`);\r\n//                     const data = await response.json();\r\n//                     if (data.length > 0) {\r\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\r\n//                     }\r\n//                 } catch (error) {\r\n//                     console.error('Error fetching Qimages:', error);\r\n//                 }\r\n//             }\r\n\r\n//             setQImages(fetchedQImages);\r\n//         };\r\n\r\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\r\n//         const fetchOPTImages = async () => {\r\n//             let fetchedOPTImages = [];\r\n\r\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\r\n//                 try {\r\n//                     for (let j = i + 1; j <= i + 4; j++) {\r\n//                         const response = await fetch(`http://localhost:7000/images/${j}`);\r\n//                         const data = await response.json();\r\n//                         if (data.length > 0) {\r\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\r\n//                         }\r\n//                     }\r\n//                 } catch (error) {\r\n//                     console.error('Error fetching OPTimages:', error);\r\n//                 }\r\n//             }\r\n\r\n//             setOPTImages(fetchedOPTImages);\r\n//         };\r\n\r\n//         fetchQImages();\r\n//         fetchOPTImages();\r\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\r\n\r\n//     return (\r\n\r\n//         <div className='main'>\r\n//             <div className='sub-main'>\r\n//                 <div><PaperHeader /></div>\r\n//                 <div className=\"quiz-container\">\r\n//                     {/* {!showResult ? ( */}\r\n//                         <div>\r\n//                             <div className='subjects'>\r\n//                                 <button className='subject-btn'>Mathematics</button>\r\n//                                 <button className='subject-btn'>Physics</button>\r\n//                                 <button className='subject-btn'>Chemistry</button>\r\n//                             </div>\r\n//                             <div className='second-header'>\r\n//                                 <div className='single-select-question'>\r\n//                                     Single Select Question\r\n//                                 </div>\r\n//                                 {/* <div className='right-header'>\r\n//                                     <div className='marks'>\r\n//                                         Marks: <div className='plus-mark'>+1</div>\r\n//                                         <div className='minus-mark'>-1</div>\r\n//                                     </div>\r\n//                                     <div className='timer'>\r\n//                                         <h3>Time Left: {formatTime(countdown)}</h3>\r\n//                                     </div>\r\n//                                 </div> */}\r\n//                             </div>\r\n//                             {/* <div className='question-no'>\r\n//                                 <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\r\n//                                 <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\r\n//                             </div> */}\r\n\r\n//                             {Qimages.map((qImage, index) => (\r\n//                                 <div key={index}>\r\n//                                     {/* <h2>QImage {index + 1}</h2> */}\r\n//                                     {/* <div className='question-no'>\r\n//                                         <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\r\n//                                         <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\r\n//                                     </div> */}\r\n//                                     <h2 className='question'> <img\r\n//                                         src={`data:image/png;base64,${qImage.image_data}`}\r\n//                                         alt={`QImage ${index + 1}`}\r\n//                                     /></h2>\r\n\r\n//                                     <ul className='options-container'>\r\n//                                         {OPTimages.slice(index * 4, index * 4 + 4).map((optImage, optIndex) => (\r\n//                                             <li>\r\n//                                                 <input type=\"radio\"\r\n//                                                 // // id={answer}\r\n//                                                 //     id={`option-${index}`}\r\n//                                                 //     name='answer'\r\n//                                                 //     value={optImage}\r\n//                                                 //     checked={selectedAnswers[activeQuestion] === optImage}\r\n//                                                 //     onChange={() => onAnswerSelected(optImage)}\r\n//                                                 />\r\n\r\n//                                                 <label className='alpha-index' >\r\n//                                                     <img\r\n//                                                         key={optIndex}\r\n//                                                         src={`data:image/png;base64,${optImage.image_data}`}\r\n//                                                         alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\r\n//                                                     />\r\n//                                                 </label>\r\n//                                             </li>\r\n//                                         ))}\r\n//                                     </ul>\r\n//                                 </div>\r\n//                             ))}\r\n\r\n//                             {/* <div className=\"flex-right\">\r\n//                                 <button className='clear-btn'>Mark for Review & Next</button>\r\n//                                 <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\r\n//                                 <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\r\n//                                     <i class=\"fa-solid fa-angles-left\"></i>\r\n//                                     Previous\r\n//                                 </button>\r\n//                                 <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\r\n//                                     {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\r\n//                                 </button>\r\n\r\n//                             </div> */}\r\n//                         </div>\r\n//                     {/* ) : ( */}\r\n//                         {/* <div className=\"result\"> */}\r\n//                             {/* <h3>Result</h3>\r\n//                             <p>\r\n//                                 Total Questions: <span>{questions.length}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Total Score:<span> {result.score}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Correct Answers:<span> {result.correctAnswers}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Wrong Answers:<span> {result.wrongAnswers}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Accuracy:<span> {accuracy}%</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Average Score:<span> {averageScore}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Top Score:<span> {topScore}</span>\r\n//                             </p>\r\n//                             <p>\r\n//                                 Live Rank:<span> {liveRank}</span>\r\n//                             </p> */}\r\n//                         {/* </div> */}\r\n//                     {/* )} */}\r\n//                 </div>\r\n//             </div>\r\n//             {/* <div className='rightsidebar'><RightSidebar onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} /></div> */}\r\n//         </div>\r\n\r\n//     )\r\n// }\r\n\r\n// export default Paper\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import './Paper.css';\r\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\r\n\r\n// const Paper = () => {\r\n//     const [Qimages, setQImages] = useState([]);\r\n//     const [OPTimages, setOPTImages] = useState([]);\r\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n\r\n//         useEffect(() => {\r\n//             // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\r\n//             const fetchQImages = async () => {\r\n//                 let fetchedQImages = [];\r\n\r\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\r\n//                     try {\r\n//                         const response = await fetch(`http://localhost:7000/images/${i}`);\r\n//                         const data = await response.json();\r\n//                         if (data.length > 0) {\r\n//                             fetchedQImages.push(data[0]); // Add only the first image from each set\r\n//                         }\r\n//                     } catch (error) {\r\n//                         console.error('Error fetching Qimages:', error);\r\n//                     }\r\n//                 }\r\n\r\n//                 setQImages(fetchedQImages);\r\n//             };\r\n\r\n//             // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\r\n//             const fetchOPTImages = async () => {\r\n//                 let fetchedOPTImages = [];\r\n\r\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\r\n//                     try {\r\n//                         for (let j = i + 1; j <= i + 4; j++) {\r\n//                             const response = await fetch(`http://localhost:7000/images/${j}`);\r\n//                             const data = await response.json();\r\n//                             if (data.length > 0) {\r\n//                                 fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\r\n//                             }\r\n//                         }\r\n//                     } catch (error) {\r\n//                         console.error('Error fetching OPTimages:', error);\r\n//                     }\r\n//                 }\r\n\r\n//                 setOPTImages(fetchedOPTImages);\r\n//             };\r\n\r\n//             fetchQImages();\r\n//             fetchOPTImages();\r\n//         }, []); // Empty dependency array to fetch data only once when the component mounts\r\n\r\n//     const handleNextClick = () => {\r\n//         // Move to the next question when the \"Next\" button is clicked\r\n//         setCurrentQuestionIndex(prevIndex => prevIndex + 1);\r\n//     };\r\n\r\n//     return (\r\n//         <div className='main'>\r\n//             {/* ... */}\r\n//             <div><PaperHeader /></div>\r\n//             <div className='options-container'>\r\n//                 {/* Display only the current question and its options */}\r\n//                 <h2 className='question'>\r\n//                     <img\r\n//                         src={`data:image/png;base64,${Qimages[currentQuestionIndex].image_data}`}\r\n//                         alt={`QImage ${currentQuestionIndex + 1}`}\r\n//                     />\r\n//                 </h2>\r\n//                 <ul className='options-container'>\r\n//                     {OPTimages\r\n//                         .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\r\n//                         .map((optImage, optIndex) => (\r\n//                             <li key={optIndex}>\r\n//                                 <input type=\"radio\" />\r\n//                                 <label className='alpha-index'>\r\n//                                     <img\r\n//                                         src={`data:image/png;base64,${optImage.image_data}`}\r\n//                                         alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\r\n//                                     />\r\n//                                 </label>\r\n//                             </li>\r\n//                         ))}\r\n//                 </ul>\r\n//                 <button onClick={handleNextClick}>Next</button>\r\n//             </div>\r\n//             {/* ... */}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Paper;\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import './Paper.css';\r\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\r\n// // import { Waveform } from '@uiball/loaders'\r\n\r\n// const Paper = () => {\r\n\r\n//     const [Qimages, setQImages] = useState([]);\r\n//     const [OPTimages, setOPTImages] = useState([]);\r\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n\r\n//     useEffect(() => {\r\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\r\n//         const fetchQImages = async () => {\r\n//             let fetchedQImages = [];\r\n\r\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\r\n//                 try {\r\n//                     const response = await fetch(`http://localhost:7001/images/${i}`);\r\n//                     const data = await response.json();\r\n//                     if (data.length > 0) {\r\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\r\n//                     }\r\n//                 } catch (error) {\r\n//                     console.error('Error fetching Qimages:', error);\r\n//                 }\r\n//             }\r\n\r\n//             setQImages(fetchedQImages);\r\n//         };\r\n\r\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\r\n//         const fetchOPTImages = async () => {\r\n//             let fetchedOPTImages = [];\r\n\r\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\r\n//                 try {\r\n//                     for (let j = i + 1; j <= i + 4; j++) {\r\n//                         const response = await fetch(`http://localhost:7001/images/${j}`);\r\n//                         const data = await response.json();\r\n//                         if (data.length > 0) {\r\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\r\n//                         }\r\n//                     }\r\n//                 } catch (error) {\r\n//                     console.error('Error fetching OPTimages:', error);\r\n//                 }\r\n//             }\r\n\r\n//             setOPTImages(fetchedOPTImages);\r\n//         };\r\n\r\n//         fetchQImages();\r\n//         fetchOPTImages();\r\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\r\n\r\n//     const handleNextClick = () => {\r\n//         // Move to the next question when the \"Next\" button is clicked\r\n//         setCurrentQuestionIndex(prevIndex => prevIndex + 1);\r\n//     };\r\n\r\n//     // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\r\n//     const currentQuestion = Qimages[currentQuestionIndex];\r\n//     const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\r\n\r\n//     return (\r\n//         <div className='main'>\r\n//             <div className='sub-main'>\r\n//                 <div><PaperHeader /></div>\r\n//                 <div className=\"quiz-container\">\r\n//                     <div className='options-container'>\r\n//                         <h2 className='question'>\r\n//                             {currentQuestion ? (\r\n//                                 <img\r\n//                                     src={questionImageSrc}\r\n//                                     alt={`QImage ${currentQuestionIndex + 1}`}\r\n//                                 />\r\n//                             ) : (\r\n//                                 <p>Loading question...</p>\r\n\r\n//                             // <Waveform\r\n//                             //     size={40}\r\n//                             //     lineWeight={3.5}\r\n//                             //     speed={1}\r\n//                             //     color=\"black\"\r\n//                             // />\r\n//                             )}\r\n//                         </h2>\r\n//                         <ul className='options-container'>\r\n//                             {/* ... (options rendering logic) */}\r\n//                             {OPTimages\r\n//                                 .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\r\n//                                 .map((optImage, optIndex) => (\r\n\r\n//                                     <li key={optIndex}>\r\n//                                         <input type=\"radio\" />\r\n//                                         <label className='alpha-index'>\r\n//                                             <img\r\n//                                                 src={`data:image/png;base64,${optImage.image_data}`}\r\n//                                                 alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\r\n//                                             />\r\n//                                         </label>\r\n//                                     </li>\r\n//                                 ))}\r\n//                         </ul>\r\n//                         <button onClick={handleNextClick}>Next</button>\r\n//                     </div>\r\n\r\n//                 </div>\r\n//             </div>\r\n\r\n//             {/* ... */}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Paper;\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import './Paper.css';\r\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\r\n\r\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\r\n// import { DotSpinner } from '@uiball/loaders'\r\n\r\n// const Paper = () => {\r\n\r\n//     const [Qimages, setQImages] = useState([]);\r\n//     const [OPTimages, setOPTImages] = useState([]);\r\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n\r\n//     useEffect(() => {\r\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\r\n//         const fetchQImages = async () => {\r\n//             let fetchedQImages = [];\r\n\r\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\r\n//                 try {\r\n//                     const response = await fetch(`http://localhost:7002/images/${i}`);\r\n//                     const data = await response.json();\r\n//                     if (data.length > 0) {\r\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\r\n//                     }\r\n//                 } catch (error) {\r\n//                     console.error('Error fetching Qimages:', error);\r\n//                 }\r\n//             }\r\n\r\n//             setQImages(fetchedQImages);\r\n//         };\r\n\r\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\r\n//         const fetchOPTImages = async () => {\r\n//             let fetchedOPTImages = [];\r\n\r\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\r\n//                 try {\r\n//                     for (let j = i + 1; j <= i + 4; j++) {\r\n//                         const response = await fetch(`http://localhost:7002/images/${j}`);\r\n//                         const data = await response.json();\r\n//                         if (data.length > 0) {\r\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\r\n//                         }\r\n//                     }\r\n//                 } catch (error) {\r\n//                     console.error('Error fetching OPTimages:', error);\r\n//                 }\r\n//             }\r\n\r\n//             setOPTImages(fetchedOPTImages);\r\n//         };\r\n\r\n//         fetchQImages();\r\n//         fetchOPTImages();\r\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\r\n\r\n//     // const handleNextClick = () => {\r\n//     //     // Move to the next question when the \"Next\" button is clicked\r\n//     //     setCurrentQuestionIndex(prevIndex => prevIndex + 1);\r\n\r\n//     // };\r\n\r\n//     // const handlepreClick=()=>{\r\n//     //     setCurrentQuestionIndex(prevIndex => prevIndex - 1);\r\n//     //     // setTimer(timer)\r\n\r\n//     // }\r\n\r\n// // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\r\n// const currentQuestion = Qimages[currentQuestionIndex];\r\n// const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\r\n\r\n// const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\r\n\r\n//     return (\r\n//         <div className='main'>\r\n//             <div className='sub-main'>\r\n//                 <div><PaperHeader /></div>\r\n//                 <div className=\"quiz-container\">\r\n//                     <div>\r\n//                         <div className='subjects'>\r\n//                             <button className='subject-btn'>Mathematics</button>\r\n//                             <button className='subject-btn'>Physics</button>\r\n//                             <button className='subject-btn'>Chemistry</button>\r\n\r\n//                         </div>\r\n//                         <div className='second-header'>\r\n//                             <div className='single-select-question'>\r\n//                                 Single Select Question\r\n//                             </div>\r\n//                             <div className='right-header'>\r\n//                                 <div className='marks'>\r\n//                                     Marks: <div className='plus-mark'>+1</div>\r\n//                                     <div className='minus-mark'>-1</div>\r\n//                                 </div>\r\n//                                 {/* <div className='timer'>\r\n//                                     <h3>Time Left: {formatTime(countdown)}</h3>\r\n//                                 </div> */}\r\n//                             </div>\r\n//                         </div>\r\n//                         <div className='question-no'>\r\n//                             <span className=\"active-question-no\">Question No. {addLeadingZero(currentQuestionIndex + 1)}</span>\r\n//                             <span className=\"total-question\"> of {addLeadingZero(Qimages.length)}</span>\r\n//                         </div>\r\n\r\n//                         <div className='options-container'>\r\n\r\n//                             <h2 className='question'>\r\n//                                 {currentQuestion ? (\r\n//                                  <div>\r\n//                                         <img\r\n//                                             src={questionImageSrc}\r\n//                                             alt={`QImage ${currentQuestionIndex + 1}`}\r\n//                                         />\r\n//                                         <ul className='options-container'>\r\n//                                             {/* ... (options rendering logic) */}\r\n//                                             {OPTimages\r\n//                                                 .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\r\n//                                                 .map((optImage, optIndex) => (\r\n\r\n//                                                     <li key={optImage}>\r\n//                                                         <input\r\n//                                                         name='index'\r\n//                                                             type=\"radio\"\r\n//                                                           />\r\n//                                                         <label className='alpha-index'>\r\n//                                                             <img\r\n//                                                                 src={`data:image/png;base64,${optImage.image_data}`}\r\n//                                                                 alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\r\n//                                                             />\r\n//                                                         </label>\r\n//                                                     </li>\r\n//                                                 ))}\r\n//                                         </ul>\r\n//                                  </div>\r\n//                                 ) : (\r\n//                                     // <p>Loading question...</p>\r\n\r\n//                                  <div className='loading-gif'>\r\n//                                             <DotSpinner\r\n//                                                 size={90}\r\n//                                                 speed={0.9}\r\n//                                                 color=\"black\"\r\n\r\n//                                             />\r\n//                                  </div>\r\n//                                 )}\r\n\r\n//                             </h2>\r\n//                             {/* <ul className='options-container'>\r\n//                                 ... (options rendering logic)\r\n//                                 {OPTimages\r\n//                                     .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\r\n//                                     .map((optImage, optIndex) => (\r\n\r\n//                                         <li key={optIndex}>\r\n//                                             <input type=\"radio\" />\r\n//                                             <label className='alpha-index'>\r\n//                                                 <img\r\n//                                                     src={`data:image/png;base64,${optImage.image_data}`}\r\n//                                                     alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\r\n//                                                 />\r\n//                                             </label>\r\n//                                         </li>\r\n//                                     ))}\r\n//                             </ul> */}\r\n//                             {/* <button onClick={handleNextClick}>Next</button> */}\r\n//                         </div>\r\n//                         {/* a */}\r\n\r\n//                         <div className=\"flex-right\">\r\n//                             {/* <button className='clear-btn'>Mark for Review & Next</button>\r\n//                             <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\r\n//                             <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\r\n//                                 <i class=\"fa-solid fa-angles-left\"></i>\r\n//                                 Previous\r\n//                             </button>\r\n//                             <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\r\n//                                 {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\r\n//                             </button> */}\r\n// {/*\r\n//                             <button onClick={handlepreClick}>Previous</button>\r\n\r\n//                             <button onClick={handleNextClick}>Save&Next</button> */}\r\n\r\n//                         </div>\r\n//                     </div>\r\n\r\n//                 </div>\r\n//             </div>\r\n\r\n//             <div className='rightsidebar'><RightSidebar /></div>\r\n//             {/* onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} */}\r\n\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Paper;\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import './Paper.css';\r\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\r\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\r\n// import { DotSpinner } from '@uiball/loaders';\r\n\r\n// const Paper = () => {\r\n//     const [Qimages, setQImages] = useState([]);\r\n//     const [OPTimages, setOPTImages] = useState([]);\r\n//     const [activeQuestion, setActiveQuestion] = useState(0);\r\n//     const [selectedAnswers, setSelectedAnswers] = useState(Array(Qimages.length).fill(''));\r\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n//     const [showResult, setShowResult] = useState(false);\r\n//     const [result, setResult] = useState({\r\n//         score: 0,\r\n//         correctAnswers: 0,\r\n//         wrongAnswers: 0,\r\n//     });\r\n//     const [timers, setTimers] = useState(new Array(Qimages.length).fill(0));\r\n//     const [timer, setTimer] = useState(0);\r\n\r\n//     useEffect(() => {\r\n//             // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\r\n//             const fetchQImages = async () => {\r\n//                 let fetchedQImages = [];\r\n\r\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\r\n//                     try {\r\n//                         const response = await fetch(`http://localhost:7002/images/${i}`);\r\n//                         const data = await response.json();\r\n//                         if (data.length > 0) {\r\n//                             fetchedQImages.push(data[0]); // Add only the first image from each set\r\n//                         }\r\n//                     } catch (error) {\r\n//                         console.error('Error fetching Qimages:', error);\r\n//                     }\r\n//                 }\r\n\r\n//                 setQImages(fetchedQImages);\r\n//             };\r\n\r\n//             // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\r\n//             const fetchOPTImages = async () => {\r\n//                 let fetchedOPTImages = [];\r\n\r\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\r\n//                     try {\r\n//                         for (let j = i + 1; j <= i + 4; j++) {\r\n//                             const response = await fetch(`http://localhost:7002/images/${j}`);\r\n//                             const data = await response.json();\r\n//                             if (data.length > 0) {\r\n//                                 fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\r\n//                             }\r\n//                         }\r\n//                     } catch (error) {\r\n//                         console.error('Error fetching OPTimages:', error);\r\n//                     }\r\n//                 }\r\n\r\n//                 setOPTImages(fetchedOPTImages);\r\n//             };\r\n\r\n//             fetchQImages();\r\n//             fetchOPTImages();\r\n//         }, []); // Empty dependency array to fetch data only once when the component mounts\r\n\r\n//     const onAnswerSelected = (OptionLetter) => {\r\n//         const updatedSelectedAnswers = [...selectedAnswers];\r\n//         updatedSelectedAnswers[activeQuestion] = OptionLetter;\r\n//         setSelectedAnswers(updatedSelectedAnswers);\r\n//     };\r\n\r\n//     const clearResponse = () => {\r\n//         const updatedSelectedAnswers = [...selectedAnswers];\r\n//         updatedSelectedAnswers[activeQuestion] = '';\r\n//         setSelectedAnswers(updatedSelectedAnswers);\r\n//     };\r\n\r\n//     const goToPreviousQuestion = () => {\r\n//         setCurrentQuestionIndex(prevIndex => {\r\n\r\n//             // Save the current timer value for the question\r\n\r\n//             const updatedTimers = [...timers];\r\n\r\n//             updatedTimers[prevIndex] = timer;\r\n\r\n//             setTimers(updatedTimers);\r\n\r\n//             // Move to the previous question\r\n\r\n//             return prevIndex - 1;\r\n\r\n//         });\r\n//         if (activeQuestion > 0) {\r\n//             setActiveQuestion(activeQuestion - 1);\r\n//         }\r\n//     };\r\n\r\n//     const onClickNext = () => {\r\n//         setCurrentQuestionIndex(prevIndex => {\r\n\r\n//             // Save the current timer value for the question\r\n\r\n//             const updatedTimers = [...timers];\r\n\r\n//             updatedTimers[prevIndex] = timer;\r\n\r\n//             setTimers(updatedTimers);\r\n\r\n//             // Move to the next question\r\n\r\n//             return prevIndex + 1;\r\n\r\n//         });\r\n//         const correctAnswer = Qimages[activeQuestion].correct_answer; // Replace 'correct_answer' with the actual property name\r\n//         const selectedAnswer = selectedAnswers[activeQuestion];\r\n\r\n//         if (selectedAnswer === correctAnswer) {\r\n//             setResult(prevResult => ({\r\n//                 ...prevResult,\r\n//                 score: prevResult.score + 5,\r\n//                 correctAnswers: prevResult.correctAnswers + 1\r\n//             }));\r\n//         } else {\r\n//             setResult(prevResult => ({\r\n//                 ...prevResult,\r\n//                 wrongAnswers: prevResult.wrongAnswers + 1\r\n//             }));\r\n//         }\r\n\r\n//         if (activeQuestion < Qimages.length - 1) {\r\n//             setActiveQuestion(prevActiveQuestion => prevActiveQuestion + 1);\r\n//         } else {\r\n//             setShowResult(true);\r\n//             calculateResult(); // Implement this function for additional result calculations\r\n//         }\r\n//     };\r\n\r\n//     const formatTime = (seconds) => {\r\n\r\n//         const hours = Math.floor(seconds / 3600);\r\n\r\n//         const minutes = Math.floor((seconds % 3600) / 60);\r\n\r\n//         const remainingSeconds = seconds % 60;\r\n\r\n//         return `${hours > 9 ? hours : '0' + hours}:${minutes > 9 ? minutes : '0' + minutes}:${remainingSeconds > 9 ? remainingSeconds : '0' + remainingSeconds}`;\r\n\r\n//     };\r\n\r\n//     // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\r\n//     const currentQuestion = Qimages[currentQuestionIndex];\r\n//     const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\r\n//     const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\r\n\r\n//     const calculateResult = () => {\r\n//         // Implement additional result calculations here if needed\r\n//         // Example: Accuracy, Average Score, Top Score, Live Rank, etc.\r\n//     };\r\n\r\n//     return (\r\n//         <div className='main'>\r\n\r\n//             <div className='sub-main'>\r\n\r\n//                 <div><PaperHeader /></div>\r\n//                 <div className=\"quiz-container\">\r\n//                     <div>\r\n//                         <div className='subjects'>\r\n//                             <button className='subject-btn'>Mathematics</button>\r\n//                             <button className='subject-btn'>Physics</button>\r\n//                             <button className='subject-btn'>Chemistry</button>\r\n\r\n//                         </div>\r\n//                         <div className='second-header'>\r\n//                             <div className='single-select-question'>\r\n//                                 Single Select Question\r\n//                             </div>\r\n//                             <div className='right-header'>\r\n//                                 <div className='marks'>\r\n//                                     Marks: <div className='plus-mark'>+1</div>\r\n//                                     <div className='minus-mark'>-1</div>\r\n//                                 </div>\r\n//                                 <div>Timer: {formatTime(timer)}</div>\r\n//                             </div>\r\n//                         </div>\r\n//                         <div className='question-no'>\r\n//                             <span className=\"active-question-no\">Question No. {addLeadingZero(currentQuestionIndex + 1)}</span>\r\n//                             <span className=\"total-question\"> of {addLeadingZero(Qimages.length)}</span>\r\n//                         </div>\r\n\r\n//                         <div className='options-container'>\r\n\r\n//                             <h2 className='question'>\r\n//                                 {Qimages && Qimages.length > 0 && Qimages[activeQuestion] ? (\r\n\r\n//                                     <div>\r\n//                                         <img src={`data:image/png;base64,${Qimages[activeQuestion].image_data}`} alt={`QImage ${activeQuestion + 1}`} />\r\n//                                         <ul className='options-container'>\r\n//                                             {OPTimages.slice(activeQuestion * 4, activeQuestion * 4 + 4).map((optImage, optIndex) => (\r\n//                                                 <li key={optIndex}>\r\n//                                                     <input\r\n//                                                         type='radio'\r\n//                                                         name='index'\r\n//                                                         checked={selectedAnswers[activeQuestion] === String.fromCharCode(65 + optIndex)}\r\n//                                                         onChange={() => onAnswerSelected(String.fromCharCode(65 + optIndex))}\r\n//                                                     />\r\n//                                                     <label className='alpha-index'>\r\n//                                                         <img\r\n//                                                             src={`data:image/png;base64,${optImage.image_data}`}\r\n//                                                             alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\r\n//                                                         />\r\n//                                                     </label>\r\n//                                                 </li>\r\n//                                             ))}\r\n//                                         </ul>\r\n//                                     </div>\r\n\r\n//                                 ) : (\r\n\r\n//                                     <div className='loading-gif'>\r\n//                                         <DotSpinner\r\n//                                             size={90}\r\n//                                             speed={0.9}\r\n//                                             color=\"black\"\r\n//                                         />\r\n//                                     </div>\r\n//                                 )}\r\n//                             </h2>\r\n\r\n//                         </div>\r\n\r\n//                         <div className=\"flex-right\">\r\n\r\n//                         </div>\r\n//                     </div>\r\n\r\n//                 </div>\r\n\r\n//                 <div className='flex-right'>\r\n//                     <button className='clear-btn'>Mark for Review & Next</button>\r\n//                     <button className='clear-btn' onClick={clearResponse}>\r\n//                         Clear Response\r\n//                     </button>\r\n//                     <button className='previous-btn'  onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\r\n//                         <i className='fa-solid fa-angles-left'></i> Previous\r\n//                     </button>\r\n//                     <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\r\n//                         {activeQuestion === Qimages.length - 1 ? 'Submit' : 'Save & Next'}\r\n//                         <i className='fa-solid fa-angles-right'></i>\r\n//                     </button>\r\n//                 </div>\r\n//             </div>\r\n//             <div className='rightsidebar'>\r\n//                 <RightSidebar />\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Paper;\r\n\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport \"./Paper.css\";\r\nimport PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\r\nimport RightSidebar from \"../../Components/RightSidebar/RightSidebar\";\r\n// import \"../../Components/RightSidebar/RightSidebar.css\";\r\nimport { DotSpinner } from \"@uiball/loaders\";\r\n\r\nconst Paper = () => {\r\n\r\n  const [questionStatus, setQuestionStatus] = useState(Array(30).fill(\"notVisited\"));\r\n\r\n \r\n\r\n  const [Qimages, setQImages] = useState([]);\r\n  const [OPTimages, setOPTImages] = useState([]);\r\n  const [activeQuestion, setActiveQuestion] = useState(0);\r\n  const [selectedAnswers, setSelectedAnswers] = useState(\r\n    Array(Qimages.length).fill(\"\")\r\n  );\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [showResult, setShowResult] = useState(false);\r\n  const [result, setResult] = useState({\r\n    score: 0,\r\n    correctAnswers: 0,\r\n    wrongAnswers: 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\r\n    const fetchQImages = async () => {\r\n      let fetchedQImages = [];\r\n\r\n      for (let i = 1; i <= 1000; i += 6) {\r\n        // Assuming there are 100 sets of images\r\n        try {\r\n          const response = await fetch(`http://localhost:10000/images/${i}`);\r\n          const data = await response.json();\r\n          if (data.length > 0) {\r\n            fetchedQImages.push(data[0]); // Add only the first image from each set\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error fetching Qimages:\", error);\r\n        }\r\n      }\r\n\r\n      setQImages(fetchedQImages);\r\n    };\r\n\r\n    // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\r\n    const fetchOPTImages = async () => {\r\n      let fetchedOPTImages = [];\r\n\r\n      for (let i = 1; i <= 1000; i += 6) {\r\n        // Assuming there are 100 sets of images\r\n        try {\r\n          for (let j = i + 1; j <= i + 4; j++) {\r\n            const response = await fetch(`http://localhost:10000/images/${j}`);\r\n            const data = await response.json();\r\n            if (data.length > 0) {\r\n              fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error fetching OPTimages:\", error);\r\n        }\r\n      }\r\n\r\n      setOPTImages(fetchedOPTImages);\r\n    };\r\n\r\n    fetchQImages();\r\n    fetchOPTImages();\r\n  }, []); // Empty dependency array to fetch data only once when the component mounts\r\n\r\n  const [timers, setTimers] = useState(new Array(Qimages.length).fill(0));\r\n  const [timer, setTimer] = useState(0);\r\n\r\n  const onAnswerSelected = (OptionLetter) => {\r\n    const updatedSelectedAnswers = [...selectedAnswers];\r\n    updatedSelectedAnswers[activeQuestion] = OptionLetter;\r\n    setSelectedAnswers(updatedSelectedAnswers);\r\n\r\n    const updatedQuestionStatus = [...questionStatus];\r\n    updatedQuestionStatus[activeQuestion] = \"answered\";\r\n    setQuestionStatus(updatedQuestionStatus);\r\n  };\r\n\r\n\r\n  const clearResponse = () => {\r\n    const updatedSelectedAnswers = [...selectedAnswers];\r\n    updatedSelectedAnswers[activeQuestion] = \"\";\r\n    setSelectedAnswers(updatedSelectedAnswers);\r\n  };\r\n\r\n  const goToPreviousQuestion = () => {\r\n    setCurrentQuestionIndex((prevIndex) => {\r\n      // Save the current timer value for the question\r\n\r\n      const updatedTimers = [...timers];\r\n\r\n      updatedTimers[prevIndex] = timer;\r\n\r\n      setTimers(updatedTimers);\r\n\r\n      // Move to the previous question\r\n\r\n      return prevIndex - 1;\r\n    });\r\n    if (activeQuestion > 0) {\r\n      setActiveQuestion(activeQuestion - 1);\r\n    }\r\n  };\r\n\r\n  const onClickNext = () => {\r\n\r\n\r\n    \r\n    setCurrentQuestionIndex((prevIndex) => {\r\n      // Save the current timer value for the question\r\n\r\n      const updatedTimers = [...timers];\r\n\r\n      updatedTimers[prevIndex] = timer;\r\n\r\n      setTimers(updatedTimers);\r\n      return prevIndex + 1 ;\r\n      \r\n    });\r\n\r\n    \r\n\r\n \r\n      // Mark the question as not answered\r\n      \r\n      const updatedQuestionStatus = [...questionStatus];\r\n      if (!selectedAnswers[activeQuestion] === \"answered\") {\r\n        updatedQuestionStatus[activeQuestion] = \"notAnswered\";\r\n      }\r\n      else if(!markForReview()===true){\r\n        markForReview()\r\n      }\r\n      else if (selectedAnswers[activeQuestion]) {\r\n        updatedQuestionStatus[activeQuestion] = \"answered\";\r\n      } else if(!markForReview()===false) {\r\n        markForReview()\r\n      }\r\n\r\n      setQuestionStatus(updatedQuestionStatus);\r\n\r\n\r\n    const correctAnswer = Qimages[activeQuestion].correct_answer; // Replace 'correct_answer' with the actual property name\r\n    const selectedAnswer = selectedAnswers[activeQuestion];\r\n\r\n    if (selectedAnswer === correctAnswer) {\r\n      setResult((prevResult) => ({\r\n        ...prevResult,\r\n        score: prevResult.score + 5,\r\n        correctAnswers: prevResult.correctAnswers + 1,\r\n      }));\r\n    } else {\r\n      setResult((prevResult) => ({\r\n        ...prevResult,\r\n        wrongAnswers: prevResult.wrongAnswers + 1,\r\n      }));\r\n    }\r\n\r\n    if (activeQuestion < Qimages.length - 1) {\r\n      setActiveQuestion((prevActiveQuestion) => prevActiveQuestion + 1);\r\n  } else {\r\n      setShowResult(true);\r\n      calculateResult();\r\n  }\r\n  };\r\n\r\n\r\n  \r\n  const markForReview = () => {\r\n    // Update questionStatus for the marked question\r\n    const updatedQuestionStatus = [...questionStatus];\r\n    if (selectedAnswers[activeQuestion]) {\r\n      updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\r\n      // if(selectedAnswers[activeQuestion] === \"Answered but marked for review\"){\r\n      //   updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\r\n      // }\r\n    } \r\n    else if (!selectedAnswers[activeQuestion])  {\r\n      updatedQuestionStatus[activeQuestion] = \"marked\";\r\n    }\r\n    \r\n    \r\n    setQuestionStatus(updatedQuestionStatus);\r\n};\r\n\r\n  // const formatTime = (seconds) => {\r\n  //   const hours = Math.floor(seconds / 3600);\r\n\r\n  //   const minutes = Math.floor((seconds % 3600) / 60);\r\n\r\n  //   const remainingSeconds = seconds % 60;\r\n\r\n  //   return `${hours > 9 ? hours : \"0\" + hours}:${\r\n  //     minutes > 9 ? minutes : \"0\" + minutes\r\n  //   }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   // Set the timer to the saved value for the current question\r\n\r\n  //   setTimer(timers[currentQuestionIndex] || 0);\r\n\r\n  //   let interval;\r\n\r\n  //   interval = setInterval(() => {\r\n  //     setTimer((prevTimer) => prevTimer + 1);\r\n  //   }, 1000);\r\n\r\n  //   // Clear the interval when the component unmounts or when the user moves to the next question\r\n\r\n  //   return () => {\r\n  //     clearInterval(interval);\r\n  //   };\r\n  // }, [currentQuestionIndex, timers]);\r\n\r\n  // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\r\n  const currentQuestion = Qimages[currentQuestionIndex];\r\n  const questionImageSrc = currentQuestion\r\n    ? `data:image/png;base64,${currentQuestion.image_data}`\r\n    : \"\";\r\n  const addLeadingZero = (number) => (number > 9 ? number : `0${number}`);\r\n\r\n  const calculateResult = () => {\r\n    // Implement additional result calculations here if needed\r\n    // Example: Accuracy, Average Score, Top Score, Live Rank, etc.\r\n  };\r\n\r\n\r\n\r\n\r\n  // Timer for whole page\r\n\r\n//   const totalTime = 180 * 60; // 180 minutes in seconds\r\n//   const [wtimer, setWTimer] = useState(totalTime);\r\n\r\n//   useEffect(() => {\r\n//     const interval = setInterval(() => {\r\n//       setWTimer((prevTimer) => prevTimer - 1);\r\n//     }, 1000);\r\n\r\n//     // Clear the interval and handle time-up logic when timer reaches 0\r\n//     if (timer <= 0) {\r\n//       clearInterval(interval);\r\n//       // Handle time-up logic here (e.g., navigate to a different component)\r\n//     }\r\n\r\n//     // Clean up the interval on component unmount or when navigating away\r\n//     return () => {\r\n//       clearInterval(interval);\r\n//     };\r\n//   }, [timer]);\r\n\r\n//   const WformatTime = (seconds) => {\r\n//     const hours = Math.floor(seconds / 3600);\r\n//     const minutes = Math.floor((seconds % 3600) / 60);\r\n//     const remainingSeconds = seconds % 60;\r\n//     return `${hours > 9 ? hours : '0' + hours}:${minutes > 9 ? minutes : '0' + minutes}:${remainingSeconds > 9 ? remainingSeconds : '0' + remainingSeconds}`;\r\n//   };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // const [answeredQuestions, setAnsweredQuestions] = useState([]);\r\n\r\n  // const handleButtonClick = (questionNumber) => {\r\n  //   onQuestionSelect(questionNumber);\r\n  //   setAnsweredQuestions([...answeredQuestions, questionNumber]);\r\n  // };\r\n\r\n  // const buttons = [\r\n  //   1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\r\n  //   22, 23, 24, 25, 26, 27, 28, 29, 30,\r\n  // ];\r\n  // const renderList = buttons.map((item, index) => {\r\n  //   let className = \"quesAns-btn\";\r\n  //   if (questionStatus && questionStatus[index] === \"answered\") {\r\n  //     className += \"answered\";\r\n  //   }\r\n  //   return (\r\n  //     <div>\r\n  //       <button className={className} onClick={() => handleButtonClick(item)}>\r\n  //         {item}\r\n  //       </button>\r\n  //     </div>\r\n  //   );\r\n  // });\r\n\r\n  const[opensubject_1,setOpensubject_1]=useState(true)\r\n  const [opensubject_2,setOpensubject_2]=useState(false)\r\n  const [opensubject_3,setOpensubject_3]=useState(false)\r\n\r\n  const openAlertSubject1=()=>{\r\n    setOpensubject_1(true)\r\n    setOpensubject_2(false)\r\n    setOpensubject_3(false)\r\n  }\r\n  const openAlertSubject2=()=>{\r\n    setOpensubject_2(true)\r\n    setOpensubject_1(false)\r\n    setOpensubject_3(false)\r\n\r\n  }\r\n  const openAlertSubject3=()=>{\r\n    setOpensubject_3(true)\r\n    setOpensubject_2(false)\r\n    setOpensubject_1(false)\r\n  }\r\n\r\n\r\n\r\n  const handleQuestionSelect = (questionNumber) => {\r\n    setCurrentQuestionIndex(questionNumber - 1);\r\n    setActiveQuestion(questionNumber - 1);\r\n};\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <div className=\"sub-main\">\r\n        <div>\r\n          <PaperHeader />\r\n        </div>\r\n        <div className=\"quiz-container\">\r\n          <div>\r\n            <div className=\"subjects\">\r\n              <button className=\"subject-btn\" onClick={openAlertSubject1}>Mathematics</button>\r\n              <button className=\"subject-btn\" onClick={openAlertSubject2}>Physics</button>\r\n              <button className=\"subject-btn\" onClick={openAlertSubject3}>Chemistry</button>\r\n            </div>\r\n            <div className=\"second-header\">\r\n              <div className=\"single-select-question\">\r\n                Single Select Question\r\n              </div>\r\n              <div className=\"right-header\">\r\n                <div className=\"marks\">\r\n                  Marks: <div className=\"plus-mark\">+1</div>\r\n                  <div className=\"minus-mark\">-1</div>\r\n                </div>\r\n                {/* <div>Timer: {formatTime(timer)}</div> */}\r\n              </div>\r\n            </div>\r\n            {/* <div className=\"question-no\">\r\n              <span className=\"active-question-no\">\r\n                Question No. {addLeadingZero(currentQuestionIndex + 1)}\r\n              </span>\r\n              <span className=\"total-question\">\r\n                {\" \"}\r\n                of {addLeadingZero(Qimages.length)}\r\n              </span>\r\n            </div> */}\r\n\r\n{opensubject_1 ?\r\n <div className=\"Subject-Container\">\r\n  maths\r\n            <div className=\"question-no\">\r\n           \r\n              <span className=\"active-question-no\">\r\n                Question No. {addLeadingZero(currentQuestionIndex + 1)}\r\n              </span>\r\n              <span className=\"total-question\">\r\n                {\" \"}\r\n                of {addLeadingZero(Qimages.length)}\r\n              </span>\r\n            </div>\r\n              <h2 className=\"question\">\r\n                {Qimages && Qimages.length > 0 && Qimages[activeQuestion] ? (\r\n                  <div>\r\n                    <img\r\n                      src={`data:image/png;base64,${Qimages[activeQuestion].image_data}`}\r\n                      alt={`QImage ${activeQuestion + 1}`}\r\n                    />\r\n                    <ul className=\"options-container\">\r\n                      {OPTimages.slice(\r\n                        activeQuestion * 4,\r\n                        activeQuestion * 4 + 4\r\n                      ).map((optImage, optIndex) => (\r\n                        <li key={optIndex}>\r\n                          <input\r\n                            type=\"radio\"\r\n                            name=\"index\"\r\n                            checked={\r\n                              selectedAnswers[activeQuestion] ===\r\n                              String.fromCharCode(65 + optIndex)\r\n                            }\r\n                            onChange={() =>\r\n                              onAnswerSelected(\r\n                                String.fromCharCode(65 + optIndex)\r\n                              )\r\n                            }\r\n                          />\r\n                          <label className=\"alpha-index\">\r\n                            <img\r\n                              src={`data:image/png;base64,${optImage.image_data}`}\r\n                              alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\r\n                            />\r\n                          </label>\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"loading-gif\">\r\n                    <DotSpinner size={90} speed={0.9} color=\"black\" />\r\n                  </div>\r\n                )}\r\n              </h2>\r\n            </div>:\r\n            null\r\n}\r\n\r\n\r\n{opensubject_2 ?\r\n <div className=\"Subject-Container\">\r\n  Physics\r\n            <div className=\"question-no\">\r\n           \r\n              <span className=\"active-question-no\">\r\n                Question No. {addLeadingZero(currentQuestionIndex + 1)}\r\n              </span>\r\n              <span className=\"total-question\">\r\n                {\" \"}\r\n                of {addLeadingZero(Qimages.length)}\r\n              </span>\r\n            </div>\r\n              <h2 className=\"question\">\r\n                {Qimages && Qimages.length > 0 && Qimages[activeQuestion] ? (\r\n                  <div>\r\n                    <img\r\n                      src={`data:image/png;base64,${Qimages[activeQuestion].image_data}`}\r\n                      alt={`QImage ${activeQuestion + 1}`}\r\n                    />\r\n                    <ul className=\"options-container\">\r\n                      {OPTimages.slice(\r\n                        activeQuestion * 4,\r\n                        activeQuestion * 4 + 4\r\n                      ).map((optImage, optIndex) => (\r\n                        <li key={optIndex}>\r\n                          <input\r\n                            type=\"radio\"\r\n                            name=\"index\"\r\n                            checked={\r\n                              selectedAnswers[activeQuestion] ===\r\n                              String.fromCharCode(65 + optIndex)\r\n                            }\r\n                            onChange={() =>\r\n                              onAnswerSelected(\r\n                                String.fromCharCode(65 + optIndex)\r\n                              )\r\n                            }\r\n                          />\r\n                          <label className=\"alpha-index\">\r\n                            <img\r\n                              src={`data:image/png;base64,${optImage.image_data}`}\r\n                              alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\r\n                            />\r\n                          </label>\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"loading-gif\">\r\n                    <DotSpinner size={90} speed={0.9} color=\"black\" />\r\n                  </div>\r\n                )}\r\n              </h2>\r\n            </div>:\r\n            null\r\n}\r\n\r\n\r\n{opensubject_3 ?\r\n <div className=\"Subject-Container\">\r\nChemistry\r\n            <div className=\"question-no\">\r\n           \r\n              <span className=\"active-question-no\">\r\n                Question No. {addLeadingZero(currentQuestionIndex + 1)}\r\n              </span>\r\n              <span className=\"total-question\">\r\n                {\" \"}\r\n                of {addLeadingZero(Qimages.length)}\r\n              </span>\r\n            </div>\r\n              <h2 className=\"question\">\r\n                {Qimages && Qimages.length > 0 && Qimages[activeQuestion] ? (\r\n                  <div>\r\n                    <img\r\n                      src={`data:image/png;base64,${Qimages[activeQuestion].image_data}`}\r\n                      alt={`QImage ${activeQuestion + 1}`}\r\n                    />\r\n                    <ul className=\"options-container\">\r\n                      {OPTimages.slice(\r\n                        activeQuestion * 4,\r\n                        activeQuestion * 4 + 4\r\n                      ).map((optImage, optIndex) => (\r\n                        <li key={optIndex}>\r\n                          <input\r\n                            type=\"radio\"\r\n                            name=\"index\"\r\n                            checked={\r\n                              selectedAnswers[activeQuestion] ===\r\n                              String.fromCharCode(65 + optIndex)\r\n                            }\r\n                            onChange={() =>\r\n                              onAnswerSelected(\r\n                                String.fromCharCode(65 + optIndex)\r\n                              )\r\n                            }\r\n                          />\r\n                          <label className=\"alpha-index\">\r\n                            <img\r\n                              src={`data:image/png;base64,${optImage.image_data}`}\r\n                              alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\r\n                            />\r\n                          </label>\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"loading-gif\">\r\n                    <DotSpinner size={90} speed={0.9} color=\"black\" />\r\n                  </div>\r\n                )}\r\n              </h2>\r\n            </div>:\r\n            null\r\n}\r\n\r\n\r\n            <div className=\"flex-right\"></div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flex-right\">\r\n          <button className=\"clear-btn\" onClick={markForReview}>Mark for Review & Next</button>\r\n          <button className=\"clear-btn\" onClick={clearResponse}>\r\n            Clear Response\r\n          </button>\r\n          <button\r\n            className=\"previous-btn\"\r\n            onClick={goToPreviousQuestion}\r\n            disabled={activeQuestion === 0}\r\n          >\r\n            <i className=\"fa-solid fa-angles-left\"></i> Previous\r\n          </button>\r\n          <button\r\n            className=\"save-btn\"\r\n            onClick={onClickNext}\r\n            // disabled={!selectedAnswers[activeQuestion]}\r\n          >\r\n            {activeQuestion === Qimages.length - 1 ? \"Submit\" : \"Save & Next\"}\r\n            <i className=\"fa-solid fa-angles-right\"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"rightsidebar\">\r\n        <RightSidebar onQuestionSelect={handleQuestionSelect} questionStatus={questionStatus} setQuestionStatus={setQuestionStatus}  />\r\n       \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Paper;\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,aAAa;AACpB,OAAOC,WAAW,MAAM,0CAA0C;AAClE,OAAOC,YAAY,MAAM,4CAA4C;AACrE;AACA,SAASC,UAAU,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAElB,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAACW,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,YAAY,CAAC,CAAC;EAIlF,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACiB,cAAc,EAAEC,iBAAiB,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC;EACvD,MAAM,CAACmB,eAAe,EAAEC,kBAAkB,CAAC,GAAGpB,QAAQ,CACpDW,KAAK,CAACE,OAAO,CAACQ,MAAM,CAAC,CAACT,IAAI,CAAC,EAAE,CAC/B,CAAC;EACD,MAAM,CAACU,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGvB,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM,CAACwB,UAAU,EAAEC,aAAa,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAAC0B,MAAM,EAAEC,SAAS,CAAC,GAAG3B,QAAQ,CAAC;IACnC4B,KAAK,EAAE,CAAC;IACRC,cAAc,EAAE,CAAC;IACjBC,YAAY,EAAE;EAChB,CAAC,CAAC;EAEF/B,SAAS,CAAC,MAAM;IACd;IACA,MAAMgC,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAIC,cAAc,GAAG,EAAE;MAEvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,IAAI,EAAEA,CAAC,IAAI,CAAC,EAAE;QACjC;QACA,IAAI;UACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,iCAAgCF,CAAE,EAAC,CAAC;UAClE,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;UAClC,IAAID,IAAI,CAACf,MAAM,GAAG,CAAC,EAAE;YACnBW,cAAc,CAACM,IAAI,CAACF,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UAChC;QACF,CAAC,CAAC,OAAOG,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QACjD;MACF;MAEAzB,UAAU,CAACkB,cAAc,CAAC;IAC5B,CAAC;;IAED;IACA,MAAMS,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAIC,gBAAgB,GAAG,EAAE;MAEzB,KAAK,IAAIT,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,IAAI,EAAEA,CAAC,IAAI,CAAC,EAAE;QACjC;QACA,IAAI;UACF,KAAK,IAAIU,CAAC,GAAGV,CAAC,GAAG,CAAC,EAAEU,CAAC,IAAIV,CAAC,GAAG,CAAC,EAAEU,CAAC,EAAE,EAAE;YACnC,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAE,iCAAgCQ,CAAE,EAAC,CAAC;YAClE,MAAMP,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;YAClC,IAAID,IAAI,CAACf,MAAM,GAAG,CAAC,EAAE;cACnBqB,gBAAgB,CAACJ,IAAI,CAACF,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAClC;UACF;QACF,CAAC,CAAC,OAAOG,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACnD;MACF;MAEAvB,YAAY,CAAC0B,gBAAgB,CAAC;IAChC,CAAC;IAEDX,YAAY,CAAC,CAAC;IACdU,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAM,CAACG,MAAM,EAAEC,SAAS,CAAC,GAAG7C,QAAQ,CAAC,IAAIW,KAAK,CAACE,OAAO,CAACQ,MAAM,CAAC,CAACT,IAAI,CAAC,CAAC,CAAC,CAAC;EACvE,MAAM,CAACkC,KAAK,EAAEC,QAAQ,CAAC,GAAG/C,QAAQ,CAAC,CAAC,CAAC;EAErC,MAAMgD,gBAAgB,GAAIC,YAAY,IAAK;IACzC,MAAMC,sBAAsB,GAAG,CAAC,GAAG/B,eAAe,CAAC;IACnD+B,sBAAsB,CAACjC,cAAc,CAAC,GAAGgC,YAAY;IACrD7B,kBAAkB,CAAC8B,sBAAsB,CAAC;IAE1C,MAAMC,qBAAqB,GAAG,CAAC,GAAG1C,cAAc,CAAC;IACjD0C,qBAAqB,CAAClC,cAAc,CAAC,GAAG,UAAU;IAClDP,iBAAiB,CAACyC,qBAAqB,CAAC;EAC1C,CAAC;EAGD,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAMF,sBAAsB,GAAG,CAAC,GAAG/B,eAAe,CAAC;IACnD+B,sBAAsB,CAACjC,cAAc,CAAC,GAAG,EAAE;IAC3CG,kBAAkB,CAAC8B,sBAAsB,CAAC;EAC5C,CAAC;EAED,MAAMG,oBAAoB,GAAGA,CAAA,KAAM;IACjC9B,uBAAuB,CAAE+B,SAAS,IAAK;MACrC;;MAEA,MAAMC,aAAa,GAAG,CAAC,GAAGX,MAAM,CAAC;MAEjCW,aAAa,CAACD,SAAS,CAAC,GAAGR,KAAK;MAEhCD,SAAS,CAACU,aAAa,CAAC;;MAExB;;MAEA,OAAOD,SAAS,GAAG,CAAC;IACtB,CAAC,CAAC;IACF,IAAIrC,cAAc,GAAG,CAAC,EAAE;MACtBC,iBAAiB,CAACD,cAAc,GAAG,CAAC,CAAC;IACvC;EACF,CAAC;EAED,MAAMuC,WAAW,GAAGA,CAAA,KAAM;IAIxBjC,uBAAuB,CAAE+B,SAAS,IAAK;MACrC;;MAEA,MAAMC,aAAa,GAAG,CAAC,GAAGX,MAAM,CAAC;MAEjCW,aAAa,CAACD,SAAS,CAAC,GAAGR,KAAK;MAEhCD,SAAS,CAACU,aAAa,CAAC;MACxB,OAAOD,SAAS,GAAG,CAAC;IAEtB,CAAC,CAAC;;IAKA;;IAEA,MAAMH,qBAAqB,GAAG,CAAC,GAAG1C,cAAc,CAAC;IACjD,IAAI,CAACU,eAAe,CAACF,cAAc,CAAC,KAAK,UAAU,EAAE;MACnDkC,qBAAqB,CAAClC,cAAc,CAAC,GAAG,aAAa;IACvD,CAAC,MACI,IAAG,CAACwC,aAAa,CAAC,CAAC,KAAG,IAAI,EAAC;MAC9BA,aAAa,CAAC,CAAC;IACjB,CAAC,MACI,IAAItC,eAAe,CAACF,cAAc,CAAC,EAAE;MACxCkC,qBAAqB,CAAClC,cAAc,CAAC,GAAG,UAAU;IACpD,CAAC,MAAM,IAAG,CAACwC,aAAa,CAAC,CAAC,KAAG,KAAK,EAAE;MAClCA,aAAa,CAAC,CAAC;IACjB;IAEA/C,iBAAiB,CAACyC,qBAAqB,CAAC;IAG1C,MAAMO,aAAa,GAAG7C,OAAO,CAACI,cAAc,CAAC,CAAC0C,cAAc,CAAC,CAAC;IAC9D,MAAMC,cAAc,GAAGzC,eAAe,CAACF,cAAc,CAAC;IAEtD,IAAI2C,cAAc,KAAKF,aAAa,EAAE;MACpC/B,SAAS,CAAEkC,UAAU,KAAM;QACzB,GAAGA,UAAU;QACbjC,KAAK,EAAEiC,UAAU,CAACjC,KAAK,GAAG,CAAC;QAC3BC,cAAc,EAAEgC,UAAU,CAAChC,cAAc,GAAG;MAC9C,CAAC,CAAC,CAAC;IACL,CAAC,MAAM;MACLF,SAAS,CAAEkC,UAAU,KAAM;QACzB,GAAGA,UAAU;QACb/B,YAAY,EAAE+B,UAAU,CAAC/B,YAAY,GAAG;MAC1C,CAAC,CAAC,CAAC;IACL;IAEA,IAAIb,cAAc,GAAGJ,OAAO,CAACQ,MAAM,GAAG,CAAC,EAAE;MACvCH,iBAAiB,CAAE4C,kBAAkB,IAAKA,kBAAkB,GAAG,CAAC,CAAC;IACrE,CAAC,MAAM;MACHrC,aAAa,CAAC,IAAI,CAAC;MACnBsC,eAAe,CAAC,CAAC;IACrB;EACA,CAAC;EAID,MAAMN,aAAa,GAAGA,CAAA,KAAM;IAC1B;IACA,MAAMN,qBAAqB,GAAG,CAAC,GAAG1C,cAAc,CAAC;IACjD,IAAIU,eAAe,CAACF,cAAc,CAAC,EAAE;MACnCkC,qBAAqB,CAAClC,cAAc,CAAC,GAAG,gCAAgC;MACxE;MACA;MACA;IACF,CAAC,MACI,IAAI,CAACE,eAAe,CAACF,cAAc,CAAC,EAAG;MAC1CkC,qBAAqB,CAAClC,cAAc,CAAC,GAAG,QAAQ;IAClD;IAGAP,iBAAiB,CAACyC,qBAAqB,CAAC;EAC5C,CAAC;;EAEC;EACA;;EAEA;;EAEA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;;EAEA;;EAEA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;;EAEA;EACA,MAAMa,eAAe,GAAGnD,OAAO,CAACS,oBAAoB,CAAC;EACrD,MAAM2C,gBAAgB,GAAGD,eAAe,GACnC,yBAAwBA,eAAe,CAACE,UAAW,EAAC,GACrD,EAAE;EACN,MAAMC,cAAc,GAAIC,MAAM,IAAMA,MAAM,GAAG,CAAC,GAAGA,MAAM,GAAI,IAAGA,MAAO,EAAE;EAEvE,MAAML,eAAe,GAAGA,CAAA,KAAM;IAC5B;IACA;EAAA,CACD;;EAKD;;EAEF;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EASE;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAK,CAACM,aAAa,EAACC,gBAAgB,CAAC,GAACtE,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACuE,aAAa,EAACC,gBAAgB,CAAC,GAACxE,QAAQ,CAAC,KAAK,CAAC;EACtD,MAAM,CAACyE,aAAa,EAACC,gBAAgB,CAAC,GAAC1E,QAAQ,CAAC,KAAK,CAAC;EAEtD,MAAM2E,iBAAiB,GAACA,CAAA,KAAI;IAC1BL,gBAAgB,CAAC,IAAI,CAAC;IACtBE,gBAAgB,CAAC,KAAK,CAAC;IACvBE,gBAAgB,CAAC,KAAK,CAAC;EACzB,CAAC;EACD,MAAME,iBAAiB,GAACA,CAAA,KAAI;IAC1BJ,gBAAgB,CAAC,IAAI,CAAC;IACtBF,gBAAgB,CAAC,KAAK,CAAC;IACvBI,gBAAgB,CAAC,KAAK,CAAC;EAEzB,CAAC;EACD,MAAMG,iBAAiB,GAACA,CAAA,KAAI;IAC1BH,gBAAgB,CAAC,IAAI,CAAC;IACtBF,gBAAgB,CAAC,KAAK,CAAC;IACvBF,gBAAgB,CAAC,KAAK,CAAC;EACzB,CAAC;EAID,MAAMQ,oBAAoB,GAAIC,cAAc,IAAK;IAC/CxD,uBAAuB,CAACwD,cAAc,GAAG,CAAC,CAAC;IAC3C7D,iBAAiB,CAAC6D,cAAc,GAAG,CAAC,CAAC;EACzC,CAAC;EAEC,oBACEzE,OAAA;IAAK0E,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnB3E,OAAA;MAAK0E,SAAS,EAAC,UAAU;MAAAC,QAAA,gBACvB3E,OAAA;QAAA2E,QAAA,eACE3E,OAAA,CAACJ,WAAW;UAAAgF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACZ,CAAC,eACN/E,OAAA;QAAK0E,SAAS,EAAC,gBAAgB;QAAAC,QAAA,eAC7B3E,OAAA;UAAA2E,QAAA,gBACE3E,OAAA;YAAK0E,SAAS,EAAC,UAAU;YAAAC,QAAA,gBACvB3E,OAAA;cAAQ0E,SAAS,EAAC,aAAa;cAACM,OAAO,EAAEX,iBAAkB;cAAAM,QAAA,EAAC;YAAW;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAChF/E,OAAA;cAAQ0E,SAAS,EAAC,aAAa;cAACM,OAAO,EAAEV,iBAAkB;cAAAK,QAAA,EAAC;YAAO;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC5E/E,OAAA;cAAQ0E,SAAS,EAAC,aAAa;cAACM,OAAO,EAAET,iBAAkB;cAAAI,QAAA,EAAC;YAAS;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC3E,CAAC,eACN/E,OAAA;YAAK0E,SAAS,EAAC,eAAe;YAAAC,QAAA,gBAC5B3E,OAAA;cAAK0E,SAAS,EAAC,wBAAwB;cAAAC,QAAA,EAAC;YAExC;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACN/E,OAAA;cAAK0E,SAAS,EAAC,cAAc;cAAAC,QAAA,eAC3B3E,OAAA;gBAAK0E,SAAS,EAAC,OAAO;gBAAAC,QAAA,GAAC,SACd,eAAA3E,OAAA;kBAAK0E,SAAS,EAAC,WAAW;kBAAAC,QAAA,EAAC;gBAAE;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,eAC1C/E,OAAA;kBAAK0E,SAAS,EAAC,YAAY;kBAAAC,QAAA,EAAC;gBAAE;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACjC;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAEH,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,EAWjBhB,aAAa,gBACb/D,OAAA;YAAK0E,SAAS,EAAC,mBAAmB;YAAAC,QAAA,GAAC,OAExB,eAAA3E,OAAA;cAAK0E,SAAS,EAAC,aAAa;cAAAC,QAAA,gBAE1B3E,OAAA;gBAAM0E,SAAS,EAAC,oBAAoB;gBAAAC,QAAA,GAAC,eACtB,EAACd,cAAc,CAAC7C,oBAAoB,GAAG,CAAC,CAAC;cAAA;gBAAA4D,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAClD,CAAC,eACP/E,OAAA;gBAAM0E,SAAS,EAAC,gBAAgB;gBAAAC,QAAA,GAC7B,GAAG,EAAC,KACF,EAACd,cAAc,CAACtD,OAAO,CAACQ,MAAM,CAAC;cAAA;gBAAA6D,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC9B,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACJ,CAAC,eACJ/E,OAAA;cAAI0E,SAAS,EAAC,UAAU;cAAAC,QAAA,EACrBpE,OAAO,IAAIA,OAAO,CAACQ,MAAM,GAAG,CAAC,IAAIR,OAAO,CAACI,cAAc,CAAC,gBACvDX,OAAA;gBAAA2E,QAAA,gBACE3E,OAAA;kBACEiF,GAAG,EAAG,yBAAwB1E,OAAO,CAACI,cAAc,CAAC,CAACiD,UAAW,EAAE;kBACnEsB,GAAG,EAAG,UAASvE,cAAc,GAAG,CAAE;gBAAE;kBAAAiE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACrC,CAAC,eACF/E,OAAA;kBAAI0E,SAAS,EAAC,mBAAmB;kBAAAC,QAAA,EAC9BlE,SAAS,CAAC0E,KAAK,CACdxE,cAAc,GAAG,CAAC,EAClBA,cAAc,GAAG,CAAC,GAAG,CACvB,CAAC,CAACyE,GAAG,CAAC,CAACC,QAAQ,EAAEC,QAAQ,kBACvBtF,OAAA;oBAAA2E,QAAA,gBACE3E,OAAA;sBACEuF,IAAI,EAAC,OAAO;sBACZC,IAAI,EAAC,OAAO;sBACZC,OAAO,EACL5E,eAAe,CAACF,cAAc,CAAC,KAC/B+E,MAAM,CAACC,YAAY,CAAC,EAAE,GAAGL,QAAQ,CAClC;sBACDM,QAAQ,EAAEA,CAAA,KACRlD,gBAAgB,CACdgD,MAAM,CAACC,YAAY,CAAC,EAAE,GAAGL,QAAQ,CACnC;oBACD;sBAAAV,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACF,CAAC,eACF/E,OAAA;sBAAO0E,SAAS,EAAC,aAAa;sBAAAC,QAAA,eAC5B3E,OAAA;wBACEiF,GAAG,EAAG,yBAAwBI,QAAQ,CAACzB,UAAW,EAAE;wBACpDsB,GAAG,EAAG,YAAWI,QAAQ,GAAG,CAAE,IAAGA,QAAQ,GAAG,CAAE;sBAAE;wBAAAV,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OACjD;oBAAC;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACG,CAAC;kBAAA,GAnBDO,QAAQ;oBAAAV,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAoBb,CACL;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACA,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACF,CAAC,gBAEN/E,OAAA;gBAAK0E,SAAS,EAAC,aAAa;gBAAAC,QAAA,eAC1B3E,OAAA,CAACF,UAAU;kBAAC+F,IAAI,EAAE,EAAG;kBAACC,KAAK,EAAE,GAAI;kBAACC,KAAK,EAAC;gBAAO;kBAAAnB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAE;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC/C;YACN;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC,GACN,IAAI,EAIfd,aAAa,gBACbjE,OAAA;YAAK0E,SAAS,EAAC,mBAAmB;YAAAC,QAAA,GAAC,SAExB,eAAA3E,OAAA;cAAK0E,SAAS,EAAC,aAAa;cAAAC,QAAA,gBAE1B3E,OAAA;gBAAM0E,SAAS,EAAC,oBAAoB;gBAAAC,QAAA,GAAC,eACtB,EAACd,cAAc,CAAC7C,oBAAoB,GAAG,CAAC,CAAC;cAAA;gBAAA4D,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAClD,CAAC,eACP/E,OAAA;gBAAM0E,SAAS,EAAC,gBAAgB;gBAAAC,QAAA,GAC7B,GAAG,EAAC,KACF,EAACd,cAAc,CAACtD,OAAO,CAACQ,MAAM,CAAC;cAAA;gBAAA6D,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC9B,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACJ,CAAC,eACJ/E,OAAA;cAAI0E,SAAS,EAAC,UAAU;cAAAC,QAAA,EACrBpE,OAAO,IAAIA,OAAO,CAACQ,MAAM,GAAG,CAAC,IAAIR,OAAO,CAACI,cAAc,CAAC,gBACvDX,OAAA;gBAAA2E,QAAA,gBACE3E,OAAA;kBACEiF,GAAG,EAAG,yBAAwB1E,OAAO,CAACI,cAAc,CAAC,CAACiD,UAAW,EAAE;kBACnEsB,GAAG,EAAG,UAASvE,cAAc,GAAG,CAAE;gBAAE;kBAAAiE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACrC,CAAC,eACF/E,OAAA;kBAAI0E,SAAS,EAAC,mBAAmB;kBAAAC,QAAA,EAC9BlE,SAAS,CAAC0E,KAAK,CACdxE,cAAc,GAAG,CAAC,EAClBA,cAAc,GAAG,CAAC,GAAG,CACvB,CAAC,CAACyE,GAAG,CAAC,CAACC,QAAQ,EAAEC,QAAQ,kBACvBtF,OAAA;oBAAA2E,QAAA,gBACE3E,OAAA;sBACEuF,IAAI,EAAC,OAAO;sBACZC,IAAI,EAAC,OAAO;sBACZC,OAAO,EACL5E,eAAe,CAACF,cAAc,CAAC,KAC/B+E,MAAM,CAACC,YAAY,CAAC,EAAE,GAAGL,QAAQ,CAClC;sBACDM,QAAQ,EAAEA,CAAA,KACRlD,gBAAgB,CACdgD,MAAM,CAACC,YAAY,CAAC,EAAE,GAAGL,QAAQ,CACnC;oBACD;sBAAAV,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACF,CAAC,eACF/E,OAAA;sBAAO0E,SAAS,EAAC,aAAa;sBAAAC,QAAA,eAC5B3E,OAAA;wBACEiF,GAAG,EAAG,yBAAwBI,QAAQ,CAACzB,UAAW,EAAE;wBACpDsB,GAAG,EAAG,YAAWI,QAAQ,GAAG,CAAE,IAAGA,QAAQ,GAAG,CAAE;sBAAE;wBAAAV,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OACjD;oBAAC;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACG,CAAC;kBAAA,GAnBDO,QAAQ;oBAAAV,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAoBb,CACL;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACA,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACF,CAAC,gBAEN/E,OAAA;gBAAK0E,SAAS,EAAC,aAAa;gBAAAC,QAAA,eAC1B3E,OAAA,CAACF,UAAU;kBAAC+F,IAAI,EAAE,EAAG;kBAACC,KAAK,EAAE,GAAI;kBAACC,KAAK,EAAC;gBAAO;kBAAAnB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAE;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC/C;YACN;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC,GACN,IAAI,EAIfZ,aAAa,gBACbnE,OAAA;YAAK0E,SAAS,EAAC,mBAAmB;YAAAC,QAAA,GAAC,WAExB,eAAA3E,OAAA;cAAK0E,SAAS,EAAC,aAAa;cAAAC,QAAA,gBAE1B3E,OAAA;gBAAM0E,SAAS,EAAC,oBAAoB;gBAAAC,QAAA,GAAC,eACtB,EAACd,cAAc,CAAC7C,oBAAoB,GAAG,CAAC,CAAC;cAAA;gBAAA4D,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAClD,CAAC,eACP/E,OAAA;gBAAM0E,SAAS,EAAC,gBAAgB;gBAAAC,QAAA,GAC7B,GAAG,EAAC,KACF,EAACd,cAAc,CAACtD,OAAO,CAACQ,MAAM,CAAC;cAAA;gBAAA6D,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC9B,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACJ,CAAC,eACJ/E,OAAA;cAAI0E,SAAS,EAAC,UAAU;cAAAC,QAAA,EACrBpE,OAAO,IAAIA,OAAO,CAACQ,MAAM,GAAG,CAAC,IAAIR,OAAO,CAACI,cAAc,CAAC,gBACvDX,OAAA;gBAAA2E,QAAA,gBACE3E,OAAA;kBACEiF,GAAG,EAAG,yBAAwB1E,OAAO,CAACI,cAAc,CAAC,CAACiD,UAAW,EAAE;kBACnEsB,GAAG,EAAG,UAASvE,cAAc,GAAG,CAAE;gBAAE;kBAAAiE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACrC,CAAC,eACF/E,OAAA;kBAAI0E,SAAS,EAAC,mBAAmB;kBAAAC,QAAA,EAC9BlE,SAAS,CAAC0E,KAAK,CACdxE,cAAc,GAAG,CAAC,EAClBA,cAAc,GAAG,CAAC,GAAG,CACvB,CAAC,CAACyE,GAAG,CAAC,CAACC,QAAQ,EAAEC,QAAQ,kBACvBtF,OAAA;oBAAA2E,QAAA,gBACE3E,OAAA;sBACEuF,IAAI,EAAC,OAAO;sBACZC,IAAI,EAAC,OAAO;sBACZC,OAAO,EACL5E,eAAe,CAACF,cAAc,CAAC,KAC/B+E,MAAM,CAACC,YAAY,CAAC,EAAE,GAAGL,QAAQ,CAClC;sBACDM,QAAQ,EAAEA,CAAA,KACRlD,gBAAgB,CACdgD,MAAM,CAACC,YAAY,CAAC,EAAE,GAAGL,QAAQ,CACnC;oBACD;sBAAAV,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACF,CAAC,eACF/E,OAAA;sBAAO0E,SAAS,EAAC,aAAa;sBAAAC,QAAA,eAC5B3E,OAAA;wBACEiF,GAAG,EAAG,yBAAwBI,QAAQ,CAACzB,UAAW,EAAE;wBACpDsB,GAAG,EAAG,YAAWI,QAAQ,GAAG,CAAE,IAAGA,QAAQ,GAAG,CAAE;sBAAE;wBAAAV,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OACjD;oBAAC;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACG,CAAC;kBAAA,GAnBDO,QAAQ;oBAAAV,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAoBb,CACL;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACA,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACF,CAAC,gBAEN/E,OAAA;gBAAK0E,SAAS,EAAC,aAAa;gBAAAC,QAAA,eAC1B3E,OAAA,CAACF,UAAU;kBAAC+F,IAAI,EAAE,EAAG;kBAACC,KAAK,EAAE,GAAI;kBAACC,KAAK,EAAC;gBAAO;kBAAAnB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAE;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC/C;YACN;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC,GACN,IAAI,eAIJ/E,OAAA;YAAK0E,SAAS,EAAC;UAAY;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAEN/E,OAAA;QAAK0E,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACzB3E,OAAA;UAAQ0E,SAAS,EAAC,WAAW;UAACM,OAAO,EAAE7B,aAAc;UAAAwB,QAAA,EAAC;QAAsB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACrF/E,OAAA;UAAQ0E,SAAS,EAAC,WAAW;UAACM,OAAO,EAAElC,aAAc;UAAA6B,QAAA,EAAC;QAEtD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACT/E,OAAA;UACE0E,SAAS,EAAC,cAAc;UACxBM,OAAO,EAAEjC,oBAAqB;UAC9BiD,QAAQ,EAAErF,cAAc,KAAK,CAAE;UAAAgE,QAAA,gBAE/B3E,OAAA;YAAG0E,SAAS,EAAC;UAAyB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,aAC7C;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACT/E,OAAA;UACE0E,SAAS,EAAC,UAAU;UACpBM,OAAO,EAAE9B;UACT;UAAA;UAAAyB,QAAA,GAEChE,cAAc,KAAKJ,OAAO,CAACQ,MAAM,GAAG,CAAC,GAAG,QAAQ,GAAG,aAAa,eACjEf,OAAA;YAAG0E,SAAS,EAAC;UAA0B;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACN/E,OAAA;MAAK0E,SAAS,EAAC,cAAc;MAAAC,QAAA,eAC3B3E,OAAA,CAACH,YAAY;QAACoG,gBAAgB,EAAEzB,oBAAqB;QAACrE,cAAc,EAAEA,cAAe;QAACC,iBAAiB,EAAEA;MAAkB;QAAAwE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAE5H,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC7E,EAAA,CAvjBID,KAAK;AAAAiG,EAAA,GAALjG,KAAK;AAyjBX,eAAeA,KAAK;AAAC,IAAAiG,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}