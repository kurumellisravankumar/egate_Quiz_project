{"ast":null,"code":"var _jsxFileName = \"D:\\\\web projects files\\\\Current_egate_Quiz_project\\\\src\\\\Pages\\\\Paper\\\\Paper1.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// // import { useParams } from \"react-router-dom\";\n\n// const Paper1 = () => {\n//   // const { subi_id } = useParams();\n//   //     const [quizData, setQuizData] = useState([]);\n\n//   // console.log(quizData)\n//   // useEffect(() => {\n//   //   // Fetch data from the endpoint\n//   //   fetch(`http://localhost:10000/quiz_all/`+subi_id)\n\n//   //     .then((response) => response.json())\n//   //     .then((data) => setQuizData(data))\n//   //     .catch((error) => console.error('Error fetching data:', error));\n//   // }, [subi_id]);\n\n//   const [subjectNames, setSubjectNames] = useState([]);\n\n//   useEffect(() => {\n//     fetch(`http://localhost:4009/quiz_all/1`)\n//       .then((response) => response.json())\n//       .then((data) => {\n//         console.log(data); // Log the data received from the API\n//         setSubjectNames(data);\n//       })\n//       .catch((error) => console.error(\"Error fetching data:\", error));\n//   }, []);\n\n//   // const [answer, setAnswer] = useState([]);\n//   // useEffect(() => {\n//   //   // Fetch data from the endpoint\n//   //   fetch(`http://localhost:4009/answers/`)\n//   //     .then((response) => response.json())\n//   //     .then((data) => setAnswer(data))\n//   //     .catch((error) => console.error(\"Error fetching data:\", error));\n//   // }, []);\n\n//   return (\n//     <div>\n//       <h1>hii</h1>\n\n//       <div>\n//         {Array.isArray(subjectNames) && subjectNames.length > 0 ? (\n//           <div>\n//             {subjectNames.map((subjects) => (\n//               <li key={subjects.subi_id}>\n//                 <p>{subjects.subject_name}</p>\n//               </li>\n//             ))}\n//           </div>\n//         ) : (\n//           <p>No subjects available.</p>\n//         )}\n//         {/* <ul>\n//            {subjectNames.map((item) => (\n//           <li key={item.subi_id}>\n//             <p>{item.subject_name}</p>\n//           </li>\n//         ))}\n//         </ul> */}\n\n//         {/* <button>Mathematics</button>\n//                 <button>Physics</button>\n//                 <button>Chemistry</button> */}\n//       </div>\n\n//       {/* answers display */}\n//       {/* <div>\n//       {answer.map((ans) => (\n//           <li key={ans.subi_id}>\n//             <p>{ans.answer}</p>\n//           </li>\n//         ))}\n//       </div> */}\n\n//       {/* <h1>Quiz Questions</h1> */}\n//       <div>\n//         {/* {quizData.map((question) => (\n//           <div key={question.question_id}>\n//             <h3>Question {question.question_id}</h3>\n//             <img\n//               src={`data:image/png;base64,${question.question_img}`}\n//               alt={`Question ${question.question_id}`}\n//             />\n//             <ul>\n//               {question.options.map((option) => (\n//                 <li key={option.option_id}>\n//                   <img\n//                     src={`data:image/png;base64,${option.option_img}`}\n//                     alt={`Option ${option.option_id}`}\n//                   />\n//                 </li>\n//               ))}\n//             </ul>\n//           </div>\n//         ))} */}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Paper1;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Link, useParams } from \"react-router-dom\";\n// import PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\n// import \"./Paper.css\";\n// const Paper1 = () => {\n//   const [questionData, setQuestionData] = useState([]);\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//   const [Subjects, setSubjects] = useState([]);\n//   const { testCreationTableId, subjectId } = useParams();\n//   const [sections, setSections] = useState([]);\n\n//   useEffect(() => {\n//     const fetchSubjects = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/subjects/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setSubjects(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchSubjects();\n//   }, [testCreationTableId]);\n\n//   useEffect(() => {\n//     const fetchSections = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/fetchSections/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setSections(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchSections();\n//   }, [testCreationTableId]);\n\n//   useEffect(() => {\n//     const fetchQuestionData = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/getPaperData/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setQuestionData(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchQuestionData();\n//   }, [testCreationTableId]);\n\n//   const [selectedAnswers, setSelectedAnswers] = useState(\n//     Array(questionData.length).fill(\"\")\n//   );\n\n//   const handleNextClick = () => {\n//     // Update the current question index to move to the next question\n//     setCurrentQuestionIndex((prevIndex) =>\n//       prevIndex < questionData.length - 1 ? prevIndex + 1 : prevIndex\n//     );\n//   };\n\n//   const onAnswerSelected = (optionIndex) => {\n//     const updatedSelectedAnswers = [...selectedAnswers];\n//     updatedSelectedAnswers[currentQuestionIndex] = optionIndex;\n//     setSelectedAnswers(updatedSelectedAnswers);\n//   };\n\n//   const [activeQuestion, setActiveQuestion] = useState(0);\n//   const clearResponse = () => {\n//     const updatedSelectedAnswers = [...selectedAnswers];\n//     updatedSelectedAnswers[activeQuestion] = \"\";\n//     setSelectedAnswers(updatedSelectedAnswers);\n//   };\n\n//   const goToPreviousQuestion = () => {\n//     setCurrentQuestionIndex((prevIndex) => {\n//       // Save the current timer value for the question\n\n//       const updatedTimers = [...timers];\n\n//       updatedTimers[prevIndex] = timer;\n\n//       setTimers(updatedTimers);\n\n//       // Move to the previous question\n\n//       return prevIndex - 1;\n//     });\n\n//     if (questionData > 0) {\n//       setActiveQuestion(questionData - 1);\n//     }\n//   };\n\n//   // ---------------------------------Timer code Start--------------------------------\n//   const [timer, setTimer] = useState(0);\n//   const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\n\n//   const formatTime = (seconds) => {\n//     const hours = Math.floor(seconds / 3600);\n\n//     const minutes = Math.floor((seconds % 3600) / 60);\n\n//     const remainingSeconds = seconds % 60;\n\n//     return `${hours > 9 ? hours : \"0\" + hours}:${\n//       minutes > 9 ? minutes : \"0\" + minutes\n//     }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n//   };\n\n//   useEffect(() => {\n//     // Set the timer to the saved value for the current question\n//     setTimer(timers[currentQuestionIndex] || 0);\n//     let interval;\n//     interval = setInterval(() => {\n//       setTimer((prevTimer) => prevTimer + 1);\n//     }, 1000);\n//     // Clear the interval when the component unmounts or when the user moves to the next question\n//     return () => {\n//       clearInterval(interval);\n//     };\n//   }, [currentQuestionIndex, timers]);\n//   // ------------------------------------Timer code end--------------------------------\n\n//   return (\n//     <div>\n//       <div>\n//         <PaperHeader />\n//       </div>\n//       <div className=\"subjects\">\n//         {Subjects.map((subjectTitle, index) => (\n//           <li key={index}>\n//             <button className=\"subject-btn\">{subjectTitle.subjectName}</button>\n//           </li>\n//         ))}\n//       </div>\n//       <div className=\"second-header\">\n//         <div className=\"single-select-question\">\n//           {sections.map((sectionTitle,index)=>(\n//             <li key={index}>\n//               <p>{sectionTitle.sectionName}</p>\n//             </li>\n//           ))}\n//           {/* Single Select Question */}\n//         </div>\n//         <div className=\"right-header\">\n//           <div className=\"marks\">\n//             Marks: <div className=\"plus-mark\">+1</div>\n//             <div className=\"minus-mark\">-1</div>\n//           </div>\n//           <div>Timer: {formatTime(timer)}</div>\n//         </div>\n//       </div>\n//       {questionData.length > 0 && (\n//         <div>\n//           <h4>\n//             {currentQuestionIndex + 1}.\n//             <img\n//               src={questionData[currentQuestionIndex].question_img}\n//               alt={`Question ${currentQuestionIndex + 1}`}\n//             />\n//           </h4>\n\n//           {questionData[currentQuestionIndex].optionImages.map(\n//             (OptionImage, optionIndex) => (\n//               <li key={optionIndex}>\n//                 <input\n//                   type=\"radio\"\n//                   name={`question-${currentQuestionIndex}-option`}\n//                   value={optionIndex}\n//                   checked={\n//                     selectedAnswers[currentQuestionIndex] === optionIndex\n//                   }\n//                   onChange={() => onAnswerSelected(optionIndex)}\n//                 />\n//                 <img\n//                   key={optionIndex}\n//                   src={OptionImage.option_img}\n//                   alt={`Option ${optionIndex + 1}`}\n//                 />\n//               </li>\n//             )\n//           )}\n//           <div className=\"flex-right\">\n//             <button className=\"clear-btn\" onClick={clearResponse}>\n//               Clear Response\n//             </button>\n//             <button\n//               className=\"previous-btn\"\n//               onClick={goToPreviousQuestion}\n//               disabled={questionData === 0}\n//             >\n//               <i className=\"fa-solid fa-angles-left\"></i> Previous\n//             </button>\n//             <button className=\"save-btn\" onClick={handleNextClick}>\n//               Next <i className=\"fa-solid fa-angles-right\"></i>\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Paper1;\n\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const Paper1 = () => {\n//   const [sections, setSections] = useState([]);\n//   const { testCreationTableId } = useParams();\n\n//   useEffect(() => {\n//     const fetchSections = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:4009/quiz_all/${testCreationTableId}`);\n\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! Status: ${response.status}`);\n//         }\n\n//         const data = await response.json();\n//         console.log('Received data:', data);\n//         setSections(data);\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//       }\n//     };\n\n//     fetchSections();\n//   }, [testCreationTableId]); // Use testCreationTableId as a dependency to trigger fetch when it changes\n\n//   return (\n//     <div>\n//       {Object.values(sections).map((section) => (\n//         <div key={section.sectionId}>\n//           <h2>{section.sectionName}</h2>\n//           {section.questions.map((question) => (\n//             <div key={question.qustion_id}>\n//               {/* Display question image */}\n//               <img src={`data:image/png;base64,${question.question_img}`} alt={`Question ${question.qustion_id}`} />\n\n//               {/* Display option images */}\n//               <ul>\n//                 {question.option_img.map((option, index) => (\n//                   <li key={index}>\n//                     <img src={`data:image/png;base64,${option.option_img}`} alt={`Option ${option.Option_Index}`} />\n//                   </li>\n//                 ))}\n//               </ul>\n//             </div>\n//           ))}\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default Paper1;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Link, useParams } from \"react-router-dom\";\n// import PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\n// import \"./Paper.css\";\n// const Paper1 = () => {\n//   const [questionData, setQuestionData] = useState([]);\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//   const [Subjects, setSubjects] = useState([]);\n//   const { testCreationTableId, subjectId } = useParams();\n//   const [sections, setSections] = useState([]);\n\n//   useEffect(() => {\n//     const fetchSubjects = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/subjects/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setSubjects(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchSubjects();\n//   }, [testCreationTableId]);\n\n//   useEffect(() => {\n//     const fetchSections = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/fetchSections/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setSections(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchSections();\n//   }, [testCreationTableId]);\n\n//   useEffect(() => {\n//     const fetchQuestionData = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/getPaperData/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setQuestionData(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchQuestionData();\n//   }, [testCreationTableId]);\n\n//   const [selectedAnswers, setSelectedAnswers] = useState(\n//     Array(questionData.length).fill(\"\")\n//   );\n\n//   const handleNextClick = () => {\n//     // Update the current question index to move to the next question\n//     setCurrentQuestionIndex((prevIndex) =>\n//       prevIndex < questionData.length - 1 ? prevIndex + 1 : prevIndex\n//     );\n//   };\n\n//   const onAnswerSelected = (optionIndex) => {\n//     const updatedSelectedAnswers = [...selectedAnswers];\n//     updatedSelectedAnswers[currentQuestionIndex] = optionIndex;\n//     setSelectedAnswers(updatedSelectedAnswers);\n//   };\n\n//   const [activeQuestion, setActiveQuestion] = useState(0);\n//   const clearResponse = () => {\n//     const updatedSelectedAnswers = [...selectedAnswers];\n//     updatedSelectedAnswers[activeQuestion] = \"\";\n//     setSelectedAnswers(updatedSelectedAnswers);\n//   };\n\n//   const goToPreviousQuestion = () => {\n//     setCurrentQuestionIndex((prevIndex) => {\n//       // Save the current timer value for the question\n\n//       const updatedTimers = [...timers];\n\n//       updatedTimers[prevIndex] = timer;\n\n//       setTimers(updatedTimers);\n\n//       // Move to the previous question\n\n//       return prevIndex - 1;\n//     });\n\n//     if (questionData > 0) {\n//       setActiveQuestion(questionData - 1);\n//     }\n//   };\n\n//   // ---------------------------------Timer code Start--------------------------------\n//   const [timer, setTimer] = useState(0);\n//   const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\n\n//   const formatTime = (seconds) => {\n//     const hours = Math.floor(seconds / 3600);\n\n//     const minutes = Math.floor((seconds % 3600) / 60);\n\n//     const remainingSeconds = seconds % 60;\n\n//     return `${hours > 9 ? hours : \"0\" + hours}:${\n//       minutes > 9 ? minutes : \"0\" + minutes\n//     }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n//   };\n\n//   useEffect(() => {\n//     // Set the timer to the saved value for the current question\n//     setTimer(timers[currentQuestionIndex] || 0);\n//     let interval;\n//     interval = setInterval(() => {\n//       setTimer((prevTimer) => prevTimer + 1);\n//     }, 1000);\n//     // Clear the interval when the component unmounts or when the user moves to the next question\n//     return () => {\n//       clearInterval(interval);\n//     };\n//   }, [currentQuestionIndex, timers]);\n//   // ------------------------------------Timer code end--------------------------------\n\n//   return (\n//     <div>\n//       <div>\n//         <PaperHeader />\n//       </div>\n//       <div className=\"subjects\">\n//         {Subjects.map((subjectTitle, index) => (\n//           <li key={index}>\n//             <button className=\"subject-btn\">{subjectTitle.subjectName}</button>\n//           </li>\n//         ))}\n//       </div>\n//       <div className=\"second-header\">\n//         <div className=\"single-select-question\">\n//           {sections.map((sectionTitle,index)=>(\n//             <li key={index}>\n//               <p>{sectionTitle.sectionName}</p>\n//             </li>\n//           ))}\n//           {/* Single Select Question */}\n//         </div>\n//         <div className=\"right-header\">\n//           <div className=\"marks\">\n//             Marks: <div className=\"plus-mark\">+1</div>\n//             <div className=\"minus-mark\">-1</div>\n//           </div>\n//           <div>Timer: {formatTime(timer)}</div>\n//         </div>\n//       </div>\n//       {questionData.length > 0 && (\n//         <div>\n//           <h4>\n//             {currentQuestionIndex + 1}.\n//             <img\n//               src={questionData[currentQuestionIndex].question_img}\n//               alt={`Question ${currentQuestionIndex + 1}`}\n//             />\n//           </h4>\n\n//           {questionData[currentQuestionIndex].optionImages.map(\n//             (OptionImage, optionIndex) => (\n//               <li key={optionIndex}>\n//                 <input\n//                   type=\"radio\"\n//                   name={`question-${currentQuestionIndex}-option`}\n//                   value={optionIndex}\n//                   checked={\n//                     selectedAnswers[currentQuestionIndex] === optionIndex\n//                   }\n//                   onChange={() => onAnswerSelected(optionIndex)}\n//                 />\n//                 <img\n//                   key={optionIndex}\n//                   src={OptionImage.option_img}\n//                   alt={`Option ${optionIndex + 1}`}\n//                 />\n//               </li>\n//             )\n//           )}\n//           <div className=\"flex-right\">\n//             <button className=\"clear-btn\" onClick={clearResponse}>\n//               Clear Response\n//             </button>\n//             <button\n//               className=\"previous-btn\"\n//               onClick={goToPreviousQuestion}\n//               disabled={questionData === 0}\n//             >\n//               <i className=\"fa-solid fa-angles-left\"></i> Previous\n//             </button>\n//             <button className=\"save-btn\" onClick={handleNextClick}>\n//               Next <i className=\"fa-solid fa-angles-right\"></i>\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Paper1;\n\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const Paper1 = () => {\n//   const [sections, setSections] = useState([]);\n//   const { testCreationTableId } = useParams();\n\n//   useEffect(() => {\n//     const fetchSections = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:4009/quiz_all/${testCreationTableId}`);\n\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! Status: ${response.status}`);\n//         }\n\n//         const data = await response.json();\n//         console.log('Received data:', data);\n//         setSections(data);\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//       }\n//     };\n\n//     fetchSections();\n//   }, [testCreationTableId]); // Use testCreationTableId as a dependency to trigger fetch when it changes\n\n//   return (\n//     <div>\n//       {Object.values(sections).map((section) => (\n//         <div key={section.sectionId}>\n//           <h2>{section.sectionName}</h2>\n//           {section.questions.map((question) => (\n//             <div key={question.qustion_id}>\n//               {/* Display question image */}\n//               <img src={`data:image/png;base64,${question.question_img}`} alt={`Question ${question.qustion_id}`} />\n\n//               {/* Display option images */}\n//               <ul>\n//                 {question.option_img.map((option, index) => (\n//                   <li key={index}>\n//                     <img src={`data:image/png;base64,${option.option_img}`} alt={`Option ${option.Option_Index}`} />\n//                   </li>\n//                 ))}\n//               </ul>\n//             </div>\n//           ))}\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default Paper1;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n\n// function Paper1() {\n\n//   const [questionData, setQuestionData] = useState([]);\n//   const {testCreationTableId} = useParams();\n\n//   useEffect(() => {\n//     const fetchQuestionData = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/getPaperData/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setQuestionData(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchQuestionData();\n//   }, [testCreationTableId]);\n\n//   return (\n//     <div>\n//       {/* Access data as needed, for example: */}\n\n//       {/* Map over questions and render them */}\n//       <div\n//         className=\"q1s\"\n//         style={{\n//           display: \"flex\",\n//           gap: \"4rem\",\n//           flexDirection: \"column\",\n//           width: \"85vw\",\n//           margin: \"2rem\",\n//         }}\n//       >\n//         {questionData.map((question, index) => (\n//           <div\n//             className=\"outColor\"\n//             style={{ background: \"#e5e5e5\", padding: \"2rem 2rem\" }}\n//           >\n//             <div key={question.question_id}>\n//               <div className=\"question\" key={index}>\n//                 <h3>{index + 1}</h3>\n//                 <img\n//                   src={`data:image/png;base64,${question.question_img}`}\n//                   alt=\"Question\"\n//                 />\n//               </div>\n\n//               {/* Map over options and render them */}\n//               {questionData\n//                 .filter((opt) => opt.question_id === question.question_id)\n//                 .map((option) => (\n\n//                     <img\n//                       key={option.question_id}\n//                       src={`data:image/png;base64,${option.option_img}`}\n//                       alt=\"Option\"\n//                     />\n\n//                 ))}\n\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Paper1;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n\n// function Paper1() {\n//   const [questionData, setQuestionData] = useState([]);\n\n//   const { testCreationTableId } = useParams();\n\n//   useEffect(() => {\n//     const fetchQuestionData = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/getPaperData/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n\n//         // Check if the data has both 'questions' and 'options' properties\n//         if (data && data.questions && data.options) {\n//           // Assuming both questions and options are arrays, you might want to merge them\n//           const mergedData = data.questions.map((question, index) => ({\n//             ...question,\n//             options: data.options.slice(index * 4, (index + 1) * 4), // Assuming 4 options per question\n//           }));\n\n//           setQuestionData(mergedData);\n//         } else {\n//           console.error(\"API response does not have expected structure:\", data);\n//         }\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchQuestionData();\n//   }, [testCreationTableId]);\n\n//   // useEffect(() => {\n//   //   const fetchQuestionData = async () => {\n//   //     try {\n//   //       const response = await fetch(\n//   //         `http://localhost:4009/getPaperData/${testCreationTableId}`\n//   //       );\n//   //       const data = await response.json();\n\n//   //       // Check if the data is an array before setting state\n//   //       if (Array.isArray(data)) {\n//   //         setQuestionData(data);\n//   //       } else {\n//   //         console.error(\"API response is not an array:\", data);\n//   //       }\n//   //     } catch (error) {\n//   //       console.error(error);\n//   //     }\n//   //   };\n\n//   //   fetchQuestionData();\n//   // }, [testCreationTableId]);\n\n//   return (\n//     <div>\n//       <div\n\n//       >\n//         {questionData.map((question, index) => (\n//           <div\n\n//             key={question.question_id}\n//           >\n//             <div className=\"question\" key={index}>\n//               <h3>{index + 1}</h3>\n//               <img\n//                 src={`data:image/png;base64,${question.question_img}`}\n//                 alt=\"Question\"\n//               />\n//             </div>\n\n//             {questionData\n//               .filter((opt) => opt.question_id === question.question_id)\n//               .map((option) => (\n//                 <img\n//                   key={option.question_id}\n//                   src={`data:image/png;base64,${option.option_img}`}\n//                   alt=\"Option\"\n//                 />\n//               ))}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Paper1;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\n// function Paper1() {\n//   const [questionData, setQuestionData] = useState([]);\n//   const { testCreationTableId } = useParams();\n\n//   useEffect(() => {\n//     const fetchQuestionData = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/getPaperData/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n\n//         // Check if the data has both 'questions' and 'options' properties\n//         if (data && data.questions && data.options) {\n//           // Assuming both questions and options are arrays, you might want to merge them\n//           const mergedData = data.questions.map((question, index) => ({\n//             ...question,\n//             options: data.options.slice(index * 4, (index + 1) * 4), // Assuming 4 options per question\n//           }));\n\n//           setQuestionData(mergedData);\n//         } else {\n//           console.error(\"API response does not have expected structure:\", data);\n//         }\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchQuestionData();\n//   }, [testCreationTableId]);\n\n//   const [Subjects, setSubjects] = useState([]);\n//   // const { testCreationTableId, subjectId } = useParams();\n//   const [sections, setSections] = useState([]);\n\n//   useEffect(() => {\n//     const fetchSubjects = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/subjects/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setSubjects(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchSubjects();\n//   }, [testCreationTableId]);\n\n//   useEffect(() => {\n//     const fetchSections = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/fetchSections/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setSections(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchSections();\n//   }, [testCreationTableId]);\n\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//   const [selectedAnswers, setSelectedAnswers] = useState(\n//     Array(questionData.length).fill(\"\")\n//   );\n\n//   const handleNextClick = () => {\n//     // Update the current question index to move to the next question\n//     setCurrentQuestionIndex((prevIndex) =>\n//       prevIndex < questionData.length - 1 ? prevIndex + 1 : prevIndex\n//     );\n//   };\n\n//   const onAnswerSelected = (optionIndex) => {\n//     const updatedSelectedAnswers = [...selectedAnswers];\n//     updatedSelectedAnswers[currentQuestionIndex] = optionIndex;\n//     setSelectedAnswers(updatedSelectedAnswers);\n//   };\n\n//   const [activeQuestion, setActiveQuestion] = useState(0);\n//   const clearResponse = () => {\n//     const updatedSelectedAnswers = [...selectedAnswers];\n//     updatedSelectedAnswers[activeQuestion] = \"\";\n//     setSelectedAnswers(updatedSelectedAnswers);\n//   };\n\n//   const goToPreviousQuestion = () => {\n//     setCurrentQuestionIndex((prevIndex) => {\n//       // Save the current timer value for the question\n\n//       const updatedTimers = [...timers];\n\n//       updatedTimers[prevIndex] = timer;\n\n//       setTimers(updatedTimers);\n\n//       // Move to the previous question\n\n//       return prevIndex - 1;\n//     });\n\n//     if (questionData > 0) {\n//       setActiveQuestion(questionData - 1);\n//     }\n//   };\n\n//   const [timer, setTimer] = useState(0);\n//   const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\n\n//   const formatTime = (seconds) => {\n//     const hours = Math.floor(seconds / 3600);\n\n//     const minutes = Math.floor((seconds % 3600) / 60);\n\n//     const remainingSeconds = seconds % 60;\n\n//     return `${hours > 9 ? hours : \"0\" + hours}:${\n//       minutes > 9 ? minutes : \"0\" + minutes\n//     }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n//   };\n\n//   useEffect(() => {\n//     // Set the timer to the saved value for the current question\n//     setTimer(timers[currentQuestionIndex] || 0);\n//     let interval;\n//     interval = setInterval(() => {\n//       setTimer((prevTimer) => prevTimer + 1);\n//     }, 1000);\n//     // Clear the interval when the component unmounts or when the user moves to the next question\n//     return () => {\n//       clearInterval(interval);\n//     };\n//   }, [currentQuestionIndex, timers]);\n\n//   return (\n//     <div>\n//       <div>\n//         <PaperHeader />\n//       </div>\n//       <div className=\"subjects\">\n//         {Subjects.map((subjectTitle, index) => (\n//           <li key={index}>\n//             <button className=\"subject-btn\">{subjectTitle.subjectName}</button>\n//           </li>\n//         ))}\n//       </div>\n//       <div className=\"second-header\">\n//         <div className=\"single-select-question\">\n//           {sections.map((sectionTitle, index) => (\n//             <li key={index}>\n//               <p>{sectionTitle.sectionName}</p>\n//             </li>\n//           ))}\n//           {/* Single Select Question */}\n//         </div>\n//         <div className=\"right-header\">\n//           <div className=\"marks\">\n//             Marks: <div className=\"plus-mark\">+1</div>\n//             <div className=\"minus-mark\">-1</div>\n//           </div>\n//           <div>Timer: {formatTime(timer)}</div>\n//         </div>\n//       </div>\n\n//           <div>\n//           {questionData.map((question, index) => (\n//             <>\n//               <div key={question.question_id}>\n//                 <div className=\"question\" key={index}>\n//                   <h3>{index + 1}</h3>\n//                   {question.question_img ? (\n//                     <img\n//                       src={`data:image/png;base64,${question.question_img}`}\n//                       alt=\"Question\"\n//                     />\n//                   ) : (\n//                     <p>No question image available</p>\n//                   )}\n//                 </div>\n\n//                 {question.options &&\n//                   question.options.map((option, optionIndex) => (\n//                     <div key={option.question_id}>\n//                       {option.option_img ? (\n//                         <li key={optionIndex}>\n//                           <input\n//                             type=\"radio\"\n//                             name={`question-${currentQuestionIndex}-option`}\n//                             value={optionIndex}\n//                             checked={\n//                               selectedAnswers[currentQuestionIndex] ===\n//                               optionIndex\n//                             }\n//                             onChange={() => onAnswerSelected(optionIndex)}\n//                           />\n//                           <img\n//                             src={`data:image/png;base64,${option.option_img}`}\n//                             alt=\"Option\"\n//                           />\n//                         </li>\n//                       ) : (\n//                         <p>No option image available</p>\n//                       )}\n//                     </div>\n//                   ))}\n//               </div>\n//               {/* <div className=\"flex-right\">\n//                 <button className=\"clear-btn\" onClick={clearResponse}>\n//                   Clear Response\n//                 </button>\n//                 <button\n//                   className=\"previous-btn\"\n//                   onClick={goToPreviousQuestion}\n//                   disabled={questionData === 0}\n//                 >\n//                   <i className=\"fa-solid fa-angles-left\"></i> Previous\n//                 </button>\n//                 <button className=\"save-btn\" onClick={handleNextClick}>\n//                   Next <i className=\"fa-solid fa-angles-right\"></i>\n//                 </button>\n//               </div> */}\n//             </>\n//           ))}\n//         </div>\n\n//     </div>\n//   );\n// }\n\n// export default Paper1;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\n// function Paper1() {\n//   const [questionData, setQuestionData] = useState([]);\n//   const { testCreationTableId } = useParams();\n\n//   useEffect(() => {\n//     const fetchQuestionData = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/getPaperData/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n\n//         // Check if the data has both 'questions' and 'options' properties\n//         if (data && data.questions && data.options) {\n//           // Assuming both questions and options are arrays, you might want to merge them\n//           const mergedData = data.questions.map((question, index) => ({\n//             ...question,\n//             options: data.options.slice(index * 4, (index + 1) * 4), // Assuming 4 options per question\n//           }));\n\n//           setQuestionData(mergedData);\n//         } else {\n//           console.error(\"API response does not have expected structure:\", data);\n//         }\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchQuestionData();\n//   }, [testCreationTableId]);\n\n//   const [Subjects, setSubjects] = useState([]);\n//   // const { testCreationTableId, subjectId } = useParams();\n//   const [sections, setSections] = useState([]);\n\n//   useEffect(() => {\n//     const fetchSubjects = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/subjects/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setSubjects(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchSubjects();\n//   }, [testCreationTableId]);\n\n//   useEffect(() => {\n//     const fetchSections = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/fetchSections/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setSections(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchSections();\n//   }, [testCreationTableId]);\n\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//   const [selectedAnswers, setSelectedAnswers] = useState(\n//     Array(questionData.length).fill(\"\")\n//   );\n\n//   const handleNextClick = () => {\n//     // Update the current question index to move to the next question\n//     setCurrentQuestionIndex((prevIndex) =>\n//       prevIndex < questionData.length - 1 ? prevIndex + 1 : prevIndex\n//     );\n//   };\n\n//   const onAnswerSelected = (optionIndex) => {\n//     const updatedSelectedAnswers = [...selectedAnswers];\n//     updatedSelectedAnswers[currentQuestionIndex] = optionIndex;\n//     setSelectedAnswers(updatedSelectedAnswers);\n//   };\n\n//   const [activeQuestion, setActiveQuestion] = useState(0);\n//   const clearResponse = () => {\n//     const updatedSelectedAnswers = [...selectedAnswers];\n//     updatedSelectedAnswers[activeQuestion] = \"\";\n//     setSelectedAnswers(updatedSelectedAnswers);\n//   };\n\n//   const goToPreviousQuestion = () => {\n//     setCurrentQuestionIndex((prevIndex) => {\n//       // Save the current timer value for the question\n\n//       const updatedTimers = [...timers];\n\n//       updatedTimers[prevIndex] = timer;\n\n//       setTimers(updatedTimers);\n\n//       // Move to the previous question\n\n//       return prevIndex - 1;\n//     });\n\n//     if (questionData > 0) {\n//       setActiveQuestion(questionData - 1);\n//     }\n//   };\n\n//   const [timer, setTimer] = useState(0);\n//   const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\n\n//   const formatTime = (seconds) => {\n//     const hours = Math.floor(seconds / 3600);\n\n//     const minutes = Math.floor((seconds % 3600) / 60);\n\n//     const remainingSeconds = seconds % 60;\n\n//     return `${hours > 9 ? hours : \"0\" + hours}:${\n//       minutes > 9 ? minutes : \"0\" + minutes\n//     }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n//   };\n\n//   useEffect(() => {\n//     // Set the timer to the saved value for the current question\n//     setTimer(timers[currentQuestionIndex] || 0);\n//     let interval;\n//     interval = setInterval(() => {\n//       setTimer((prevTimer) => prevTimer + 1);\n//     }, 1000);\n//     // Clear the interval when the component unmounts or when the user moves to the next question\n//     return () => {\n//       clearInterval(interval);\n//     };\n//   }, [currentQuestionIndex, timers]);\n\n//   return (\n//     <div>\n//       <div>\n//         <PaperHeader />\n//       </div>\n//       <div className=\"subjects\">\n//         {Subjects.map((subjectTitle, index) => (\n//           <li key={index}>\n//             <button className=\"subject-btn\">{subjectTitle.subjectName}</button>\n//           </li>\n//         ))}\n//       </div>\n//       <div className=\"second-header\">\n//         <div className=\"single-select-question\">\n//           {sections.map((sectionTitle, index) => (\n//             <li key={index}>\n//               <p>{sectionTitle.sectionName}</p>\n//             </li>\n//           ))}\n//           {/* Single Select Question */}\n//         </div>\n//         <div className=\"right-header\">\n//           <div className=\"marks\">\n//             Marks: <div className=\"plus-mark\">+1</div>\n//             <div className=\"minus-mark\">-1</div>\n//           </div>\n//           <div>Timer: {formatTime(timer)}</div>\n//         </div>\n//       </div>\n//       {questionData.length > 0 && (\n//         <div>\n//           {questionData.map((question, index) => (\n//             <>\n//               <div key={question.question_id}>\n//                 <div className=\"question\" key={index}>\n//                   <h4>\n//                     {currentQuestionIndex + 1}.\n//                     <img\n//                       src={`data:image/png;base64,${questionData[currentQuestionIndex].question_img}`}\n//                       alt={`Question ${currentQuestionIndex + 1}`}\n//                     />\n//                   </h4>\n//                 </div>\n\n//                 {questionData[currentQuestionIndex].optionImages.map(\n//                   (OptionImage, optionIndex) => (\n//                     <li key={optionIndex}>\n//                       <input\n//                         type=\"radio\"\n//                         name={`question-${currentQuestionIndex}-option`}\n//                         value={optionIndex}\n//                         checked={\n//                           selectedAnswers[currentQuestionIndex] === optionIndex\n//                         }\n//                         onChange={() => onAnswerSelected(optionIndex)}\n//                       />\n//                       <img\n//                         key={optionIndex}\n//                         src={`data:image/png;base64,${OptionImage.option_img}`}\n//                         alt={`Option ${optionIndex + 1}`}\n//                       />\n//                     </li>\n//                   )\n//                 )}\n\n//               </div>\n//               <div className=\"flex-right\">\n//                 <button className=\"clear-btn\" onClick={clearResponse}>\n//                   Clear Response\n//                 </button>\n//                 <button\n//                   className=\"previous-btn\"\n//                   onClick={goToPreviousQuestion}\n//                   disabled={questionData === 0}\n//                 >\n//                   <i className=\"fa-solid fa-angles-left\"></i> Previous\n//                 </button>\n//                 <button className=\"save-btn\" onClick={handleNextClick}>\n//                   Next <i className=\"fa-solid fa-angles-right\"></i>\n//                 </button>\n//               </div>\n//             </>\n//            ))}\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default Paper1;\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\nimport \"./Paper.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Paper1 = () => {\n  _s();\n  const [questionData, setQuestionData] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [Subjects, setSubjects] = useState([]);\n  const {\n    testCreationTableId,\n    subjectId\n  } = useParams();\n  const [sections, setSections] = useState([]);\n  useEffect(() => {\n    const fetchSubjects = async () => {\n      try {\n        const response = await fetch(`http://localhost:4009/subjects/${testCreationTableId}`);\n        const data = await response.json();\n        setSubjects(data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchSubjects();\n  }, [testCreationTableId]);\n  useEffect(() => {\n    const fetchSections = async () => {\n      try {\n        const response = await fetch(`http://localhost:4009/fetchSections/${testCreationTableId}`);\n        const data = await response.json();\n        setSections(data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchSections();\n  }, [testCreationTableId]);\n  useEffect(() => {\n    const fetchQuestionData = async () => {\n      try {\n        const response = await fetch(`http://localhost:4009/getPaperData/${testCreationTableId}`);\n        const data = await response.json();\n\n        // Check if the data has both 'questions' and 'options' properties\n        if (data && data.questions && data.options) {\n          // Assuming both questions and options are arrays, you might want to merge them\n          const mergedData = data.questions.map((question, index) => ({\n            ...question,\n            options: data.options.slice(index * 4, (index + 1) * 4) // Assuming 4 options per question\n          }));\n\n          setQuestionData(mergedData);\n        } else {\n          console.error(\"API response does not have expected structure:\", data);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchQuestionData();\n  }, [testCreationTableId]);\n  const [selectedAnswers, setSelectedAnswers] = useState(Array(questionData.length).fill(\"\"));\n  const handleNextClick = () => {\n    // Update the current question index to move to the next question\n    setCurrentQuestionIndex(prevIndex => prevIndex < questionData.length - 1 ? prevIndex + 1 : prevIndex);\n  };\n  const onAnswerSelected = optionIndex => {\n    const updatedSelectedAnswers = [...selectedAnswers];\n    updatedSelectedAnswers[currentQuestionIndex] = optionIndex;\n    setSelectedAnswers(updatedSelectedAnswers);\n  };\n  const [activeQuestion, setActiveQuestion] = useState(0);\n  const clearResponse = () => {\n    const updatedSelectedAnswers = [...selectedAnswers];\n    updatedSelectedAnswers[activeQuestion] = \"\";\n    setSelectedAnswers(updatedSelectedAnswers);\n  };\n  const goToPreviousQuestion = () => {\n    setCurrentQuestionIndex(prevIndex => {\n      // Save the current timer value for the question\n      const updatedTimers = [...timers];\n      updatedTimers[prevIndex] = timer;\n      setTimers(updatedTimers);\n      // Move to the previous question\n      return prevIndex - 1;\n    });\n    if (questionData > 0) {\n      setActiveQuestion(questionData - 1);\n    }\n  };\n\n  // ---------------------------------Timer code Start--------------------------------\n  const [timer, setTimer] = useState(0);\n  const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\n  const formatTime = seconds => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor(seconds % 3600 / 60);\n    const remainingSeconds = seconds % 60;\n    return `${hours > 9 ? hours : \"0\" + hours}:${minutes > 9 ? minutes : \"0\" + minutes}:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n  };\n  useEffect(() => {\n    // Set the timer to the saved value for the current question\n    setTimer(timers[currentQuestionIndex] || 0);\n    let interval;\n    interval = setInterval(() => {\n      setTimer(prevTimer => prevTimer + 1);\n    }, 1000);\n    // Clear the interval when the component unmounts or when the user moves to the next question\n    return () => {\n      clearInterval(interval);\n    };\n  }, [currentQuestionIndex, timers]);\n  // ------------------------------------Timer code end--------------------------------\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(PaperHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1434,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1433,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"subjects\",\n      children: Subjects.map((subjectTitle, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"subject-btn\",\n          children: subjectTitle.subjectName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1439,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1438,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1436,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"second-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"single-select-question\",\n        children: sections.map((sectionTitle, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: sectionTitle.sectionName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1448,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1447,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1445,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"marks\",\n          children: [\"Marks: \", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"plus-mark\",\n            children: \"+1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1455,\n            columnNumber: 20\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"minus-mark\",\n            children: \"-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1456,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1454,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Timer: \", formatTime(timer)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1458,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1453,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1444,\n      columnNumber: 7\n    }, this), questionData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Question \", currentQuestionIndex + 1, \" out of \", questionData.length, /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `data:image/png;base64,${questionData[currentQuestionIndex].question_img}`,\n          alt: `Question ${currentQuestionIndex + 1}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1467,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1464,\n        columnNumber: 11\n      }, this), questionData[currentQuestionIndex].options.map((OptionImage, optionIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: `question-${currentQuestionIndex}-option`,\n          value: optionIndex,\n          checked: selectedAnswers[currentQuestionIndex] === optionIndex,\n          onChange: () => onAnswerSelected(optionIndex)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1476,\n          columnNumber: 17\n        }, this), OptionImage && OptionImage.option_img && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `data:image/png;base64,${OptionImage.option_img}`,\n          alt: `Option ${optionIndex + 1}`\n        }, OptionImage.question_id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1486,\n          columnNumber: 19\n        }, this)]\n      }, optionIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1475,\n        columnNumber: 15\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-right\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"clear-btn\",\n          onClick: clearResponse,\n          children: \"Clear Response\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1496,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"previous-btn\",\n          onClick: goToPreviousQuestion,\n          disabled: questionData === 0,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa-solid fa-angles-left\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1504,\n            columnNumber: 15\n          }, this), \" Previous\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1499,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-btn\",\n          onClick: handleNextClick,\n          children: [\"Next \", /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa-solid fa-angles-right\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1507,\n            columnNumber: 20\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1506,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1495,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1463,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1432,\n    columnNumber: 5\n  }, this);\n};\n_s(Paper1, \"0hAN0UvJxykzlI7hBdk7c9cPQ1c=\", false, function () {\n  return [useParams];\n});\n_c = Paper1;\nexport default Paper1;\nvar _c;\n$RefreshReg$(_c, \"Paper1\");","map":{"version":3,"names":["React","useState","useEffect","Link","useParams","PaperHeader","jsxDEV","_jsxDEV","Paper1","_s","questionData","setQuestionData","currentQuestionIndex","setCurrentQuestionIndex","Subjects","setSubjects","testCreationTableId","subjectId","sections","setSections","fetchSubjects","response","fetch","data","json","error","console","fetchSections","fetchQuestionData","questions","options","mergedData","map","question","index","slice","selectedAnswers","setSelectedAnswers","Array","length","fill","handleNextClick","prevIndex","onAnswerSelected","optionIndex","updatedSelectedAnswers","activeQuestion","setActiveQuestion","clearResponse","goToPreviousQuestion","updatedTimers","timers","timer","setTimers","setTimer","formatTime","seconds","hours","Math","floor","minutes","remainingSeconds","interval","setInterval","prevTimer","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","className","subjectTitle","subjectName","sectionTitle","sectionName","src","question_img","alt","OptionImage","type","name","value","checked","onChange","option_img","question_id","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/web projects files/Current_egate_Quiz_project/src/Pages/Paper/Paper1.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// // import { useParams } from \"react-router-dom\";\r\n\r\n// const Paper1 = () => {\r\n//   // const { subi_id } = useParams();\r\n//   //     const [quizData, setQuizData] = useState([]);\r\n\r\n//   // console.log(quizData)\r\n//   // useEffect(() => {\r\n//   //   // Fetch data from the endpoint\r\n//   //   fetch(`http://localhost:10000/quiz_all/`+subi_id)\r\n\r\n//   //     .then((response) => response.json())\r\n//   //     .then((data) => setQuizData(data))\r\n//   //     .catch((error) => console.error('Error fetching data:', error));\r\n//   // }, [subi_id]);\r\n\r\n//   const [subjectNames, setSubjectNames] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     fetch(`http://localhost:4009/quiz_all/1`)\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         console.log(data); // Log the data received from the API\r\n//         setSubjectNames(data);\r\n//       })\r\n//       .catch((error) => console.error(\"Error fetching data:\", error));\r\n//   }, []);\r\n\r\n//   // const [answer, setAnswer] = useState([]);\r\n//   // useEffect(() => {\r\n//   //   // Fetch data from the endpoint\r\n//   //   fetch(`http://localhost:4009/answers/`)\r\n//   //     .then((response) => response.json())\r\n//   //     .then((data) => setAnswer(data))\r\n//   //     .catch((error) => console.error(\"Error fetching data:\", error));\r\n//   // }, []);\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>hii</h1>\r\n\r\n//       <div>\r\n//         {Array.isArray(subjectNames) && subjectNames.length > 0 ? (\r\n//           <div>\r\n//             {subjectNames.map((subjects) => (\r\n//               <li key={subjects.subi_id}>\r\n//                 <p>{subjects.subject_name}</p>\r\n//               </li>\r\n//             ))}\r\n//           </div>\r\n//         ) : (\r\n//           <p>No subjects available.</p>\r\n//         )}\r\n//         {/* <ul>\r\n//            {subjectNames.map((item) => (\r\n//           <li key={item.subi_id}>\r\n//             <p>{item.subject_name}</p>\r\n//           </li>\r\n//         ))}\r\n//         </ul> */}\r\n\r\n//         {/* <button>Mathematics</button>\r\n//                 <button>Physics</button>\r\n//                 <button>Chemistry</button> */}\r\n//       </div>\r\n\r\n//       {/* answers display */}\r\n//       {/* <div>\r\n//       {answer.map((ans) => (\r\n//           <li key={ans.subi_id}>\r\n//             <p>{ans.answer}</p>\r\n//           </li>\r\n//         ))}\r\n//       </div> */}\r\n\r\n//       {/* <h1>Quiz Questions</h1> */}\r\n//       <div>\r\n//         {/* {quizData.map((question) => (\r\n//           <div key={question.question_id}>\r\n//             <h3>Question {question.question_id}</h3>\r\n//             <img\r\n//               src={`data:image/png;base64,${question.question_img}`}\r\n//               alt={`Question ${question.question_id}`}\r\n//             />\r\n//             <ul>\r\n//               {question.options.map((option) => (\r\n//                 <li key={option.option_id}>\r\n//                   <img\r\n//                     src={`data:image/png;base64,${option.option_img}`}\r\n//                     alt={`Option ${option.option_id}`}\r\n//                   />\r\n//                 </li>\r\n//               ))}\r\n//             </ul>\r\n//           </div>\r\n//         ))} */}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Paper1;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { Link, useParams } from \"react-router-dom\";\r\n// import PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\r\n// import \"./Paper.css\";\r\n// const Paper1 = () => {\r\n//   const [questionData, setQuestionData] = useState([]);\r\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n//   const [Subjects, setSubjects] = useState([]);\r\n//   const { testCreationTableId, subjectId } = useParams();\r\n//   const [sections, setSections] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchSubjects = async () => {\r\n//       try {\r\n//         const response = await fetch(\r\n//           `http://localhost:4009/subjects/${testCreationTableId}`\r\n//         );\r\n//         const data = await response.json();\r\n//         setSubjects(data);\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//       }\r\n//     };\r\n\r\n//     fetchSubjects();\r\n//   }, [testCreationTableId]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchSections = async () => {\r\n//       try {\r\n//         const response = await fetch(\r\n//           `http://localhost:4009/fetchSections/${testCreationTableId}`\r\n//         );\r\n//         const data = await response.json();\r\n//         setSections(data);\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//       }\r\n//     };\r\n\r\n//     fetchSections();\r\n//   }, [testCreationTableId]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchQuestionData = async () => {\r\n//       try {\r\n//         const response = await fetch(\r\n//           `http://localhost:4009/getPaperData/${testCreationTableId}`\r\n//         );\r\n//         const data = await response.json();\r\n//         setQuestionData(data);\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//       }\r\n//     };\r\n\r\n//     fetchQuestionData();\r\n//   }, [testCreationTableId]);\r\n\r\n//   const [selectedAnswers, setSelectedAnswers] = useState(\r\n//     Array(questionData.length).fill(\"\")\r\n//   );\r\n\r\n//   const handleNextClick = () => {\r\n//     // Update the current question index to move to the next question\r\n//     setCurrentQuestionIndex((prevIndex) =>\r\n//       prevIndex < questionData.length - 1 ? prevIndex + 1 : prevIndex\r\n//     );\r\n//   };\r\n\r\n//   const onAnswerSelected = (optionIndex) => {\r\n//     const updatedSelectedAnswers = [...selectedAnswers];\r\n//     updatedSelectedAnswers[currentQuestionIndex] = optionIndex;\r\n//     setSelectedAnswers(updatedSelectedAnswers);\r\n//   };\r\n\r\n//   const [activeQuestion, setActiveQuestion] = useState(0);\r\n//   const clearResponse = () => {\r\n//     const updatedSelectedAnswers = [...selectedAnswers];\r\n//     updatedSelectedAnswers[activeQuestion] = \"\";\r\n//     setSelectedAnswers(updatedSelectedAnswers);\r\n//   };\r\n\r\n//   const goToPreviousQuestion = () => {\r\n//     setCurrentQuestionIndex((prevIndex) => {\r\n//       // Save the current timer value for the question\r\n\r\n//       const updatedTimers = [...timers];\r\n\r\n//       updatedTimers[prevIndex] = timer;\r\n\r\n//       setTimers(updatedTimers);\r\n\r\n//       // Move to the previous question\r\n\r\n//       return prevIndex - 1;\r\n//     });\r\n\r\n//     if (questionData > 0) {\r\n//       setActiveQuestion(questionData - 1);\r\n//     }\r\n//   };\r\n\r\n//   // ---------------------------------Timer code Start--------------------------------\r\n//   const [timer, setTimer] = useState(0);\r\n//   const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\r\n\r\n//   const formatTime = (seconds) => {\r\n//     const hours = Math.floor(seconds / 3600);\r\n\r\n//     const minutes = Math.floor((seconds % 3600) / 60);\r\n\r\n//     const remainingSeconds = seconds % 60;\r\n\r\n//     return `${hours > 9 ? hours : \"0\" + hours}:${\r\n//       minutes > 9 ? minutes : \"0\" + minutes\r\n//     }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     // Set the timer to the saved value for the current question\r\n//     setTimer(timers[currentQuestionIndex] || 0);\r\n//     let interval;\r\n//     interval = setInterval(() => {\r\n//       setTimer((prevTimer) => prevTimer + 1);\r\n//     }, 1000);\r\n//     // Clear the interval when the component unmounts or when the user moves to the next question\r\n//     return () => {\r\n//       clearInterval(interval);\r\n//     };\r\n//   }, [currentQuestionIndex, timers]);\r\n//   // ------------------------------------Timer code end--------------------------------\r\n\r\n//   return (\r\n//     <div>\r\n//       <div>\r\n//         <PaperHeader />\r\n//       </div>\r\n//       <div className=\"subjects\">\r\n//         {Subjects.map((subjectTitle, index) => (\r\n//           <li key={index}>\r\n//             <button className=\"subject-btn\">{subjectTitle.subjectName}</button>\r\n//           </li>\r\n//         ))}\r\n//       </div>\r\n//       <div className=\"second-header\">\r\n//         <div className=\"single-select-question\">\r\n//           {sections.map((sectionTitle,index)=>(\r\n//             <li key={index}>\r\n//               <p>{sectionTitle.sectionName}</p>\r\n//             </li>\r\n//           ))}\r\n//           {/* Single Select Question */}\r\n//         </div>\r\n//         <div className=\"right-header\">\r\n//           <div className=\"marks\">\r\n//             Marks: <div className=\"plus-mark\">+1</div>\r\n//             <div className=\"minus-mark\">-1</div>\r\n//           </div>\r\n//           <div>Timer: {formatTime(timer)}</div>\r\n//         </div>\r\n//       </div>\r\n//       {questionData.length > 0 && (\r\n//         <div>\r\n//           <h4>\r\n//             {currentQuestionIndex + 1}.\r\n//             <img\r\n//               src={questionData[currentQuestionIndex].question_img}\r\n//               alt={`Question ${currentQuestionIndex + 1}`}\r\n//             />\r\n//           </h4>\r\n\r\n//           {questionData[currentQuestionIndex].optionImages.map(\r\n//             (OptionImage, optionIndex) => (\r\n//               <li key={optionIndex}>\r\n//                 <input\r\n//                   type=\"radio\"\r\n//                   name={`question-${currentQuestionIndex}-option`}\r\n//                   value={optionIndex}\r\n//                   checked={\r\n//                     selectedAnswers[currentQuestionIndex] === optionIndex\r\n//                   }\r\n//                   onChange={() => onAnswerSelected(optionIndex)}\r\n//                 />\r\n//                 <img\r\n//                   key={optionIndex}\r\n//                   src={OptionImage.option_img}\r\n//                   alt={`Option ${optionIndex + 1}`}\r\n//                 />\r\n//               </li>\r\n//             )\r\n//           )}\r\n//           <div className=\"flex-right\">\r\n//             <button className=\"clear-btn\" onClick={clearResponse}>\r\n//               Clear Response\r\n//             </button>\r\n//             <button\r\n//               className=\"previous-btn\"\r\n//               onClick={goToPreviousQuestion}\r\n//               disabled={questionData === 0}\r\n//             >\r\n//               <i className=\"fa-solid fa-angles-left\"></i> Previous\r\n//             </button>\r\n//             <button className=\"save-btn\" onClick={handleNextClick}>\r\n//               Next <i className=\"fa-solid fa-angles-right\"></i>\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Paper1;\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n\r\n// const Paper1 = () => {\r\n//   const [sections, setSections] = useState([]);\r\n//   const { testCreationTableId } = useParams();\r\n\r\n//   useEffect(() => {\r\n//     const fetchSections = async () => {\r\n//       try {\r\n//         const response = await fetch(`http://localhost:4009/quiz_all/${testCreationTableId}`);\r\n\r\n//         if (!response.ok) {\r\n//           throw new Error(`HTTP error! Status: ${response.status}`);\r\n//         }\r\n\r\n//         const data = await response.json();\r\n//         console.log('Received data:', data);\r\n//         setSections(data);\r\n//       } catch (error) {\r\n//         console.error('Error fetching data:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchSections();\r\n//   }, [testCreationTableId]); // Use testCreationTableId as a dependency to trigger fetch when it changes\r\n\r\n//   return (\r\n//     <div>\r\n//       {Object.values(sections).map((section) => (\r\n//         <div key={section.sectionId}>\r\n//           <h2>{section.sectionName}</h2>\r\n//           {section.questions.map((question) => (\r\n//             <div key={question.qustion_id}>\r\n//               {/* Display question image */}\r\n//               <img src={`data:image/png;base64,${question.question_img}`} alt={`Question ${question.qustion_id}`} />\r\n\r\n//               {/* Display option images */}\r\n//               <ul>\r\n//                 {question.option_img.map((option, index) => (\r\n//                   <li key={index}>\r\n//                     <img src={`data:image/png;base64,${option.option_img}`} alt={`Option ${option.Option_Index}`} />\r\n//                   </li>\r\n//                 ))}\r\n//               </ul>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n//       ))}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Paper1;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { Link, useParams } from \"react-router-dom\";\r\n// import PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\r\n// import \"./Paper.css\";\r\n// const Paper1 = () => {\r\n//   const [questionData, setQuestionData] = useState([]);\r\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n//   const [Subjects, setSubjects] = useState([]);\r\n//   const { testCreationTableId, subjectId } = useParams();\r\n//   const [sections, setSections] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchSubjects = async () => {\r\n//       try {\r\n//         const response = await fetch(\r\n//           `http://localhost:4009/subjects/${testCreationTableId}`\r\n//         );\r\n//         const data = await response.json();\r\n//         setSubjects(data);\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//       }\r\n//     };\r\n\r\n//     fetchSubjects();\r\n//   }, [testCreationTableId]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchSections = async () => {\r\n//       try {\r\n//         const response = await fetch(\r\n//           `http://localhost:4009/fetchSections/${testCreationTableId}`\r\n//         );\r\n//         const data = await response.json();\r\n//         setSections(data);\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//       }\r\n//     };\r\n\r\n//     fetchSections();\r\n//   }, [testCreationTableId]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchQuestionData = async () => {\r\n//       try {\r\n//         const response = await fetch(\r\n//           `http://localhost:4009/getPaperData/${testCreationTableId}`\r\n//         );\r\n//         const data = await response.json();\r\n//         setQuestionData(data);\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//       }\r\n//     };\r\n\r\n//     fetchQuestionData();\r\n//   }, [testCreationTableId]);\r\n\r\n//   const [selectedAnswers, setSelectedAnswers] = useState(\r\n//     Array(questionData.length).fill(\"\")\r\n//   );\r\n\r\n//   const handleNextClick = () => {\r\n//     // Update the current question index to move to the next question\r\n//     setCurrentQuestionIndex((prevIndex) =>\r\n//       prevIndex < questionData.length - 1 ? prevIndex + 1 : prevIndex\r\n//     );\r\n//   };\r\n\r\n//   const onAnswerSelected = (optionIndex) => {\r\n//     const updatedSelectedAnswers = [...selectedAnswers];\r\n//     updatedSelectedAnswers[currentQuestionIndex] = optionIndex;\r\n//     setSelectedAnswers(updatedSelectedAnswers);\r\n//   };\r\n\r\n//   const [activeQuestion, setActiveQuestion] = useState(0);\r\n//   const clearResponse = () => {\r\n//     const updatedSelectedAnswers = [...selectedAnswers];\r\n//     updatedSelectedAnswers[activeQuestion] = \"\";\r\n//     setSelectedAnswers(updatedSelectedAnswers);\r\n//   };\r\n\r\n//   const goToPreviousQuestion = () => {\r\n//     setCurrentQuestionIndex((prevIndex) => {\r\n//       // Save the current timer value for the question\r\n\r\n//       const updatedTimers = [...timers];\r\n\r\n//       updatedTimers[prevIndex] = timer;\r\n\r\n//       setTimers(updatedTimers);\r\n\r\n//       // Move to the previous question\r\n\r\n//       return prevIndex - 1;\r\n//     });\r\n\r\n//     if (questionData > 0) {\r\n//       setActiveQuestion(questionData - 1);\r\n//     }\r\n//   };\r\n\r\n//   // ---------------------------------Timer code Start--------------------------------\r\n//   const [timer, setTimer] = useState(0);\r\n//   const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\r\n\r\n//   const formatTime = (seconds) => {\r\n//     const hours = Math.floor(seconds / 3600);\r\n\r\n//     const minutes = Math.floor((seconds % 3600) / 60);\r\n\r\n//     const remainingSeconds = seconds % 60;\r\n\r\n//     return `${hours > 9 ? hours : \"0\" + hours}:${\r\n//       minutes > 9 ? minutes : \"0\" + minutes\r\n//     }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     // Set the timer to the saved value for the current question\r\n//     setTimer(timers[currentQuestionIndex] || 0);\r\n//     let interval;\r\n//     interval = setInterval(() => {\r\n//       setTimer((prevTimer) => prevTimer + 1);\r\n//     }, 1000);\r\n//     // Clear the interval when the component unmounts or when the user moves to the next question\r\n//     return () => {\r\n//       clearInterval(interval);\r\n//     };\r\n//   }, [currentQuestionIndex, timers]);\r\n//   // ------------------------------------Timer code end--------------------------------\r\n\r\n//   return (\r\n//     <div>\r\n//       <div>\r\n//         <PaperHeader />\r\n//       </div>\r\n//       <div className=\"subjects\">\r\n//         {Subjects.map((subjectTitle, index) => (\r\n//           <li key={index}>\r\n//             <button className=\"subject-btn\">{subjectTitle.subjectName}</button>\r\n//           </li>\r\n//         ))}\r\n//       </div>\r\n//       <div className=\"second-header\">\r\n//         <div className=\"single-select-question\">\r\n//           {sections.map((sectionTitle,index)=>(\r\n//             <li key={index}>\r\n//               <p>{sectionTitle.sectionName}</p>\r\n//             </li>\r\n//           ))}\r\n//           {/* Single Select Question */}\r\n//         </div>\r\n//         <div className=\"right-header\">\r\n//           <div className=\"marks\">\r\n//             Marks: <div className=\"plus-mark\">+1</div>\r\n//             <div className=\"minus-mark\">-1</div>\r\n//           </div>\r\n//           <div>Timer: {formatTime(timer)}</div>\r\n//         </div>\r\n//       </div>\r\n//       {questionData.length > 0 && (\r\n//         <div>\r\n//           <h4>\r\n//             {currentQuestionIndex + 1}.\r\n//             <img\r\n//               src={questionData[currentQuestionIndex].question_img}\r\n//               alt={`Question ${currentQuestionIndex + 1}`}\r\n//             />\r\n//           </h4>\r\n\r\n//           {questionData[currentQuestionIndex].optionImages.map(\r\n//             (OptionImage, optionIndex) => (\r\n//               <li key={optionIndex}>\r\n//                 <input\r\n//                   type=\"radio\"\r\n//                   name={`question-${currentQuestionIndex}-option`}\r\n//                   value={optionIndex}\r\n//                   checked={\r\n//                     selectedAnswers[currentQuestionIndex] === optionIndex\r\n//                   }\r\n//                   onChange={() => onAnswerSelected(optionIndex)}\r\n//                 />\r\n//                 <img\r\n//                   key={optionIndex}\r\n//                   src={OptionImage.option_img}\r\n//                   alt={`Option ${optionIndex + 1}`}\r\n//                 />\r\n//               </li>\r\n//             )\r\n//           )}\r\n//           <div className=\"flex-right\">\r\n//             <button className=\"clear-btn\" onClick={clearResponse}>\r\n//               Clear Response\r\n//             </button>\r\n//             <button\r\n//               className=\"previous-btn\"\r\n//               onClick={goToPreviousQuestion}\r\n//               disabled={questionData === 0}\r\n//             >\r\n//               <i className=\"fa-solid fa-angles-left\"></i> Previous\r\n//             </button>\r\n//             <button className=\"save-btn\" onClick={handleNextClick}>\r\n//               Next <i className=\"fa-solid fa-angles-right\"></i>\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Paper1;\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n\r\n// const Paper1 = () => {\r\n//   const [sections, setSections] = useState([]);\r\n//   const { testCreationTableId } = useParams();\r\n\r\n//   useEffect(() => {\r\n//     const fetchSections = async () => {\r\n//       try {\r\n//         const response = await fetch(`http://localhost:4009/quiz_all/${testCreationTableId}`);\r\n\r\n//         if (!response.ok) {\r\n//           throw new Error(`HTTP error! Status: ${response.status}`);\r\n//         }\r\n\r\n//         const data = await response.json();\r\n//         console.log('Received data:', data);\r\n//         setSections(data);\r\n//       } catch (error) {\r\n//         console.error('Error fetching data:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchSections();\r\n//   }, [testCreationTableId]); // Use testCreationTableId as a dependency to trigger fetch when it changes\r\n\r\n//   return (\r\n//     <div>\r\n//       {Object.values(sections).map((section) => (\r\n//         <div key={section.sectionId}>\r\n//           <h2>{section.sectionName}</h2>\r\n//           {section.questions.map((question) => (\r\n//             <div key={question.qustion_id}>\r\n//               {/* Display question image */}\r\n//               <img src={`data:image/png;base64,${question.question_img}`} alt={`Question ${question.qustion_id}`} />\r\n\r\n//               {/* Display option images */}\r\n//               <ul>\r\n//                 {question.option_img.map((option, index) => (\r\n//                   <li key={index}>\r\n//                     <img src={`data:image/png;base64,${option.option_img}`} alt={`Option ${option.Option_Index}`} />\r\n//                   </li>\r\n//                 ))}\r\n//               </ul>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n//       ))}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Paper1;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useParams } from \"react-router-dom\";\r\n\r\n// function Paper1() {\r\n\r\n//   const [questionData, setQuestionData] = useState([]);\r\n//   const {testCreationTableId} = useParams();\r\n\r\n//   useEffect(() => {\r\n//     const fetchQuestionData = async () => {\r\n//       try {\r\n//         const response = await fetch(\r\n//           `http://localhost:4009/getPaperData/${testCreationTableId}`\r\n//         );\r\n//         const data = await response.json();\r\n//         setQuestionData(data);\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//       }\r\n//     };\r\n\r\n//     fetchQuestionData();\r\n//   }, [testCreationTableId]);\r\n\r\n//   return (\r\n//     <div>\r\n//       {/* Access data as needed, for example: */}\r\n\r\n//       {/* Map over questions and render them */}\r\n//       <div\r\n//         className=\"q1s\"\r\n//         style={{\r\n//           display: \"flex\",\r\n//           gap: \"4rem\",\r\n//           flexDirection: \"column\",\r\n//           width: \"85vw\",\r\n//           margin: \"2rem\",\r\n//         }}\r\n//       >\r\n//         {questionData.map((question, index) => (\r\n//           <div\r\n//             className=\"outColor\"\r\n//             style={{ background: \"#e5e5e5\", padding: \"2rem 2rem\" }}\r\n//           >\r\n//             <div key={question.question_id}>\r\n//               <div className=\"question\" key={index}>\r\n//                 <h3>{index + 1}</h3>\r\n//                 <img\r\n//                   src={`data:image/png;base64,${question.question_img}`}\r\n//                   alt=\"Question\"\r\n//                 />\r\n//               </div>\r\n\r\n//               {/* Map over options and render them */}\r\n//               {questionData\r\n//                 .filter((opt) => opt.question_id === question.question_id)\r\n//                 .map((option) => (\r\n\r\n//                     <img\r\n//                       key={option.question_id}\r\n//                       src={`data:image/png;base64,${option.option_img}`}\r\n//                       alt=\"Option\"\r\n//                     />\r\n\r\n//                 ))}\r\n\r\n//             </div>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Paper1;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useParams } from \"react-router-dom\";\r\n\r\n// function Paper1() {\r\n//   const [questionData, setQuestionData] = useState([]);\r\n\r\n//   const { testCreationTableId } = useParams();\r\n\r\n//   useEffect(() => {\r\n//     const fetchQuestionData = async () => {\r\n//       try {\r\n//         const response = await fetch(\r\n//           `http://localhost:4009/getPaperData/${testCreationTableId}`\r\n//         );\r\n//         const data = await response.json();\r\n\r\n//         // Check if the data has both 'questions' and 'options' properties\r\n//         if (data && data.questions && data.options) {\r\n//           // Assuming both questions and options are arrays, you might want to merge them\r\n//           const mergedData = data.questions.map((question, index) => ({\r\n//             ...question,\r\n//             options: data.options.slice(index * 4, (index + 1) * 4), // Assuming 4 options per question\r\n//           }));\r\n\r\n//           setQuestionData(mergedData);\r\n//         } else {\r\n//           console.error(\"API response does not have expected structure:\", data);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//       }\r\n//     };\r\n\r\n//     fetchQuestionData();\r\n//   }, [testCreationTableId]);\r\n\r\n//   // useEffect(() => {\r\n//   //   const fetchQuestionData = async () => {\r\n//   //     try {\r\n//   //       const response = await fetch(\r\n//   //         `http://localhost:4009/getPaperData/${testCreationTableId}`\r\n//   //       );\r\n//   //       const data = await response.json();\r\n\r\n//   //       // Check if the data is an array before setting state\r\n//   //       if (Array.isArray(data)) {\r\n//   //         setQuestionData(data);\r\n//   //       } else {\r\n//   //         console.error(\"API response is not an array:\", data);\r\n//   //       }\r\n//   //     } catch (error) {\r\n//   //       console.error(error);\r\n//   //     }\r\n//   //   };\r\n\r\n//   //   fetchQuestionData();\r\n//   // }, [testCreationTableId]);\r\n\r\n//   return (\r\n//     <div>\r\n//       <div\r\n\r\n//       >\r\n//         {questionData.map((question, index) => (\r\n//           <div\r\n\r\n//             key={question.question_id}\r\n//           >\r\n//             <div className=\"question\" key={index}>\r\n//               <h3>{index + 1}</h3>\r\n//               <img\r\n//                 src={`data:image/png;base64,${question.question_img}`}\r\n//                 alt=\"Question\"\r\n//               />\r\n//             </div>\r\n\r\n//             {questionData\r\n//               .filter((opt) => opt.question_id === question.question_id)\r\n//               .map((option) => (\r\n//                 <img\r\n//                   key={option.question_id}\r\n//                   src={`data:image/png;base64,${option.option_img}`}\r\n//                   alt=\"Option\"\r\n//                 />\r\n//               ))}\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Paper1;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useParams } from \"react-router-dom\";\r\n// import PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\r\n// function Paper1() {\r\n//   const [questionData, setQuestionData] = useState([]);\r\n//   const { testCreationTableId } = useParams();\r\n\r\n//   useEffect(() => {\r\n//     const fetchQuestionData = async () => {\r\n//       try {\r\n//         const response = await fetch(\r\n//           `http://localhost:4009/getPaperData/${testCreationTableId}`\r\n//         );\r\n//         const data = await response.json();\r\n\r\n//         // Check if the data has both 'questions' and 'options' properties\r\n//         if (data && data.questions && data.options) {\r\n//           // Assuming both questions and options are arrays, you might want to merge them\r\n//           const mergedData = data.questions.map((question, index) => ({\r\n//             ...question,\r\n//             options: data.options.slice(index * 4, (index + 1) * 4), // Assuming 4 options per question\r\n//           }));\r\n\r\n//           setQuestionData(mergedData);\r\n//         } else {\r\n//           console.error(\"API response does not have expected structure:\", data);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//       }\r\n//     };\r\n\r\n//     fetchQuestionData();\r\n//   }, [testCreationTableId]);\r\n\r\n//   const [Subjects, setSubjects] = useState([]);\r\n//   // const { testCreationTableId, subjectId } = useParams();\r\n//   const [sections, setSections] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchSubjects = async () => {\r\n//       try {\r\n//         const response = await fetch(\r\n//           `http://localhost:4009/subjects/${testCreationTableId}`\r\n//         );\r\n//         const data = await response.json();\r\n//         setSubjects(data);\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//       }\r\n//     };\r\n\r\n//     fetchSubjects();\r\n//   }, [testCreationTableId]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchSections = async () => {\r\n//       try {\r\n//         const response = await fetch(\r\n//           `http://localhost:4009/fetchSections/${testCreationTableId}`\r\n//         );\r\n//         const data = await response.json();\r\n//         setSections(data);\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//       }\r\n//     };\r\n\r\n//     fetchSections();\r\n//   }, [testCreationTableId]);\r\n\r\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n//   const [selectedAnswers, setSelectedAnswers] = useState(\r\n//     Array(questionData.length).fill(\"\")\r\n//   );\r\n\r\n//   const handleNextClick = () => {\r\n//     // Update the current question index to move to the next question\r\n//     setCurrentQuestionIndex((prevIndex) =>\r\n//       prevIndex < questionData.length - 1 ? prevIndex + 1 : prevIndex\r\n//     );\r\n//   };\r\n\r\n//   const onAnswerSelected = (optionIndex) => {\r\n//     const updatedSelectedAnswers = [...selectedAnswers];\r\n//     updatedSelectedAnswers[currentQuestionIndex] = optionIndex;\r\n//     setSelectedAnswers(updatedSelectedAnswers);\r\n//   };\r\n\r\n//   const [activeQuestion, setActiveQuestion] = useState(0);\r\n//   const clearResponse = () => {\r\n//     const updatedSelectedAnswers = [...selectedAnswers];\r\n//     updatedSelectedAnswers[activeQuestion] = \"\";\r\n//     setSelectedAnswers(updatedSelectedAnswers);\r\n//   };\r\n\r\n//   const goToPreviousQuestion = () => {\r\n//     setCurrentQuestionIndex((prevIndex) => {\r\n//       // Save the current timer value for the question\r\n\r\n//       const updatedTimers = [...timers];\r\n\r\n//       updatedTimers[prevIndex] = timer;\r\n\r\n//       setTimers(updatedTimers);\r\n\r\n//       // Move to the previous question\r\n\r\n//       return prevIndex - 1;\r\n//     });\r\n\r\n//     if (questionData > 0) {\r\n//       setActiveQuestion(questionData - 1);\r\n//     }\r\n//   };\r\n\r\n//   const [timer, setTimer] = useState(0);\r\n//   const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\r\n\r\n//   const formatTime = (seconds) => {\r\n//     const hours = Math.floor(seconds / 3600);\r\n\r\n//     const minutes = Math.floor((seconds % 3600) / 60);\r\n\r\n//     const remainingSeconds = seconds % 60;\r\n\r\n//     return `${hours > 9 ? hours : \"0\" + hours}:${\r\n//       minutes > 9 ? minutes : \"0\" + minutes\r\n//     }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     // Set the timer to the saved value for the current question\r\n//     setTimer(timers[currentQuestionIndex] || 0);\r\n//     let interval;\r\n//     interval = setInterval(() => {\r\n//       setTimer((prevTimer) => prevTimer + 1);\r\n//     }, 1000);\r\n//     // Clear the interval when the component unmounts or when the user moves to the next question\r\n//     return () => {\r\n//       clearInterval(interval);\r\n//     };\r\n//   }, [currentQuestionIndex, timers]);\r\n\r\n//   return (\r\n//     <div>\r\n//       <div>\r\n//         <PaperHeader />\r\n//       </div>\r\n//       <div className=\"subjects\">\r\n//         {Subjects.map((subjectTitle, index) => (\r\n//           <li key={index}>\r\n//             <button className=\"subject-btn\">{subjectTitle.subjectName}</button>\r\n//           </li>\r\n//         ))}\r\n//       </div>\r\n//       <div className=\"second-header\">\r\n//         <div className=\"single-select-question\">\r\n//           {sections.map((sectionTitle, index) => (\r\n//             <li key={index}>\r\n//               <p>{sectionTitle.sectionName}</p>\r\n//             </li>\r\n//           ))}\r\n//           {/* Single Select Question */}\r\n//         </div>\r\n//         <div className=\"right-header\">\r\n//           <div className=\"marks\">\r\n//             Marks: <div className=\"plus-mark\">+1</div>\r\n//             <div className=\"minus-mark\">-1</div>\r\n//           </div>\r\n//           <div>Timer: {formatTime(timer)}</div>\r\n//         </div>\r\n//       </div>\r\n\r\n//           <div>\r\n//           {questionData.map((question, index) => (\r\n//             <>\r\n//               <div key={question.question_id}>\r\n//                 <div className=\"question\" key={index}>\r\n//                   <h3>{index + 1}</h3>\r\n//                   {question.question_img ? (\r\n//                     <img\r\n//                       src={`data:image/png;base64,${question.question_img}`}\r\n//                       alt=\"Question\"\r\n//                     />\r\n//                   ) : (\r\n//                     <p>No question image available</p>\r\n//                   )}\r\n//                 </div>\r\n\r\n//                 {question.options &&\r\n//                   question.options.map((option, optionIndex) => (\r\n//                     <div key={option.question_id}>\r\n//                       {option.option_img ? (\r\n//                         <li key={optionIndex}>\r\n//                           <input\r\n//                             type=\"radio\"\r\n//                             name={`question-${currentQuestionIndex}-option`}\r\n//                             value={optionIndex}\r\n//                             checked={\r\n//                               selectedAnswers[currentQuestionIndex] ===\r\n//                               optionIndex\r\n//                             }\r\n//                             onChange={() => onAnswerSelected(optionIndex)}\r\n//                           />\r\n//                           <img\r\n//                             src={`data:image/png;base64,${option.option_img}`}\r\n//                             alt=\"Option\"\r\n//                           />\r\n//                         </li>\r\n//                       ) : (\r\n//                         <p>No option image available</p>\r\n//                       )}\r\n//                     </div>\r\n//                   ))}\r\n//               </div>\r\n//               {/* <div className=\"flex-right\">\r\n//                 <button className=\"clear-btn\" onClick={clearResponse}>\r\n//                   Clear Response\r\n//                 </button>\r\n//                 <button\r\n//                   className=\"previous-btn\"\r\n//                   onClick={goToPreviousQuestion}\r\n//                   disabled={questionData === 0}\r\n//                 >\r\n//                   <i className=\"fa-solid fa-angles-left\"></i> Previous\r\n//                 </button>\r\n//                 <button className=\"save-btn\" onClick={handleNextClick}>\r\n//                   Next <i className=\"fa-solid fa-angles-right\"></i>\r\n//                 </button>\r\n//               </div> */}\r\n//             </>\r\n//           ))}\r\n//         </div>\r\n\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Paper1;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useParams } from \"react-router-dom\";\r\n// import PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\r\n// function Paper1() {\r\n//   const [questionData, setQuestionData] = useState([]);\r\n//   const { testCreationTableId } = useParams();\r\n\r\n//   useEffect(() => {\r\n//     const fetchQuestionData = async () => {\r\n//       try {\r\n//         const response = await fetch(\r\n//           `http://localhost:4009/getPaperData/${testCreationTableId}`\r\n//         );\r\n//         const data = await response.json();\r\n\r\n//         // Check if the data has both 'questions' and 'options' properties\r\n//         if (data && data.questions && data.options) {\r\n//           // Assuming both questions and options are arrays, you might want to merge them\r\n//           const mergedData = data.questions.map((question, index) => ({\r\n//             ...question,\r\n//             options: data.options.slice(index * 4, (index + 1) * 4), // Assuming 4 options per question\r\n//           }));\r\n\r\n//           setQuestionData(mergedData);\r\n//         } else {\r\n//           console.error(\"API response does not have expected structure:\", data);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//       }\r\n//     };\r\n\r\n//     fetchQuestionData();\r\n//   }, [testCreationTableId]);\r\n\r\n//   const [Subjects, setSubjects] = useState([]);\r\n//   // const { testCreationTableId, subjectId } = useParams();\r\n//   const [sections, setSections] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchSubjects = async () => {\r\n//       try {\r\n//         const response = await fetch(\r\n//           `http://localhost:4009/subjects/${testCreationTableId}`\r\n//         );\r\n//         const data = await response.json();\r\n//         setSubjects(data);\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//       }\r\n//     };\r\n\r\n//     fetchSubjects();\r\n//   }, [testCreationTableId]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchSections = async () => {\r\n//       try {\r\n//         const response = await fetch(\r\n//           `http://localhost:4009/fetchSections/${testCreationTableId}`\r\n//         );\r\n//         const data = await response.json();\r\n//         setSections(data);\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//       }\r\n//     };\r\n\r\n//     fetchSections();\r\n//   }, [testCreationTableId]);\r\n\r\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n//   const [selectedAnswers, setSelectedAnswers] = useState(\r\n//     Array(questionData.length).fill(\"\")\r\n//   );\r\n\r\n//   const handleNextClick = () => {\r\n//     // Update the current question index to move to the next question\r\n//     setCurrentQuestionIndex((prevIndex) =>\r\n//       prevIndex < questionData.length - 1 ? prevIndex + 1 : prevIndex\r\n//     );\r\n//   };\r\n\r\n//   const onAnswerSelected = (optionIndex) => {\r\n//     const updatedSelectedAnswers = [...selectedAnswers];\r\n//     updatedSelectedAnswers[currentQuestionIndex] = optionIndex;\r\n//     setSelectedAnswers(updatedSelectedAnswers);\r\n//   };\r\n\r\n//   const [activeQuestion, setActiveQuestion] = useState(0);\r\n//   const clearResponse = () => {\r\n//     const updatedSelectedAnswers = [...selectedAnswers];\r\n//     updatedSelectedAnswers[activeQuestion] = \"\";\r\n//     setSelectedAnswers(updatedSelectedAnswers);\r\n//   };\r\n\r\n//   const goToPreviousQuestion = () => {\r\n//     setCurrentQuestionIndex((prevIndex) => {\r\n//       // Save the current timer value for the question\r\n\r\n//       const updatedTimers = [...timers];\r\n\r\n//       updatedTimers[prevIndex] = timer;\r\n\r\n//       setTimers(updatedTimers);\r\n\r\n//       // Move to the previous question\r\n\r\n//       return prevIndex - 1;\r\n//     });\r\n\r\n//     if (questionData > 0) {\r\n//       setActiveQuestion(questionData - 1);\r\n//     }\r\n//   };\r\n\r\n//   const [timer, setTimer] = useState(0);\r\n//   const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\r\n\r\n//   const formatTime = (seconds) => {\r\n//     const hours = Math.floor(seconds / 3600);\r\n\r\n//     const minutes = Math.floor((seconds % 3600) / 60);\r\n\r\n//     const remainingSeconds = seconds % 60;\r\n\r\n//     return `${hours > 9 ? hours : \"0\" + hours}:${\r\n//       minutes > 9 ? minutes : \"0\" + minutes\r\n//     }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     // Set the timer to the saved value for the current question\r\n//     setTimer(timers[currentQuestionIndex] || 0);\r\n//     let interval;\r\n//     interval = setInterval(() => {\r\n//       setTimer((prevTimer) => prevTimer + 1);\r\n//     }, 1000);\r\n//     // Clear the interval when the component unmounts or when the user moves to the next question\r\n//     return () => {\r\n//       clearInterval(interval);\r\n//     };\r\n//   }, [currentQuestionIndex, timers]);\r\n\r\n//   return (\r\n//     <div>\r\n//       <div>\r\n//         <PaperHeader />\r\n//       </div>\r\n//       <div className=\"subjects\">\r\n//         {Subjects.map((subjectTitle, index) => (\r\n//           <li key={index}>\r\n//             <button className=\"subject-btn\">{subjectTitle.subjectName}</button>\r\n//           </li>\r\n//         ))}\r\n//       </div>\r\n//       <div className=\"second-header\">\r\n//         <div className=\"single-select-question\">\r\n//           {sections.map((sectionTitle, index) => (\r\n//             <li key={index}>\r\n//               <p>{sectionTitle.sectionName}</p>\r\n//             </li>\r\n//           ))}\r\n//           {/* Single Select Question */}\r\n//         </div>\r\n//         <div className=\"right-header\">\r\n//           <div className=\"marks\">\r\n//             Marks: <div className=\"plus-mark\">+1</div>\r\n//             <div className=\"minus-mark\">-1</div>\r\n//           </div>\r\n//           <div>Timer: {formatTime(timer)}</div>\r\n//         </div>\r\n//       </div>\r\n//       {questionData.length > 0 && (\r\n//         <div>\r\n//           {questionData.map((question, index) => (\r\n//             <>\r\n//               <div key={question.question_id}>\r\n//                 <div className=\"question\" key={index}>\r\n//                   <h4>\r\n//                     {currentQuestionIndex + 1}.\r\n//                     <img\r\n//                       src={`data:image/png;base64,${questionData[currentQuestionIndex].question_img}`}\r\n//                       alt={`Question ${currentQuestionIndex + 1}`}\r\n//                     />\r\n//                   </h4>\r\n//                 </div>\r\n\r\n//                 {questionData[currentQuestionIndex].optionImages.map(\r\n//                   (OptionImage, optionIndex) => (\r\n//                     <li key={optionIndex}>\r\n//                       <input\r\n//                         type=\"radio\"\r\n//                         name={`question-${currentQuestionIndex}-option`}\r\n//                         value={optionIndex}\r\n//                         checked={\r\n//                           selectedAnswers[currentQuestionIndex] === optionIndex\r\n//                         }\r\n//                         onChange={() => onAnswerSelected(optionIndex)}\r\n//                       />\r\n//                       <img\r\n//                         key={optionIndex}\r\n//                         src={`data:image/png;base64,${OptionImage.option_img}`}\r\n//                         alt={`Option ${optionIndex + 1}`}\r\n//                       />\r\n//                     </li>\r\n//                   )\r\n//                 )}\r\n\r\n//               </div>\r\n//               <div className=\"flex-right\">\r\n//                 <button className=\"clear-btn\" onClick={clearResponse}>\r\n//                   Clear Response\r\n//                 </button>\r\n//                 <button\r\n//                   className=\"previous-btn\"\r\n//                   onClick={goToPreviousQuestion}\r\n//                   disabled={questionData === 0}\r\n//                 >\r\n//                   <i className=\"fa-solid fa-angles-left\"></i> Previous\r\n//                 </button>\r\n//                 <button className=\"save-btn\" onClick={handleNextClick}>\r\n//                   Next <i className=\"fa-solid fa-angles-right\"></i>\r\n//                 </button>\r\n//               </div>\r\n//             </>\r\n//            ))}\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Paper1;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\r\nimport \"./Paper.css\";\r\nconst Paper1 = () => {\r\n  const [questionData, setQuestionData] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [Subjects, setSubjects] = useState([]);\r\n  const { testCreationTableId, subjectId } = useParams();\r\n  const [sections, setSections] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchSubjects = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `http://localhost:4009/subjects/${testCreationTableId}`\r\n        );\r\n        const data = await response.json();\r\n        setSubjects(data);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    fetchSubjects();\r\n  }, [testCreationTableId]);\r\n\r\n  useEffect(() => {\r\n    const fetchSections = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `http://localhost:4009/fetchSections/${testCreationTableId}`\r\n        );\r\n        const data = await response.json();\r\n        setSections(data);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    fetchSections();\r\n  }, [testCreationTableId]);\r\n\r\n  useEffect(() => {\r\n    const fetchQuestionData = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `http://localhost:4009/getPaperData/${testCreationTableId}`\r\n        );\r\n        const data = await response.json();\r\n\r\n        // Check if the data has both 'questions' and 'options' properties\r\n        if (data && data.questions && data.options) {\r\n          // Assuming both questions and options are arrays, you might want to merge them\r\n          const mergedData = data.questions.map((question, index) => ({\r\n            ...question,\r\n            options: data.options.slice(index * 4, (index + 1) * 4), // Assuming 4 options per question\r\n          }));\r\n\r\n          setQuestionData(mergedData);\r\n        } else {\r\n          console.error(\"API response does not have expected structure:\", data);\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    fetchQuestionData();\r\n  }, [testCreationTableId]);\r\n\r\n  const [selectedAnswers, setSelectedAnswers] = useState(\r\n    Array(questionData.length).fill(\"\")\r\n  );\r\n\r\n  const handleNextClick = () => {\r\n    // Update the current question index to move to the next question\r\n    setCurrentQuestionIndex((prevIndex) =>\r\n      prevIndex < questionData.length - 1 ? prevIndex + 1 : prevIndex\r\n    );\r\n  };\r\n\r\n  const onAnswerSelected = (optionIndex) => {\r\n    const updatedSelectedAnswers = [...selectedAnswers];\r\n    updatedSelectedAnswers[currentQuestionIndex] = optionIndex;\r\n    setSelectedAnswers(updatedSelectedAnswers);\r\n  };\r\n\r\n  const [activeQuestion, setActiveQuestion] = useState(0);\r\n  const clearResponse = () => {\r\n    const updatedSelectedAnswers = [...selectedAnswers];\r\n    updatedSelectedAnswers[activeQuestion] = \"\";\r\n    setSelectedAnswers(updatedSelectedAnswers);\r\n  };\r\n\r\n  const goToPreviousQuestion = () => {\r\n    setCurrentQuestionIndex((prevIndex) => {\r\n      // Save the current timer value for the question\r\n      const updatedTimers = [...timers];\r\n      updatedTimers[prevIndex] = timer;\r\n      setTimers(updatedTimers);\r\n      // Move to the previous question\r\n      return prevIndex - 1;\r\n    });\r\n\r\n    if (questionData > 0) {\r\n      setActiveQuestion(questionData - 1);\r\n    }\r\n  };\r\n\r\n  // ---------------------------------Timer code Start--------------------------------\r\n  const [timer, setTimer] = useState(0);\r\n  const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\r\n\r\n  const formatTime = (seconds) => {\r\n    const hours = Math.floor(seconds / 3600);\r\n\r\n    const minutes = Math.floor((seconds % 3600) / 60);\r\n\r\n    const remainingSeconds = seconds % 60;\r\n\r\n    return `${hours > 9 ? hours : \"0\" + hours}:${\r\n      minutes > 9 ? minutes : \"0\" + minutes\r\n    }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Set the timer to the saved value for the current question\r\n    setTimer(timers[currentQuestionIndex] || 0);\r\n    let interval;\r\n    interval = setInterval(() => {\r\n      setTimer((prevTimer) => prevTimer + 1);\r\n    }, 1000);\r\n    // Clear the interval when the component unmounts or when the user moves to the next question\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [currentQuestionIndex, timers]);\r\n  // ------------------------------------Timer code end--------------------------------\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <PaperHeader />\r\n      </div>\r\n      <div className=\"subjects\">\r\n        {Subjects.map((subjectTitle, index) => (\r\n          <li key={index}>\r\n            <button className=\"subject-btn\">{subjectTitle.subjectName}</button>\r\n          </li>\r\n        ))}\r\n    \r\n      </div>\r\n      <div className=\"second-header\">\r\n        <div className=\"single-select-question\">\r\n          {sections.map((sectionTitle, index) => (\r\n            <li key={index}>\r\n              <p>{sectionTitle.sectionName}</p>\r\n            </li>\r\n          ))}\r\n          {/* Single Select Question */}\r\n        </div>\r\n        <div className=\"right-header\">\r\n          <div className=\"marks\">\r\n            Marks: <div className=\"plus-mark\">+1</div>\r\n            <div className=\"minus-mark\">-1</div>\r\n          </div>\r\n          <div>Timer: {formatTime(timer)}</div>\r\n        </div>\r\n      </div>\r\n\r\n      {questionData.length > 0 && (\r\n        <div>\r\n          <h4>\r\n            {/* {currentQuestionIndex + 1}. */}\r\n            Question {currentQuestionIndex + 1} out of {questionData.length}\r\n            <img\r\n              src={`data:image/png;base64,${questionData[currentQuestionIndex].question_img}`}\r\n              alt={`Question ${currentQuestionIndex + 1}`}\r\n            />\r\n          </h4>\r\n\r\n          {questionData[currentQuestionIndex].options.map(\r\n            (OptionImage, optionIndex) => (\r\n              <li key={optionIndex}>\r\n                <input\r\n                  type=\"radio\"\r\n                  name={`question-${currentQuestionIndex}-option`}\r\n                  value={optionIndex}\r\n                  checked={\r\n                    selectedAnswers[currentQuestionIndex] === optionIndex\r\n                  }\r\n                  onChange={() => onAnswerSelected(optionIndex)}\r\n                />\r\n                {OptionImage && OptionImage.option_img && (\r\n                  <img\r\n                    key={OptionImage.question_id}\r\n                    src={`data:image/png;base64,${OptionImage.option_img}`}\r\n                    alt={`Option ${optionIndex + 1}`}\r\n                  />\r\n                )}\r\n              </li>\r\n            )\r\n          )}\r\n          <div className=\"flex-right\">\r\n            <button className=\"clear-btn\" onClick={clearResponse}>\r\n              Clear Response\r\n            </button>\r\n            <button\r\n              className=\"previous-btn\"\r\n              onClick={goToPreviousQuestion}\r\n              disabled={questionData === 0}\r\n            >\r\n              <i className=\"fa-solid fa-angles-left\"></i> Previous\r\n            </button>\r\n            <button className=\"save-btn\" onClick={handleNextClick}>\r\n              Next <i className=\"fa-solid fa-angles-right\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Paper1;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,EAAEC,SAAS,QAAQ,kBAAkB;AAClD,OAAOC,WAAW,MAAM,0CAA0C;AAClE,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACrB,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,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"},"metadata":{},"sourceType":"module","externalDependencies":[]}