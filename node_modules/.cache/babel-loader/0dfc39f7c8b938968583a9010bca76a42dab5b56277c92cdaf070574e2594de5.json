{"ast":null,"code":"var _jsxFileName = \"D:\\\\web projects files\\\\Current_egate_Quiz_project\\\\src\\\\Pages\\\\Paper\\\\Paper1.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// // import { useParams } from \"react-router-dom\";\n\n// const Paper1 = () => {\n//   // const { subi_id } = useParams();\n//   //     const [quizData, setQuizData] = useState([]);\n\n//   // console.log(quizData)\n//   // useEffect(() => {\n//   //   // Fetch data from the endpoint\n//   //   fetch(`http://localhost:10000/quiz_all/`+subi_id)\n\n//   //     .then((response) => response.json())\n//   //     .then((data) => setQuizData(data))\n//   //     .catch((error) => console.error('Error fetching data:', error));\n//   // }, [subi_id]);\n\n//   const [subjectNames, setSubjectNames] = useState([]);\n\n//   useEffect(() => {\n//     fetch(`http://localhost:4009/quiz_all/1`)\n//       .then((response) => response.json())\n//       .then((data) => {\n//         console.log(data); // Log the data received from the API\n//         setSubjectNames(data);\n//       })\n//       .catch((error) => console.error(\"Error fetching data:\", error));\n//   }, []);\n\n//   // const [answer, setAnswer] = useState([]);\n//   // useEffect(() => {\n//   //   // Fetch data from the endpoint\n//   //   fetch(`http://localhost:4009/answers/`)\n//   //     .then((response) => response.json())\n//   //     .then((data) => setAnswer(data))\n//   //     .catch((error) => console.error(\"Error fetching data:\", error));\n//   // }, []);\n\n//   return (\n//     <div>\n//       <h1>hii</h1>\n\n//       <div>\n//         {Array.isArray(subjectNames) && subjectNames.length > 0 ? (\n//           <div>\n//             {subjectNames.map((subjects) => (\n//               <li key={subjects.subi_id}>\n//                 <p>{subjects.subject_name}</p>\n//               </li>\n//             ))}\n//           </div>\n//         ) : (\n//           <p>No subjects available.</p>\n//         )}\n//         {/* <ul>\n//            {subjectNames.map((item) => (\n//           <li key={item.subi_id}>\n//             <p>{item.subject_name}</p>\n//           </li>\n//         ))}\n//         </ul> */}\n\n//         {/* <button>Mathematics</button>\n//                 <button>Physics</button>\n//                 <button>Chemistry</button> */}\n//       </div>\n\n//       {/* answers display */}\n//       {/* <div>\n//       {answer.map((ans) => (\n//           <li key={ans.subi_id}>\n//             <p>{ans.answer}</p>\n//           </li>\n//         ))}\n//       </div> */}\n\n//       {/* <h1>Quiz Questions</h1> */}\n//       <div>\n//         {/* {quizData.map((question) => (\n//           <div key={question.question_id}>\n//             <h3>Question {question.question_id}</h3>\n//             <img\n//               src={`data:image/png;base64,${question.question_img}`}\n//               alt={`Question ${question.question_id}`}\n//             />\n//             <ul>\n//               {question.options.map((option) => (\n//                 <li key={option.option_id}>\n//                   <img\n//                     src={`data:image/png;base64,${option.option_img}`}\n//                     alt={`Option ${option.option_id}`}\n//                   />\n//                 </li>\n//               ))}\n//             </ul>\n//           </div>\n//         ))} */}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Paper1;\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport PaperHeader from '../../Components/PaperHeader/PaperHeader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Paper1 = () => {\n  _s();\n  const [questionData, setQuestionData] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  useEffect(() => {\n    // Fetch all images from the server\n    fetch(\"http://localhost:4009/getAllImages\").then(response => response.json()).then(data => {\n      if (Array.isArray(data)) {\n        setQuestionData(data);\n      } else {\n        console.error(\"Invalid data structure received from the server:\", data);\n      }\n    }).catch(error => console.error(\"Error fetching images:\", error));\n  }, []);\n  const handleNextClick = () => {\n    // Update the current question index to move to the next question\n    setCurrentQuestionIndex(prevIndex => prevIndex < questionData.length - 1 ? prevIndex + 1 : prevIndex);\n  };\n  const [Subjects, setSubjects] = useState([]);\n  const {\n    testCreationTableId\n  } = useParams();\n  useEffect(() => {\n    const fetchSubjects = async () => {\n      try {\n        const response = await fetch(`http://localhost:4009/subjects/${testCreationTableId}`);\n        const data = await response.json();\n        setSubjects(data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchSubjects();\n  }, [testCreationTableId]);\n  const [questionStatus, setQuestionStatus] = useState([\"notAnswered\", ...Array(29).fill(\"notVisited\")]);\n  const [activeQuestion, setActiveQuestion] = useState(0);\n  const onAnswerSelected = OptionLetter => {\n    const updatedSelectedAnswers = [...selectedAnswers];\n    updatedSelectedAnswers[activeQuestion] = OptionLetter;\n    setSelectedAnswers(updatedSelectedAnswers);\n    const updatedQuestionStatus = [...questionStatus];\n    updatedQuestionStatus[activeQuestion] = \"answered\";\n    setQuestionStatus(updatedQuestionStatus);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(PaperHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Subjects.map((subjectTitle, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          children: subjectTitle.subjectName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 17\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 16\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), questionData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\" \", currentQuestionIndex + 1, \".\", /*#__PURE__*/_jsxDEV(\"img\", {\n          src: questionData[currentQuestionIndex].questionImage,\n          alt: `Question ${currentQuestionIndex + 1}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this), questionData[currentQuestionIndex].optionImages.map((image, optionIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"index\"\n          // checked={\n          //   selectedAnswers[activeQuestion] ===\n          //   String.fromCharCode(65 + optIndex)\n          // }\n          ,\n          onChange: () => onAnswerSelected(String.fromCharCode(65 + optionIndex))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: image,\n          alt: `Option ${optionIndex + 1}`\n        }, optionIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 17\n        }, this)]\n      }, optionIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 15\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextClick,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n_s(Paper1, \"wN+Eml32G0Uma86wHMexmN+8IPA=\", false, function () {\n  return [useParams];\n});\n_c = Paper1;\nexport default Paper1;\nvar _c;\n$RefreshReg$(_c, \"Paper1\");","map":{"version":3,"names":["React","useState","useEffect","Link","useParams","PaperHeader","jsxDEV","_jsxDEV","Paper1","_s","questionData","setQuestionData","currentQuestionIndex","setCurrentQuestionIndex","fetch","then","response","json","data","Array","isArray","console","error","catch","handleNextClick","prevIndex","length","Subjects","setSubjects","testCreationTableId","fetchSubjects","questionStatus","setQuestionStatus","fill","activeQuestion","setActiveQuestion","onAnswerSelected","OptionLetter","updatedSelectedAnswers","selectedAnswers","setSelectedAnswers","updatedQuestionStatus","children","fileName","_jsxFileName","lineNumber","columnNumber","map","subjectTitle","index","subjectName","src","questionImage","alt","optionImages","image","optionIndex","type","name","onChange","String","fromCharCode","onClick","_c","$RefreshReg$"],"sources":["D:/web projects files/Current_egate_Quiz_project/src/Pages/Paper/Paper1.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// // import { useParams } from \"react-router-dom\";\r\n\r\n// const Paper1 = () => {\r\n//   // const { subi_id } = useParams();\r\n//   //     const [quizData, setQuizData] = useState([]);\r\n\r\n//   // console.log(quizData)\r\n//   // useEffect(() => {\r\n//   //   // Fetch data from the endpoint\r\n//   //   fetch(`http://localhost:10000/quiz_all/`+subi_id)\r\n\r\n//   //     .then((response) => response.json())\r\n//   //     .then((data) => setQuizData(data))\r\n//   //     .catch((error) => console.error('Error fetching data:', error));\r\n//   // }, [subi_id]);\r\n\r\n//   const [subjectNames, setSubjectNames] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     fetch(`http://localhost:4009/quiz_all/1`)\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         console.log(data); // Log the data received from the API\r\n//         setSubjectNames(data);\r\n//       })\r\n//       .catch((error) => console.error(\"Error fetching data:\", error));\r\n//   }, []);\r\n\r\n//   // const [answer, setAnswer] = useState([]);\r\n//   // useEffect(() => {\r\n//   //   // Fetch data from the endpoint\r\n//   //   fetch(`http://localhost:4009/answers/`)\r\n//   //     .then((response) => response.json())\r\n//   //     .then((data) => setAnswer(data))\r\n//   //     .catch((error) => console.error(\"Error fetching data:\", error));\r\n//   // }, []);\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>hii</h1>\r\n\r\n//       <div>\r\n//         {Array.isArray(subjectNames) && subjectNames.length > 0 ? (\r\n//           <div>\r\n//             {subjectNames.map((subjects) => (\r\n//               <li key={subjects.subi_id}>\r\n//                 <p>{subjects.subject_name}</p>\r\n//               </li>\r\n//             ))}\r\n//           </div>\r\n//         ) : (\r\n//           <p>No subjects available.</p>\r\n//         )}\r\n//         {/* <ul>\r\n//            {subjectNames.map((item) => (\r\n//           <li key={item.subi_id}>\r\n//             <p>{item.subject_name}</p>\r\n//           </li>\r\n//         ))}\r\n//         </ul> */}\r\n\r\n//         {/* <button>Mathematics</button>\r\n//                 <button>Physics</button>\r\n//                 <button>Chemistry</button> */}\r\n//       </div>\r\n\r\n//       {/* answers display */}\r\n//       {/* <div>\r\n//       {answer.map((ans) => (\r\n//           <li key={ans.subi_id}>\r\n//             <p>{ans.answer}</p>\r\n//           </li>\r\n//         ))}\r\n//       </div> */}\r\n\r\n//       {/* <h1>Quiz Questions</h1> */}\r\n//       <div>\r\n//         {/* {quizData.map((question) => (\r\n//           <div key={question.question_id}>\r\n//             <h3>Question {question.question_id}</h3>\r\n//             <img\r\n//               src={`data:image/png;base64,${question.question_img}`}\r\n//               alt={`Question ${question.question_id}`}\r\n//             />\r\n//             <ul>\r\n//               {question.options.map((option) => (\r\n//                 <li key={option.option_id}>\r\n//                   <img\r\n//                     src={`data:image/png;base64,${option.option_img}`}\r\n//                     alt={`Option ${option.option_id}`}\r\n//                   />\r\n//                 </li>\r\n//               ))}\r\n//             </ul>\r\n//           </div>\r\n//         ))} */}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Paper1;\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Link, useParams} from \"react-router-dom\";\r\nimport PaperHeader from '../../Components/PaperHeader/PaperHeader'\r\n\r\nconst Paper1 = () => {\r\n  const [questionData, setQuestionData] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n\r\n  useEffect(() => {\r\n    // Fetch all images from the server\r\n    fetch(\"http://localhost:4009/getAllImages\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (Array.isArray(data)) {\r\n          setQuestionData(data);\r\n        } else {\r\n          console.error(\r\n            \"Invalid data structure received from the server:\",\r\n            data\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => console.error(\"Error fetching images:\", error));\r\n  }, []);\r\n\r\n  const handleNextClick = () => {\r\n    // Update the current question index to move to the next question\r\n    setCurrentQuestionIndex((prevIndex) =>\r\n      prevIndex < questionData.length - 1 ? prevIndex + 1 : prevIndex\r\n    );\r\n  };\r\n\r\n  const [Subjects, setSubjects] = useState([]);\r\n  const { testCreationTableId } = useParams();\r\n\r\n  useEffect(() => {\r\n    const fetchSubjects = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:4009/subjects/${testCreationTableId}`);\r\n        const data = await response.json();\r\n        setSubjects(data);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    fetchSubjects();\r\n  }, [testCreationTableId]);\r\n  const [questionStatus, setQuestionStatus] = useState([\"notAnswered\", ...Array(29).fill(\"notVisited\")]);\r\n  const [activeQuestion, setActiveQuestion] = useState(0);\r\n\r\n  const onAnswerSelected = (OptionLetter) => {\r\n    const updatedSelectedAnswers = [...selectedAnswers];\r\n    updatedSelectedAnswers[activeQuestion] = OptionLetter;\r\n    setSelectedAnswers(updatedSelectedAnswers);\r\n \r\n    const updatedQuestionStatus = [...questionStatus];\r\n    updatedQuestionStatus[activeQuestion] = \"answered\";\r\n    setQuestionStatus(updatedQuestionStatus);\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n          <PaperHeader />\r\n        </div>\r\n      <div>\r\n            {Subjects.map((subjectTitle,index)=>(\r\n               <li key={index}>\r\n                <Link>{subjectTitle.subjectName}</Link>\r\n               </li>\r\n            ))}\r\n           </div>\r\n      {questionData.length > 0 && (\r\n        <div>\r\n          <h4> {currentQuestionIndex + 1}.\r\n          <img\r\n            src={questionData[currentQuestionIndex].questionImage}\r\n            alt={`Question ${currentQuestionIndex + 1}`}\r\n          /></h4>\r\n         \r\n          {questionData[currentQuestionIndex].optionImages.map(\r\n            (image, optionIndex) => (\r\n              <li key={optionIndex}>\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"index\"\r\n                  // checked={\r\n                  //   selectedAnswers[activeQuestion] ===\r\n                  //   String.fromCharCode(65 + optIndex)\r\n                  // }\r\n                  onChange={() =>\r\n                    onAnswerSelected(\r\n                      String.fromCharCode(65 + optionIndex)\r\n                    )\r\n                  }\r\n                />\r\n                <img\r\n                  key={optionIndex}\r\n                  src={image}\r\n                  alt={`Option ${optionIndex + 1}`}\r\n                />\r\n              </li>\r\n            )\r\n          )}\r\n\r\n          <button onClick={handleNextClick}>Next</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Paper1;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}