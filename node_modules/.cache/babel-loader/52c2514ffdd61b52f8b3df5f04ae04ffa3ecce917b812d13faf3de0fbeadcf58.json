{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/egate_Quiz_project/src/Pages/MainQuizFunctionality/ButtonsFunctionality.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport \"../RightSidebar/RightSidebar.css\";\nimport PropTypes from \"prop-types\";\n\n// const buttons = [\n//   1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n//   23, 24, 25, 26, 27, 28, 29, 30,\n// ];\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ButtonsFunctionality = ({\n  onQuestionSelect,\n  questionStatus,\n  seconds,\n  setQuestionStatus,\n  answeredCount,\n  notAnsweredCount,\n  answeredmarkedForReviewCount,\n  markedForReviewCount,\n  VisitedCount,\n  selectedSubject\n}) => {\n  _s();\n  const [questionData, setQuestionData] = useState([]);\n  const {\n    testCreationTableId\n  } = useParams();\n  const fetchQuestions = async () => {\n    try {\n      const response = await fetch(`http://localhost:4009/getQuestions/${testCreationTableId}/${selectedSubject}`);\n      const data = await response.json();\n      if (data && data.questions && data.options) {\n        const mergedData = data.questions.map((question, index) => ({\n          ...question,\n          options: data.options.slice(index * 4, (index + 1) * 4)\n        }));\n        setQuestionData(mergedData);\n      } else {\n        console.error(\"API response does not have expected structure:\", data);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  useEffect(() => {\n    fetchQuestions();\n  }, [testCreationTableId, selectedSubject]);\n  const sections = [\n  // Your section data here (adjust based on your actual data structure)\n  {\n    sectionId: 1,\n    sectionName: 'Mathematics',\n    subject: 'Mathematics'\n  }, {\n    sectionId: 2,\n    sectionName: 'Chemistry',\n    subject: 'Chemistry'\n  }, {\n    sectionId: 4,\n    sectionName: 'Physics',\n    subject: 'Physics'\n  }];\n  const renderSectionButtons = () => {\n    // Filter sections based on the selected subject\n    const filteredSections = sections.filter(section => section.subject === selectedSubject);\n    console.log(\"Filtered Sections:\", filteredSections);\n    console.log(\"Question Data:\", questionData);\n    // Render buttons for filteredSections\n    return filteredSections.map((section, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"section-btn\",\n        onClick: () => handleButtonClick(section.sectionId),\n        children: [\"You are viewing\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"subject\",\n          children: [\" \", section.sectionName, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 28\n        }, this), \"Section Question Palette\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this), questionData.map((question, questionIndex) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(question.questionId),\n        children: question.questionNumber\n      }, questionIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this))]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }, this));\n  };\n  const [activeQuestion, setActiveQuestion] = useState(0);\n  const [answeredQuestions, setAnsweredQuestions] = useState([]);\n  const [isPaused, setIsPaused] = useState(false);\n  const handleButtonClick = questionNumber => {\n    onQuestionSelect(questionNumber);\n    setAnsweredQuestions([...answeredQuestions, questionNumber]);\n    setIsPaused(false);\n    const isVisitedButNotAnswered = questionStatus[questionNumber - 1] === \"notVisited\";\n    if (isVisitedButNotAnswered) {\n      // Mark the question as \"not answered\"\n      const updatedQuestionStatus = [...questionStatus];\n      updatedQuestionStatus[questionNumber - 1] = \"notAnswered\";\n      setQuestionStatus(updatedQuestionStatus);\n    } else if (questionStatus[questionNumber - 1] === \"marked\") {\n      // Mark the question as \"Marked for review\" by default if not visited\n      const updatedQuestionStatus = [...questionStatus];\n      updatedQuestionStatus[questionNumber - 1] = \"markedForReview\";\n      setQuestionStatus(updatedQuestionStatus);\n    }\n  };\n  ButtonsFunctionality.propTypes = {\n    onQuestionSelect: PropTypes.func.isRequired,\n    questionStatus: PropTypes.arrayOf(PropTypes.string),\n    onResumeTimer: PropTypes.func.isRequired // Define the prop type for onResumeTimer\n  };\n\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [timers, setTimers] = useState(new Array().fill(0));\n  const [timer, setTimer] = useState(0);\n  useEffect(() => {\n    // Set the timer to the saved value for the current question\n    setTimer(timers[currentQuestionIndex] || 0);\n    let interval;\n    // interval = setInterval(() => {\n    //     setTimer(prevTimer => prevTimer + 1);\n    // }, 1000);\n\n    if (!isPaused) {\n      interval = setInterval(() => {\n        setTimer(prevTimer => prevTimer + 1);\n      }, 1000);\n    }\n\n    // Clear the interval when the component unmounts or when the user moves to the next question\n    return () => {\n      clearInterval(interval);\n    };\n  }, [currentQuestionIndex, timers, isPaused]);\n  const visted = () => {\n    setQuestionStatus(Array(1).fill(\"Visited\"));\n  };\n\n  //   const renderList = buttons.map((item, index) => {\n  //     let className = \"quesAns-btn \";\n  //     if (questionStatus && questionStatus[index] === \"answered\") {\n  //       className += \" instruction-btn1\";\n  //     } else if (questionStatus && questionStatus[index] === \"notAnswered\") {\n  //       className += \" instruction-btn2\";\n  //     } else if (questionStatus && questionStatus[index] === \"marked\") {\n  //       className += \" instruction-btn3\";\n  //     } else if (\n  //       questionStatus &&\n  //       questionStatus[index] === \"Answered but marked for review\"\n  //     ) {\n  //       className += \" instruction-btn4\";\n  //     } else if (questionStatus && questionStatus[index] === \"Visited\") {\n  //       className += \" instruction-btn6\";\n  //     }\n  //     return (\n  //       <div key={item}>\n  //         <button className={className} onClick={() => handleButtonClick(item)}>\n  //           {item}\n  //         </button>\n  //       </div>\n  //     );\n  //   });\n\n  const totalTime = 180 * 60; // 180 minutes in seconds\n  const [wtimer, setWTimer] = useState(totalTime);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setWTimer(prevTimer => prevTimer - 1);\n    }, 1000);\n\n    // Clear the interval and handle time-up logic when timer reaches 0\n    if (wtimer <= 0) {\n      clearInterval(interval);\n      // Handle time-up logic here (e.g., navigate to a different component)\n    }\n\n    // Clean up the interval on component unmount or when navigating away\n    return () => {\n      clearInterval(interval);\n    };\n  }, [wtimer]);\n  const WformatTime = seconds => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor(seconds % 3600 / 60);\n    const remainingSeconds = seconds % 60;\n    return `${hours > 9 ? hours : \"0\" + hours}:${minutes > 9 ? minutes : \"0\" + minutes}:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"right-side-bar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rightSidebar-topHeader\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Name of the person\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Time Left: \", WformatTime(wtimer)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar-header\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ques-btn\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"btn-ul\",\n        children: renderSectionButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar-footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"sidebar-footer-header\",\n        children: \"Legend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-btns\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inst-btns\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"instruction-btn1\",\n            children: answeredCount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Answerd\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inst-btns\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"instruction-btn2\",\n            children: notAnsweredCount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Not Answered\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inst-btns\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"instruction-btn3\",\n            children: answeredmarkedForReviewCount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Marked\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inst-btns\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"instruction-btn4\",\n            children: markedForReviewCount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Answered but marked for review\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inst-btns\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"instruction-btn5\",\n            children: VisitedCount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Not Visited\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 5\n  }, this);\n};\n_s(ButtonsFunctionality, \"jtIwz6kUeeeLqkWrK8RIW58j5fM=\", false, function () {\n  return [useParams];\n});\n_c = ButtonsFunctionality;\nexport default ButtonsFunctionality;\nvar _c;\n$RefreshReg$(_c, \"ButtonsFunctionality\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Link","useParams","PropTypes","jsxDEV","_jsxDEV","ButtonsFunctionality","onQuestionSelect","questionStatus","seconds","setQuestionStatus","answeredCount","notAnsweredCount","answeredmarkedForReviewCount","markedForReviewCount","VisitedCount","selectedSubject","_s","questionData","setQuestionData","testCreationTableId","fetchQuestions","response","fetch","data","json","questions","options","mergedData","map","question","index","slice","console","error","sections","sectionId","sectionName","subject","renderSectionButtons","filteredSections","filter","section","log","children","className","onClick","handleButtonClick","fileName","_jsxFileName","lineNumber","columnNumber","questionIndex","questionId","questionNumber","activeQuestion","setActiveQuestion","answeredQuestions","setAnsweredQuestions","isPaused","setIsPaused","isVisitedButNotAnswered","updatedQuestionStatus","propTypes","func","isRequired","arrayOf","string","onResumeTimer","currentQuestionIndex","setCurrentQuestionIndex","timers","setTimers","Array","fill","timer","setTimer","interval","setInterval","prevTimer","clearInterval","visted","totalTime","wtimer","setWTimer","WformatTime","hours","Math","floor","minutes","remainingSeconds","_c","$RefreshReg$"],"sources":["/home/user/Documents/egate_Quiz_project/src/Pages/MainQuizFunctionality/ButtonsFunctionality.jsx"],"sourcesContent":["\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport \"../RightSidebar/RightSidebar.css\";\n\nimport PropTypes from \"prop-types\";\n\n// const buttons = [\n//   1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n//   23, 24, 25, 26, 27, 28, 29, 30,\n// ];\n\n\n\nconst ButtonsFunctionality = ({\n    onQuestionSelect,\n    questionStatus,\n    seconds,\n    setQuestionStatus,\n    answeredCount,\n    notAnsweredCount,\n    answeredmarkedForReviewCount,\n    markedForReviewCount,\n    VisitedCount,\n    selectedSubject,\n}) => {\n\n    const [questionData, setQuestionData] = useState([]);\n    const { testCreationTableId } = useParams();\n\n    const fetchQuestions = async () => {\n        try {\n          const response = await fetch(\n            `http://localhost:4009/getQuestions/${testCreationTableId}/${selectedSubject}`\n          );\n          const data = await response.json();\n    \n          if (data && data.questions && data.options) {\n            const mergedData = data.questions.map((question, index) => ({\n              ...question,\n              options: data.options.slice(index * 4, (index + 1) * 4),\n            }));\n    \n            setQuestionData(mergedData);\n          } else {\n            console.error(\"API response does not have expected structure:\", data);\n          }\n        } catch (error) {\n          console.error(error);\n        }\n      };\n\n      useEffect(() => {\n        fetchQuestions();\n      }, [testCreationTableId, selectedSubject]);\n\n    const sections = [\n        // Your section data here (adjust based on your actual data structure)\n        { sectionId: 1, sectionName: 'Mathematics', subject: 'Mathematics' },\n        { sectionId: 2, sectionName: 'Chemistry', subject: 'Chemistry' },\n        { sectionId: 4, sectionName: 'Physics', subject: 'Physics' },\n       \n      ];\n\n    const renderSectionButtons = () => {\n        // Filter sections based on the selected subject\n        const filteredSections = sections.filter(\n          (section) => section.subject === selectedSubject\n        );\n    \n\n        console.log(\"Filtered Sections:\", filteredSections);\n        console.log(\"Question Data:\", questionData);\n        // Render buttons for filteredSections\n        return filteredSections.map((section, index) => (\n          <li key={index}>\n            <p className=\"section-btn\" onClick={() => handleButtonClick(section.sectionId)}>\n            You are viewing<span className=\"subject\"> {section.sectionName} </span>Section\n          Question Palette\n            </p>\n            {questionData.map((question, questionIndex) => (\n          <button\n            key={questionIndex}\n            onClick={() => handleButtonClick(question.questionId)}\n          >\n            {question.questionNumber}\n          </button>\n        ))}\n          </li>\n        ));\n      };\n\n    \n\n    \n\n    const [activeQuestion, setActiveQuestion] = useState(0);\n  const [answeredQuestions, setAnsweredQuestions] = useState([]);\n  const [isPaused, setIsPaused] = useState(false);\n\n\n  const handleButtonClick = (questionNumber) => {\n    onQuestionSelect(questionNumber);\n    setAnsweredQuestions([...answeredQuestions, questionNumber]);\n    setIsPaused(false);\n\n    const isVisitedButNotAnswered =\n      questionStatus[questionNumber - 1] === \"notVisited\";\n    if (isVisitedButNotAnswered) {\n      // Mark the question as \"not answered\"\n      const updatedQuestionStatus = [...questionStatus];\n      updatedQuestionStatus[questionNumber - 1] = \"notAnswered\";\n      setQuestionStatus(updatedQuestionStatus);\n    } else if (questionStatus[questionNumber - 1] === \"marked\") {\n      // Mark the question as \"Marked for review\" by default if not visited\n      const updatedQuestionStatus = [...questionStatus];\n      updatedQuestionStatus[questionNumber - 1] = \"markedForReview\";\n      setQuestionStatus(updatedQuestionStatus);\n    }\n  };\n\n  ButtonsFunctionality.propTypes = {\n    onQuestionSelect: PropTypes.func.isRequired,\n    questionStatus: PropTypes.arrayOf(PropTypes.string),\n    onResumeTimer: PropTypes.func.isRequired, // Define the prop type for onResumeTimer\n  };\n\n\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [timers, setTimers] = useState(new Array().fill(0));\n  const [timer, setTimer] = useState(0);\n\n  useEffect(() => {\n    // Set the timer to the saved value for the current question\n    setTimer(timers[currentQuestionIndex] || 0);\n\n    let interval;\n    // interval = setInterval(() => {\n    //     setTimer(prevTimer => prevTimer + 1);\n    // }, 1000);\n\n    if (!isPaused) {\n      interval = setInterval(() => {\n        setTimer((prevTimer) => prevTimer + 1);\n      }, 1000);\n    }\n\n    // Clear the interval when the component unmounts or when the user moves to the next question\n    return () => {\n      clearInterval(interval);\n    };\n  }, [currentQuestionIndex, timers, isPaused]);\n\n  const visted = () => {\n    setQuestionStatus(Array(1).fill(\"Visited\"));\n  };\n\n\n//   const renderList = buttons.map((item, index) => {\n//     let className = \"quesAns-btn \";\n//     if (questionStatus && questionStatus[index] === \"answered\") {\n//       className += \" instruction-btn1\";\n//     } else if (questionStatus && questionStatus[index] === \"notAnswered\") {\n//       className += \" instruction-btn2\";\n//     } else if (questionStatus && questionStatus[index] === \"marked\") {\n//       className += \" instruction-btn3\";\n//     } else if (\n//       questionStatus &&\n//       questionStatus[index] === \"Answered but marked for review\"\n//     ) {\n//       className += \" instruction-btn4\";\n//     } else if (questionStatus && questionStatus[index] === \"Visited\") {\n//       className += \" instruction-btn6\";\n//     }\n//     return (\n//       <div key={item}>\n//         <button className={className} onClick={() => handleButtonClick(item)}>\n//           {item}\n//         </button>\n//       </div>\n//     );\n//   });\n\n\n  const totalTime = 180 * 60; // 180 minutes in seconds\n  const [wtimer, setWTimer] = useState(totalTime);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setWTimer((prevTimer) => prevTimer - 1);\n    }, 1000);\n\n    // Clear the interval and handle time-up logic when timer reaches 0\n    if (wtimer <= 0) {\n      clearInterval(interval);\n      // Handle time-up logic here (e.g., navigate to a different component)\n    }\n\n    // Clean up the interval on component unmount or when navigating away\n    return () => {\n      clearInterval(interval);\n    };\n  }, [wtimer]);\n\n\n  const WformatTime = (seconds) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const remainingSeconds = seconds % 60;\n    return `${hours > 9 ? hours : \"0\" + hours}:${\n      minutes > 9 ? minutes : \"0\" + minutes\n    }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n  };\n\n\n\n  \n\n\n\n  return (\n    <div className=\"right-side-bar\">\n      <div className=\"rightSidebar-topHeader\">\n        <p>Name of the person</p>\n        <p>Time Left: {WformatTime(wtimer)}</p>\n      </div>\n      <div className=\"sidebar-header\">\n        {/* <p className=\"header-para\">\n          You are viewing <span className=\"subject\">Mathematics</span> Section\n          Question Palette\n        </p> */}\n      </div>\n\n      <div className=\"ques-btn\">\n        <ul className=\"btn-ul\">{ renderSectionButtons()}</ul>\n      </div>\n\n      {/* <div key={index}>\n                <button className='quesAns-btn'>{item}</button>\n            </div> */}\n\n      <div className=\"sidebar-footer\">\n        <h4 className=\"sidebar-footer-header\">Legend</h4>\n        <div className=\"footer-btns\">\n          <div className=\"inst-btns\">\n            <button className=\"instruction-btn1\">{answeredCount}</button>\n            <p>Answerd</p>\n            <br />\n          </div>\n          <br />\n          <div className=\"inst-btns\">\n            <button className=\"instruction-btn2\">{notAnsweredCount}</button>\n            <p>Not Answered</p>\n            <br />\n          </div>\n          <br />\n          <div className=\"inst-btns\">\n            <button className=\"instruction-btn3\">\n              {answeredmarkedForReviewCount}\n            </button>\n            <p>Marked</p>\n            <br />\n          </div>\n          <br />\n          <div className=\"inst-btns\">\n            <button className=\"instruction-btn4\">{markedForReviewCount}</button>\n            <p>Answered but marked for review</p>\n          </div>\n          <br />\n          <div className=\"inst-btns\">\n            <button className=\"instruction-btn5\">{VisitedCount}</button>\n            <p>Not Visited</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ButtonsFunctionality;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}