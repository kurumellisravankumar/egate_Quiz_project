{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/egate_Quiz_project/src/Pages/MainQuizFunctionality/QuestionsFunctionality.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\nimport \"../Paper/Paper.css\";\nimport ButtonsFunctionality from \"./ButtonsFunctionality\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionsFunctionality = ({\n  answeredQuestions\n}) => {\n  _s();\n  const [selectedSubject, setSelectedSubject] = useState(null);\n  const handleSubjectSelect = subject => {\n    // Set the selected subject when a subject button is clicked\n    setSelectedSubject(subject);\n  };\n  const [questionData, setQuestionData] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [Subjects, setSubjects] = useState([]);\n  const {\n    testCreationTableId,\n    subjectId\n  } = useParams();\n  const [sections, setSections] = useState([]);\n  const [questionStatus, setQuestionStatus] = useState(Array(questionData.length).fill(\"notAnswered\"));\n  const [answeredCount, setAnsweredCount] = useState(0);\n  const [notAnsweredCount, setNotAnsweredCount] = useState(0);\n  const [answeredmarkedForReviewCount, setAnsweredmarkedForReviewCount] = useState(0);\n  const [markedForReviewCount, setMarkedForReviewCount] = useState(0);\n  const [VisitedCount, setVisitedCount] = useState(0);\n  const updateCounters = () => {\n    let answered = 0;\n    let notAnswered = 0;\n    let marked = 0;\n    let markedForReview = 0;\n    let Visited = 0;\n    questionStatus.forEach(status => {\n      if (status === \"answered\") {\n        answered++;\n      } else if (status === \"notAnswered\") {\n        notAnswered++;\n      } else if (status === \"marked\") {\n        marked++;\n      } else if (status === \"Answered but marked for review\") {\n        markedForReview++;\n      } else if (status === \"notVisited\") {\n        Visited++;\n      }\n    });\n    setAnsweredCount(answered);\n    setNotAnsweredCount(notAnswered);\n    setAnsweredmarkedForReviewCount(marked);\n    setMarkedForReviewCount(markedForReview);\n    setVisitedCount(Visited);\n  };\n\n  // ---------------------------------Timer code Start--------------------------------\n  const [timer, setTimer] = useState(0);\n  const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\n  const formatTime = seconds => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor(seconds % 3600 / 60);\n    const remainingSeconds = seconds % 60;\n    return `${hours > 9 ? hours : \"0\" + hours}:${minutes > 9 ? minutes : \"0\" + minutes}:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n  };\n  useEffect(() => {\n    // Set the timer to the saved value for the current question\n    setTimer(timers[currentQuestionIndex] || 0);\n    let interval;\n    interval = setInterval(() => {\n      setTimer(prevTimer => prevTimer + 1);\n    }, 1000);\n    // Clear the interval when the component unmounts or when the user moves to the next question\n    return () => {\n      clearInterval(interval);\n    };\n  }, [currentQuestionIndex, timers]);\n  // ------------------------------------Timer code end--------------------------------\n\n  useEffect(() => {\n    const fetchSubjects = async () => {\n      try {\n        const response = await fetch(`http://localhost:4009/subjects/${testCreationTableId}`);\n        const data = await response.json();\n        setSubjects(data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    const fetchSections = async () => {\n      try {\n        const response = await fetch(`http://localhost:4009/fetchSections/${testCreationTableId}`);\n        const data = await response.json();\n        setSections(data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    const fetchQuestionData = async () => {\n      try {\n        const response = await fetch(`http://localhost:4009/getPaperData/${testCreationTableId}`);\n        const data = await response.json();\n\n        // Check if the data has both 'questions' and 'options' properties\n        if (data && data.questions && data.options) {\n          // Assuming both questions and options are arrays, you might want to merge them\n          const mergedData = data.questions.map((question, index) => ({\n            ...question,\n            options: data.options.slice(index * 4, (index + 1) * 4) // Assuming 4 options per question\n          }));\n\n          setQuestionData(mergedData);\n          setQuestionStatus([\"notAnswered\", ...Array(mergedData.length - 1).fill(\"notVisited\")]);\n        } else {\n          console.error(\"API response does not have expected structure:\", data);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchSubjects();\n    fetchSections();\n    fetchQuestionData();\n    updateCounters();\n  }, [testCreationTableId]);\n  const [selectedAnswers, setSelectedAnswers] = useState(Array(questionData.length).fill(\"\"));\n  const onAnswerSelected = OptionLetter => {\n    const updatedSelectedAnswers = [...selectedAnswers];\n    updatedSelectedAnswers[activeQuestion] = OptionLetter;\n    setSelectedAnswers(updatedSelectedAnswers);\n    const updatedQuestionStatus = [...questionStatus];\n    updatedQuestionStatus[activeQuestion] = \"answered\";\n    setQuestionStatus(updatedQuestionStatus);\n  };\n  const [activeQuestion, setActiveQuestion] = useState(0);\n  const markForReview = () => {\n    // Update questionStatus for the marked question\n    const updatedQuestionStatus = [...questionStatus];\n    if (selectedAnswers[activeQuestion]) {\n      updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n      if (selectedAnswers[activeQuestion] === \"Answered but marked for review\") {\n        updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n      }\n    } else if (!selectedAnswers[activeQuestion]) {\n      updatedQuestionStatus[activeQuestion] = \"marked\";\n    }\n    setQuestionStatus(updatedQuestionStatus);\n  };\n  const clearResponse = () => {\n    const updatedSelectedAnswers = [...selectedAnswers];\n    updatedSelectedAnswers[currentQuestionIndex] = \"\";\n    setSelectedAnswers(updatedSelectedAnswers);\n  };\n\n  // const goToPreviousQuestion = () => {\n  //     setCurrentQuestionIndex((prevIndex) => {\n  //         // Save the current timer value for the question\n  //         const updatedTimers = [...timers];\n  //         updatedTimers[prevIndex] = timer;\n  //         setTimers(updatedTimers);\n  //         // Move to the previous question\n  //         return prevIndex > 0 ? prevIndex - 1 : prevIndex;\n  //     });\n\n  //     if (questionData.length > 0) {\n  //         setActiveQuestion((prevActiveQuestion) => prevActiveQuestion > 0 ? prevActiveQuestion - 1 : prevActiveQuestion);\n  //     }\n  // };\n\n  const goToPreviousQuestion = () => {\n    setCurrentQuestionIndex(prevIndex => {\n      // Save the current timer value for the question\n      const updatedTimers = [...timers];\n      updatedTimers[prevIndex] = timer;\n      setTimers(updatedTimers);\n      // Move to the previous question\n      return prevIndex - 1;\n    });\n    setActiveQuestion(prevActiveQuestion => prevActiveQuestion - 1);\n  };\n  const handleNextClick = () => {\n    setCurrentQuestionIndex(prevIndex => {\n      // Save the current timer value for the question\n\n      const updatedTimers = [...timers];\n      updatedTimers[prevIndex] = timer;\n      setTimers(updatedTimers);\n      return prevIndex + 1;\n    });\n    const updatedQuestionStatus = [...questionStatus];\n    if (activeQuestion < questionData.length - 1) {\n      // Check the status of the next question\n      const nextQuestionStatus = questionStatus[activeQuestion + 1];\n      if (nextQuestionStatus === \"answered\") {\n        updatedQuestionStatus[activeQuestion] = \"answered\";\n      } else if (nextQuestionStatus === \"notAnswered\") {\n        updatedQuestionStatus[activeQuestion] = \"notAnswered\";\n      } else if (!markForReview() === false) {\n        markForReview();\n      }\n      setActiveQuestion(prevActiveQuestion => prevActiveQuestion + 1);\n    }\n\n    // Update activeQuestion here if necessary\n    setActiveQuestion(prevActiveQuestion => prevActiveQuestion + 1);\n    if (activeQuestion < questionData.length - 1) {\n      updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n      setQuestionStatus(updatedQuestionStatus);\n      setActiveQuestion(activeQuestion + 1); // Move to the next question\n    }\n\n    // updatedQuestionStatus[activeQuestion] = \"notAnswered\";\n\n    // Set status of the next question (if any) to \"notAnswered\"\n    // Set status of the next question (if any) to \"notAnswered\"\n    if (activeQuestion < questionData.length - 1) {\n      const updatedQuestionStatus = [...questionStatus];\n      updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n      setQuestionStatus(updatedQuestionStatus);\n      setActiveQuestion(activeQuestion + 1); // Move to the next question\n    }\n\n    if (activeQuestion < questionData.length - 1) {\n      updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n    } else if (!selectedAnswers[activeQuestion] === \"answered\") {\n      updatedQuestionStatus[activeQuestion] = \"notAnswered\";\n    } else if (!markForReview() === true) {\n      markForReview();\n    } else if (selectedAnswers[activeQuestion]) {\n      updatedQuestionStatus[activeQuestion] = \"answered\";\n    } else if (!markForReview() === false) {\n      markForReview();\n    }\n    setQuestionStatus(updatedQuestionStatus);\n\n    // const correctAnswer = Qimages[activeQuestion].correct_answer; // Replace 'correct_answer' with the actual property name\n    // const selectedAnswer = selectedAnswers[activeQuestion];\n\n    // if (selectedAnswer === correctAnswer) {\n    //   setResult((prevResult) => ({\n    //     ...prevResult,\n    //     score: prevResult.score + 5,\n    //     correctAnswers: prevResult.correctAnswers + 1,\n    //   }));\n    // } else {\n    //   setResult((prevResult) => ({\n    //     ...prevResult,\n    //     wrongAnswers: prevResult.wrongAnswers + 1,\n    //   }));\n    // }\n\n    // if (activeQuestion < Qimages.length - 1) {\n    //   setActiveQuestion((prevActiveQuestion) => prevActiveQuestion + 1);\n    // } else {\n    //   // setShowResult(true);\n    //   calculateResult();\n    // }\n\n    // Update the current question index to move to the next question\n  };\n\n  const [OPTimages, setOPTImages] = useState([]);\n  const [showResult, setShowResult] = useState(false);\n  const [result, setResult] = useState({\n    score: 0,\n    correctAnswers: 0,\n    wrongAnswers: 0\n  });\n  const [accuracy, setAccuracy] = useState(0);\n  const [averageScore, setAverageScore] = useState(0);\n  const [topScore, setTopScore] = useState(0);\n  const [liveRank, setLiveRank] = useState(0);\n  const calculateResult = () => {\n    // Make sure answeredQuestions is defined before accessing its length\n    const totalAttempted = answeredQuestions ? answeredQuestions.length : 0;\n    const totalCorrect = result.correctAnswers;\n    const calculatedAccuracy = totalAttempted > 0 ? totalCorrect / totalAttempted * 100 : 0;\n    setAccuracy(calculatedAccuracy.toFixed(2));\n    const calculatedAverageScore = totalAttempted > 0 ? result.score / totalAttempted : 0;\n    setAverageScore(calculatedAverageScore.toFixed(2));\n\n    // Placeholder for live ranking data - Replace this with actual data\n    const calculatedTopScore = 0;\n    const calculatedLiveRank = 0;\n    setTopScore(calculatedTopScore);\n    setLiveRank(calculatedLiveRank);\n  };\n  const handleSubmit = () => {\n    window.alert(\"Your Test has been Submitted!! Click Ok to See Result.\");\n    setShowResult(true);\n    calculateResult();\n\n    //starting result page code\n\n    // const correctAnswer = Qimages[activeQuestion].correct_answer;\n    // setResult((prev) =>\n    //   selectedAnswers[activeQuestion] === correctAnswer\n    //     ? {\n    //         ...prev,\n    //         score: prev.score + 5,\n    //         correctAnswers: prev.correctAnswers + 1,\n    //       }\n    //     : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\n    // );\n    // if (activeQuestion !== Qimages.length - 1) {\n    //   setActiveQuestion((prev) => prev + 1);\n    // } else {\n    //   window.alert(\"Your Test has been Submitted!! Click Ok to See Result.\");\n    //   // setActiveQuestion(0);\n    //   setShowResult(true);\n    //   calculateResult(); //new added code\n    // }\n    //end result page code\n  };\n\n  const [opensubject_1, setOpensubject_1] = useState(true);\n  const [opensubject_2, setOpensubject_2] = useState(false);\n  const [opensubject_3, setOpensubject_3] = useState(false);\n  const openAlertSubject1 = () => {\n    setOpensubject_1(true);\n    setOpensubject_2(false);\n    setOpensubject_3(false);\n  };\n  const openAlertSubject2 = () => {\n    setOpensubject_2(true);\n    setOpensubject_1(false);\n    setOpensubject_3(false);\n  };\n  const openAlertSubject3 = () => {\n    setOpensubject_3(true);\n    setOpensubject_2(false);\n    setOpensubject_1(false);\n  };\n  const handleQuestionSelect = questionNumber => {\n    setCurrentQuestionIndex(questionNumber - 1);\n    setActiveQuestion(questionNumber - 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Main-Page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(PaperHeader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"subjects\",\n        children: Subjects.map((subjectTitle, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"subject-btn\",\n              onClick: () => handleSubjectSelect(subjectTitle.subjectName),\n              children: subjectTitle.subjectName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 450,\n              columnNumber: 36\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"second-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"single-select-question\",\n          children: sections.map((sectionTitle, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: sectionTitle.sectionName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 33\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"marks\",\n            children: [\"Marks: \", /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"plus-mark\",\n              children: \"+1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 36\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"minus-mark\",\n              children: \"-1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Timer: \", formatTime(timer)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"  Question No. \", currentQuestionIndex + 1, \"  of \", questionData.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 17\n      }, this), questionData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `data:image/png;base64,${questionData[currentQuestionIndex].question_img}`,\n            alt: `Question ${currentQuestionIndex + 1}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 25\n        }, this), questionData[currentQuestionIndex].options.map((OptionImage, optionIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: `question-${currentQuestionIndex}-option`,\n            value: optionIndex,\n            checked: selectedAnswers[currentQuestionIndex] === optionIndex,\n            onChange: () => onAnswerSelected(optionIndex)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 37\n          }, this), OptionImage && OptionImage.option_img && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `data:image/png;base64,${OptionImage.option_img}`,\n            alt: `Option ${optionIndex + 1}`\n          }, OptionImage.question_id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 41\n          }, this)]\n        }, optionIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 33\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-right\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"clear-btn\",\n            onClick: markForReview,\n            children: \"Mark for Review & Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 512,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"clear-btn\",\n            onClick: clearResponse,\n            children: \"Clear Response\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"previous-btn\",\n            onClick: goToPreviousQuestion,\n            disabled: currentQuestionIndex === 0,\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa-solid fa-angles-left\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 523,\n              columnNumber: 33\n            }, this), \" Previous\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 518,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"save-btn\",\n            onClick: handleNextClick,\n            children: [\"Next \", /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa-solid fa-angles-right\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 526,\n              columnNumber: 38\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 525,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rightsidebar\",\n      children: [/*#__PURE__*/_jsxDEV(ButtonsFunctionality, {\n        onQuestionSelect: handleQuestionSelect,\n        questionStatus: questionStatus,\n        setQuestionStatus: setQuestionStatus,\n        answeredCount: answeredCount,\n        notAnsweredCount: notAnsweredCount,\n        answeredmarkedForReviewCount: answeredmarkedForReviewCount,\n        markedForReviewCount: markedForReviewCount,\n        VisitedCount: VisitedCount,\n        selectedSubject: selectedSubject,\n        questionData: questionData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        id: \"resume_btn\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 442,\n    columnNumber: 9\n  }, this);\n};\n_s(QuestionsFunctionality, \"RVXPvMxOZqg303Pol+w8s0my55M=\", false, function () {\n  return [useParams];\n});\n_c = QuestionsFunctionality;\nexport default QuestionsFunctionality;\nvar _c;\n$RefreshReg$(_c, \"QuestionsFunctionality\");","map":{"version":3,"names":["React","useState","useEffect","Link","useParams","PaperHeader","ButtonsFunctionality","jsxDEV","_jsxDEV","QuestionsFunctionality","answeredQuestions","_s","selectedSubject","setSelectedSubject","handleSubjectSelect","subject","questionData","setQuestionData","currentQuestionIndex","setCurrentQuestionIndex","Subjects","setSubjects","testCreationTableId","subjectId","sections","setSections","questionStatus","setQuestionStatus","Array","length","fill","answeredCount","setAnsweredCount","notAnsweredCount","setNotAnsweredCount","answeredmarkedForReviewCount","setAnsweredmarkedForReviewCount","markedForReviewCount","setMarkedForReviewCount","VisitedCount","setVisitedCount","updateCounters","answered","notAnswered","marked","markedForReview","Visited","forEach","status","timer","setTimer","timers","setTimers","formatTime","seconds","hours","Math","floor","minutes","remainingSeconds","interval","setInterval","prevTimer","clearInterval","fetchSubjects","response","fetch","data","json","error","console","fetchSections","fetchQuestionData","questions","options","mergedData","map","question","index","slice","selectedAnswers","setSelectedAnswers","onAnswerSelected","OptionLetter","updatedSelectedAnswers","activeQuestion","updatedQuestionStatus","setActiveQuestion","markForReview","clearResponse","goToPreviousQuestion","prevIndex","updatedTimers","prevActiveQuestion","handleNextClick","nextQuestionStatus","OPTimages","setOPTImages","showResult","setShowResult","result","setResult","score","correctAnswers","wrongAnswers","accuracy","setAccuracy","averageScore","setAverageScore","topScore","setTopScore","liveRank","setLiveRank","calculateResult","totalAttempted","totalCorrect","calculatedAccuracy","toFixed","calculatedAverageScore","calculatedTopScore","calculatedLiveRank","handleSubmit","window","alert","opensubject_1","setOpensubject_1","opensubject_2","setOpensubject_2","opensubject_3","setOpensubject_3","openAlertSubject1","openAlertSubject2","openAlertSubject3","handleQuestionSelect","questionNumber","className","children","fileName","_jsxFileName","lineNumber","columnNumber","subjectTitle","onClick","subjectName","sectionTitle","sectionName","src","question_img","alt","OptionImage","optionIndex","type","name","value","checked","onChange","option_img","question_id","disabled","onQuestionSelect","id","_c","$RefreshReg$"],"sources":["/home/user/Documents/egate_Quiz_project/src/Pages/MainQuizFunctionality/QuestionsFunctionality.jsx"],"sourcesContent":["\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\nimport \"../Paper/Paper.css\";\nimport ButtonsFunctionality from \"./ButtonsFunctionality\";\n\n\n\nconst QuestionsFunctionality = ({ answeredQuestions }) => {\n\n    const [selectedSubject, setSelectedSubject] = useState(null);\n\n    const handleSubjectSelect = (subject) => {\n        // Set the selected subject when a subject button is clicked\n        setSelectedSubject(subject);\n      };\n\n    const [questionData, setQuestionData] = useState([]);\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [Subjects, setSubjects] = useState([]);\n    const { testCreationTableId, subjectId } = useParams();\n    const [sections, setSections] = useState([]);\n\n\n    const [questionStatus, setQuestionStatus] = useState(\n        Array(questionData.length).fill(\"notAnswered\")\n    );\n\n    const [answeredCount, setAnsweredCount] = useState(0);\n    const [notAnsweredCount, setNotAnsweredCount] = useState(0);\n    const [answeredmarkedForReviewCount, setAnsweredmarkedForReviewCount] =\n        useState(0);\n    const [markedForReviewCount, setMarkedForReviewCount] = useState(0);\n    const [VisitedCount, setVisitedCount] = useState(0);\n\n\n    const updateCounters = () => {\n        let answered = 0;\n        let notAnswered = 0;\n        let marked = 0;\n        let markedForReview = 0;\n        let Visited = 0;\n    \n        questionStatus.forEach((status) => {\n          if (status === \"answered\") {\n            answered++;\n          } else if (status === \"notAnswered\") {\n            notAnswered++;\n          } else if (status === \"marked\") {\n            marked++;\n          } else if (status === \"Answered but marked for review\") {\n            markedForReview++;\n          } else if (status === \"notVisited\") {\n            Visited++;\n          }\n        });\n    \n        setAnsweredCount(answered);\n        setNotAnsweredCount(notAnswered);\n        setAnsweredmarkedForReviewCount(marked);\n        setMarkedForReviewCount(markedForReview);\n        setVisitedCount(Visited);\n      };\n\n\n        // ---------------------------------Timer code Start--------------------------------\n        const [timer, setTimer] = useState(0);\n        const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\n    \n        const formatTime = (seconds) => {\n            const hours = Math.floor(seconds / 3600);\n    \n            const minutes = Math.floor((seconds % 3600) / 60);\n    \n            const remainingSeconds = seconds % 60;\n    \n            return `${hours > 9 ? hours : \"0\" + hours}:${minutes > 9 ? minutes : \"0\" + minutes\n                }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n        };\n    \n        useEffect(() => {\n            // Set the timer to the saved value for the current question\n            setTimer(timers[currentQuestionIndex] || 0);\n            let interval;\n            interval = setInterval(() => {\n                setTimer((prevTimer) => prevTimer + 1);\n            }, 1000);\n            // Clear the interval when the component unmounts or when the user moves to the next question\n            return () => {\n                clearInterval(interval);\n            };\n        }, [currentQuestionIndex, timers]);\n        // ------------------------------------Timer code end--------------------------------\n\n\n    useEffect(() => {\n        const fetchSubjects = async () => {\n            try {\n                const response = await fetch(\n                    `http://localhost:4009/subjects/${testCreationTableId}`\n                );\n                const data = await response.json();\n                setSubjects(data);\n            } catch (error) {\n                console.error(error);\n            }\n        };\n\n\n\n\n        const fetchSections = async () => {\n            try {\n                const response = await fetch(\n                    `http://localhost:4009/fetchSections/${testCreationTableId}`\n                );\n                const data = await response.json();\n                setSections(data);\n            } catch (error) {\n                console.error(error);\n            }\n        };\n\n\n\n\n\n\n        const fetchQuestionData = async () => {\n            try {\n                const response = await fetch(\n                    `http://localhost:4009/getPaperData/${testCreationTableId}`\n                );\n                const data = await response.json();\n\n                // Check if the data has both 'questions' and 'options' properties\n                if (data && data.questions && data.options) {\n                    // Assuming both questions and options are arrays, you might want to merge them\n                    const mergedData = data.questions.map((question, index) => ({\n                        ...question,\n                        options: data.options.slice(index * 4, (index + 1) * 4), // Assuming 4 options per question\n                    }));\n\n                    setQuestionData(mergedData);\n                    setQuestionStatus([\n                        \"notAnswered\",\n                        ...Array(mergedData.length - 1).fill(\"notVisited\"),\n                    ]);\n                } else {\n                    console.error(\"API response does not have expected structure:\", data);\n                }\n            } catch (error) {\n                console.error(error);\n            }\n        };\n\n\n        fetchSubjects();\n        fetchSections();\n        fetchQuestionData();\n        updateCounters();\n    }, [testCreationTableId]);\n\n\n\n    const [selectedAnswers, setSelectedAnswers] = useState(\n        Array(questionData.length).fill(\"\")\n    );\n\n\n\n\n\n\n    const onAnswerSelected = (OptionLetter) => {\n        const updatedSelectedAnswers = [...selectedAnswers];\n        updatedSelectedAnswers[activeQuestion] = OptionLetter;\n        setSelectedAnswers(updatedSelectedAnswers);\n    \n        const updatedQuestionStatus = [...questionStatus];\n        updatedQuestionStatus[activeQuestion] = \"answered\";\n        setQuestionStatus(updatedQuestionStatus);\n      };\n\n    const [activeQuestion, setActiveQuestion] = useState(0);\n\n\n    const markForReview = () => {\n        // Update questionStatus for the marked question\n        const updatedQuestionStatus = [...questionStatus];\n        if (selectedAnswers[activeQuestion]) {\n          updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n          if(selectedAnswers[activeQuestion] === \"Answered but marked for review\"){\n            updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n          }\n        } else if (!selectedAnswers[activeQuestion]) {\n          updatedQuestionStatus[activeQuestion] = \"marked\";\n        }\n    \n        setQuestionStatus(updatedQuestionStatus);\n      };\n\n\n\n\n\n\n    const clearResponse = () => {\n        const updatedSelectedAnswers = [...selectedAnswers];\n        updatedSelectedAnswers[currentQuestionIndex] = \"\";\n        setSelectedAnswers(updatedSelectedAnswers);\n    };\n\n\n    // const goToPreviousQuestion = () => {\n    //     setCurrentQuestionIndex((prevIndex) => {\n    //         // Save the current timer value for the question\n    //         const updatedTimers = [...timers];\n    //         updatedTimers[prevIndex] = timer;\n    //         setTimers(updatedTimers);\n    //         // Move to the previous question\n    //         return prevIndex > 0 ? prevIndex - 1 : prevIndex;\n    //     });\n\n    //     if (questionData.length > 0) {\n    //         setActiveQuestion((prevActiveQuestion) => prevActiveQuestion > 0 ? prevActiveQuestion - 1 : prevActiveQuestion);\n    //     }\n    // };\n\n\n\n\n    const goToPreviousQuestion = () => {\n        setCurrentQuestionIndex((prevIndex) => {\n            // Save the current timer value for the question\n            const updatedTimers = [...timers];\n            updatedTimers[prevIndex] = timer;\n            setTimers(updatedTimers);\n            // Move to the previous question\n            return prevIndex - 1;\n        });\n    \n        setActiveQuestion((prevActiveQuestion) => prevActiveQuestion - 1);\n    };\n\n\n    const handleNextClick = () => {\n\n    \n        setCurrentQuestionIndex((prevIndex) => {\n          // Save the current timer value for the question\n    \n          const updatedTimers = [...timers];\n    \n          updatedTimers[prevIndex] = timer;\n    \n          setTimers(updatedTimers);\n          return prevIndex + 1;\n        });\n\n        const updatedQuestionStatus = [...questionStatus];\n\n    if (activeQuestion < questionData.length - 1) {\n        // Check the status of the next question\n        const nextQuestionStatus = questionStatus[activeQuestion + 1];\n\n        if (nextQuestionStatus === \"answered\") {\n            updatedQuestionStatus[activeQuestion] = \"answered\";\n        } else if (nextQuestionStatus === \"notAnswered\") {\n            updatedQuestionStatus[activeQuestion] = \"notAnswered\";\n        } else if (!markForReview() === false) {\n            markForReview();\n          }\n\n        setActiveQuestion((prevActiveQuestion) => prevActiveQuestion + 1);\n    }\n\n\n\n       \n\n    // Update activeQuestion here if necessary\n    setActiveQuestion((prevActiveQuestion) => prevActiveQuestion + 1);\n\n\n        if (activeQuestion < questionData.length - 1) {\n        updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n        setQuestionStatus(updatedQuestionStatus);\n        setActiveQuestion(activeQuestion + 1); // Move to the next question\n    }\n\n        \n        // updatedQuestionStatus[activeQuestion] = \"notAnswered\";\n    \n        // Set status of the next question (if any) to \"notAnswered\"\n           // Set status of the next question (if any) to \"notAnswered\"\n    if (activeQuestion < questionData.length - 1) {\n        const updatedQuestionStatus = [...questionStatus];\n        updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n        setQuestionStatus(updatedQuestionStatus);\n        setActiveQuestion(activeQuestion + 1); // Move to the next question\n    }\n        if (activeQuestion < questionData.length - 1) {\n          updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n        } else if (!selectedAnswers[activeQuestion] === \"answered\") {\n          updatedQuestionStatus[activeQuestion] = \"notAnswered\";\n        } else if (!markForReview() === true) {\n          markForReview();\n        } else if (selectedAnswers[activeQuestion]) {\n          updatedQuestionStatus[activeQuestion] = \"answered\";\n        } else if (!markForReview() === false) {\n          markForReview();\n        }\n    \n        setQuestionStatus(updatedQuestionStatus);\n    \n        // const correctAnswer = Qimages[activeQuestion].correct_answer; // Replace 'correct_answer' with the actual property name\n        // const selectedAnswer = selectedAnswers[activeQuestion];\n    \n        // if (selectedAnswer === correctAnswer) {\n        //   setResult((prevResult) => ({\n        //     ...prevResult,\n        //     score: prevResult.score + 5,\n        //     correctAnswers: prevResult.correctAnswers + 1,\n        //   }));\n        // } else {\n        //   setResult((prevResult) => ({\n        //     ...prevResult,\n        //     wrongAnswers: prevResult.wrongAnswers + 1,\n        //   }));\n        // }\n    \n        // if (activeQuestion < Qimages.length - 1) {\n        //   setActiveQuestion((prevActiveQuestion) => prevActiveQuestion + 1);\n        // } else {\n        //   // setShowResult(true);\n        //   calculateResult();\n        // }\n\n            // Update the current question index to move to the next question\n     \n      };\n    \n    const [OPTimages, setOPTImages] = useState([]);\n    const [showResult, setShowResult] = useState(false);\n    const [result, setResult] = useState({\n        score: 0,\n        correctAnswers: 0,\n        wrongAnswers: 0,\n    });\n\n\n    const [accuracy, setAccuracy] = useState(0);\n    const [averageScore, setAverageScore] = useState(0);\n    const [topScore, setTopScore] = useState(0);\n    const [liveRank, setLiveRank] = useState(0);\n\n    const calculateResult = () => {\n        // Make sure answeredQuestions is defined before accessing its length\n        const totalAttempted = answeredQuestions ? answeredQuestions.length : 0;\n        const totalCorrect = result.correctAnswers;\n        const calculatedAccuracy =\n            totalAttempted > 0 ? (totalCorrect / totalAttempted) * 100 : 0;\n        setAccuracy(calculatedAccuracy.toFixed(2));\n\n        const calculatedAverageScore =\n            totalAttempted > 0 ? result.score / totalAttempted : 0;\n        setAverageScore(calculatedAverageScore.toFixed(2));\n\n        // Placeholder for live ranking data - Replace this with actual data\n        const calculatedTopScore = 0;\n        const calculatedLiveRank = 0;\n\n        setTopScore(calculatedTopScore);\n        setLiveRank(calculatedLiveRank);\n    };\n\n    const handleSubmit = () => {\n        window.alert(\"Your Test has been Submitted!! Click Ok to See Result.\");\n        setShowResult(true);\n        calculateResult();\n\n        //starting result page code\n\n        // const correctAnswer = Qimages[activeQuestion].correct_answer;\n        // setResult((prev) =>\n        //   selectedAnswers[activeQuestion] === correctAnswer\n        //     ? {\n        //         ...prev,\n        //         score: prev.score + 5,\n        //         correctAnswers: prev.correctAnswers + 1,\n        //       }\n        //     : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\n        // );\n        // if (activeQuestion !== Qimages.length - 1) {\n        //   setActiveQuestion((prev) => prev + 1);\n        // } else {\n        //   window.alert(\"Your Test has been Submitted!! Click Ok to See Result.\");\n        //   // setActiveQuestion(0);\n        //   setShowResult(true);\n        //   calculateResult(); //new added code\n        // }\n        //end result page code\n    };\n\n\n\n    const [opensubject_1, setOpensubject_1] = useState(true);\n    const [opensubject_2, setOpensubject_2] = useState(false);\n    const [opensubject_3, setOpensubject_3] = useState(false);\n\n    const openAlertSubject1 = () => {\n        setOpensubject_1(true);\n        setOpensubject_2(false);\n        setOpensubject_3(false);\n    };\n    const openAlertSubject2 = () => {\n        setOpensubject_2(true);\n        setOpensubject_1(false);\n        setOpensubject_3(false);\n    };\n    const openAlertSubject3 = () => {\n        setOpensubject_3(true);\n        setOpensubject_2(false);\n        setOpensubject_1(false);\n    };\n\n    const handleQuestionSelect = (questionNumber) => {\n        setCurrentQuestionIndex(questionNumber - 1);\n        setActiveQuestion(questionNumber - 1);\n    };\n\n\n\n\n\n\n\n    return (\n\n        <div className=\"Main-Page\">\n            <div>\n                <div>\n                    <PaperHeader />\n                </div>\n                <div className=\"subjects\">\n                    {Subjects.map((subjectTitle, index) => (\n                        <li key={index}>\n                            <Link ><button className=\"subject-btn\" onClick={() => handleSubjectSelect(subjectTitle.subjectName)}>{subjectTitle.subjectName}</button></Link>\n                            {/* <button className=\"subject-btn\">{subjectTitle.subjectName}</button> */}\n                        </li>\n                    ))}\n\n                </div>\n                <div className=\"second-header\">\n                    <div className=\"single-select-question\">\n                        {sections.map((sectionTitle, index) => (\n                            <li key={index}>\n                                <p>{sectionTitle.sectionName}</p>\n\n                            </li>\n                        ))}\n                        {/* Single Select Question */}\n                    </div>\n                    <div className=\"right-header\">\n                        <div className=\"marks\">\n                            Marks: <div className=\"plus-mark\">+1</div>\n                            <div className=\"minus-mark\">-1</div>\n                        </div>\n                        <div>Timer: {formatTime(timer)}</div>\n                    </div>\n                </div>\n                <div>\n                    <p>  Question No. {currentQuestionIndex + 1}  of {questionData.length}</p>\n                </div>\n\n                {questionData.length > 0 && (\n                    <div>\n                        <h4>\n                            {/* {currentQuestionIndex + 1}. */}\n\n                            <img\n                                src={`data:image/png;base64,${questionData[currentQuestionIndex].question_img}`}\n                                alt={`Question ${currentQuestionIndex + 1}`}\n                            />\n                        </h4>\n\n                        {questionData[currentQuestionIndex].options.map(\n                            (OptionImage, optionIndex) => (\n                                <li key={optionIndex}>\n                                    <input\n                                        type=\"radio\"\n                                        name={`question-${currentQuestionIndex}-option`}\n                                        value={optionIndex}\n                                        checked={\n                                            selectedAnswers[currentQuestionIndex] === optionIndex\n                                        }\n                                        onChange={() => onAnswerSelected(optionIndex)}\n                                    />\n                                    {OptionImage && OptionImage.option_img && (\n                                        <img\n                                            key={OptionImage.question_id}\n                                            src={`data:image/png;base64,${OptionImage.option_img}`}\n                                            alt={`Option ${optionIndex + 1}`}\n                                        />\n                                    )}\n                                </li>\n                            )\n                        )}\n                        <div className=\"flex-right\">\n                        <button className=\"clear-btn\" onClick={markForReview}>\n                        Mark for Review & Next\n                            </button>\n                            <button className=\"clear-btn\" onClick={clearResponse}>\n                                Clear Response\n                            </button>\n                            <button\n                                className=\"previous-btn\"\n                                onClick={goToPreviousQuestion}\n                                disabled={currentQuestionIndex === 0}\n                            >\n                                <i className=\"fa-solid fa-angles-left\"></i> Previous\n                            </button>\n                            <button className=\"save-btn\" onClick={handleNextClick}>\n                                Next <i className=\"fa-solid fa-angles-right\"></i>\n                            </button>\n                        </div>\n                    </div>\n                )}\n\n            </div>\n\n\n            <div className=\"rightsidebar\">\n                <ButtonsFunctionality\n                    onQuestionSelect={handleQuestionSelect}\n                    questionStatus={questionStatus}\n                    setQuestionStatus={setQuestionStatus}\n                    answeredCount={answeredCount}\n                    notAnsweredCount={notAnsweredCount}\n                    answeredmarkedForReviewCount={answeredmarkedForReviewCount}\n                    markedForReviewCount={markedForReviewCount}\n                    VisitedCount={VisitedCount}\n                    selectedSubject={selectedSubject}\n                    questionData={questionData}\n                />\n                <button onClick={handleSubmit} id=\"resume_btn\">\n                    Submit\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default QuestionsFunctionality"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}