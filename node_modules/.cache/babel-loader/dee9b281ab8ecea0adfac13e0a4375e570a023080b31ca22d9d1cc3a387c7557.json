{"ast":null,"code":"var _jsxFileName = \"D:\\\\web projects files\\\\Current_egate_Quiz_project\\\\src\\\\Pages\\\\Paper\\\\Paper1.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// // import { useParams } from \"react-router-dom\";\n\n// const Paper1 = () => {\n//   // const { subi_id } = useParams();\n//   //     const [quizData, setQuizData] = useState([]);\n\n//   // console.log(quizData)\n//   // useEffect(() => {\n//   //   // Fetch data from the endpoint\n//   //   fetch(`http://localhost:10000/quiz_all/`+subi_id)\n\n//   //     .then((response) => response.json())\n//   //     .then((data) => setQuizData(data))\n//   //     .catch((error) => console.error('Error fetching data:', error));\n//   // }, [subi_id]);\n\n//   const [subjectNames, setSubjectNames] = useState([]);\n\n//   useEffect(() => {\n//     fetch(`http://localhost:4009/quiz_all/1`)\n//       .then((response) => response.json())\n//       .then((data) => {\n//         console.log(data); // Log the data received from the API\n//         setSubjectNames(data);\n//       })\n//       .catch((error) => console.error(\"Error fetching data:\", error));\n//   }, []);\n\n//   // const [answer, setAnswer] = useState([]);\n//   // useEffect(() => {\n//   //   // Fetch data from the endpoint\n//   //   fetch(`http://localhost:4009/answers/`)\n//   //     .then((response) => response.json())\n//   //     .then((data) => setAnswer(data))\n//   //     .catch((error) => console.error(\"Error fetching data:\", error));\n//   // }, []);\n\n//   return (\n//     <div>\n//       <h1>hii</h1>\n\n//       <div>\n//         {Array.isArray(subjectNames) && subjectNames.length > 0 ? (\n//           <div>\n//             {subjectNames.map((subjects) => (\n//               <li key={subjects.subi_id}>\n//                 <p>{subjects.subject_name}</p>\n//               </li>\n//             ))}\n//           </div>\n//         ) : (\n//           <p>No subjects available.</p>\n//         )}\n//         {/* <ul>\n//            {subjectNames.map((item) => (\n//           <li key={item.subi_id}>\n//             <p>{item.subject_name}</p>\n//           </li>\n//         ))}\n//         </ul> */}\n\n//         {/* <button>Mathematics</button>\n//                 <button>Physics</button>\n//                 <button>Chemistry</button> */}\n//       </div>\n\n//       {/* answers display */}\n//       {/* <div>\n//       {answer.map((ans) => (\n//           <li key={ans.subi_id}>\n//             <p>{ans.answer}</p>\n//           </li>\n//         ))}\n//       </div> */}\n\n//       {/* <h1>Quiz Questions</h1> */}\n//       <div>\n//         {/* {quizData.map((question) => (\n//           <div key={question.question_id}>\n//             <h3>Question {question.question_id}</h3>\n//             <img\n//               src={`data:image/png;base64,${question.question_img}`}\n//               alt={`Question ${question.question_id}`}\n//             />\n//             <ul>\n//               {question.options.map((option) => (\n//                 <li key={option.option_id}>\n//                   <img\n//                     src={`data:image/png;base64,${option.option_img}`}\n//                     alt={`Option ${option.option_id}`}\n//                   />\n//                 </li>\n//               ))}\n//             </ul>\n//           </div>\n//         ))} */}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Paper1;\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport \"./Paper.css\";\nimport PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\nimport RightSidebar from \"../../Components/RightSidebar/RightSidebar\";\n// import \"../../Components/RightSidebar/RightSidebar.css\";\nimport { DotSpinner } from \"@uiball/loaders\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Paper = () => {\n  _s();\n  const [Qimages, setQImages] = useState([]);\n  const [questionStatus, setQuestionStatus] = useState([\"notAnswered\", ...Array(29).fill(\"notVisited\")]);\n  const [answeredCount, setAnsweredCount] = useState(0);\n  const [notAnsweredCount, setNotAnsweredCount] = useState(0);\n  const [answeredmarkedForReviewCount, setAnsweredmarkedForReviewCount] = useState(0);\n  const [markedForReviewCount, setMarkedForReviewCount] = useState(0);\n  const [VisitedCount, setVisitedCount] = useState(0);\n  const updateCounters = () => {\n    let answered = 0;\n    let notAnswered = 0;\n    let marked = 0;\n    let markedForReview = 0;\n    let Visited = 0;\n    questionStatus.forEach(status => {\n      if (status === \"answered\") {\n        answered++;\n      } else if (status === \"notAnswered\") {\n        notAnswered++;\n      } else if (status === \"marked\") {\n        marked++;\n      } else if (status === \"Answered but marked for review\") {\n        markedForReview++;\n      } else if (status === \"notVisited\") {\n        Visited++;\n      }\n    });\n    setAnsweredCount(answered);\n    setNotAnsweredCount(notAnswered);\n    setAnsweredmarkedForReviewCount(marked);\n    setMarkedForReviewCount(markedForReview);\n    setVisitedCount(Visited);\n  };\n\n  // const [Qimages, setQImages] = useState([]);\n  const [OPTimages, setOPTImages] = useState([]);\n  const [activeQuestion, setActiveQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState(Array(Qimages.length).fill(\"\"));\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [showResult, setShowResult] = useState(false);\n  const [result, setResult] = useState({\n    score: 0,\n    correctAnswers: 0,\n    wrongAnswers: 0\n  });\n  useEffect(() => {\n    // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n    const fetchQImages = async () => {\n      let fetchedQImages = [];\n      for (let i = 1; i <= 1000; i += 6) {\n        // Assuming there are 100 sets of images\n        try {\n          const response = await fetch(`http://localhost:4009/api/getAllImages/${i}`);\n          const data = await response.json();\n          if (data.length > 0) {\n            fetchedQImages.push(data[0]); // Add only the first image from each set\n          }\n        } catch (error) {\n          console.error(\"Error fetching Qimages:\", error);\n        }\n      }\n      setQImages(fetchedQImages);\n    };\n\n    // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n    const fetchOPTImages = async () => {\n      let fetchedOPTImages = [];\n      for (let i = 1; i <= 1000; i += 6) {\n        // Assuming there are 100 sets of images\n        try {\n          for (let j = i + 1; j <= i + 4; j++) {\n            const response = await fetch(`http://localhost:4009/api/getAllImages/${j}`);\n            const data = await response.json();\n            if (data.length > 0) {\n              fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n            }\n          }\n        } catch (error) {\n          console.error(\"Error fetching OPTimages:\", error);\n        }\n      }\n      setOPTImages(fetchedOPTImages);\n    };\n    fetchQImages();\n    fetchOPTImages();\n    updateCounters();\n  }, [questionStatus]); // Empty dependency array to fetch data only once when the component mounts\n\n  const [timers, setTimers] = useState(new Array(Qimages.length).fill(0));\n  const [timer, setTimer] = useState(0);\n  const onAnswerSelected = OptionLetter => {\n    const updatedSelectedAnswers = [...selectedAnswers];\n    updatedSelectedAnswers[activeQuestion] = OptionLetter;\n    setSelectedAnswers(updatedSelectedAnswers);\n    const updatedQuestionStatus = [...questionStatus];\n    updatedQuestionStatus[activeQuestion] = \"answered\";\n    setQuestionStatus(updatedQuestionStatus);\n  };\n  const clearResponse = () => {\n    const updatedSelectedAnswers = [...selectedAnswers];\n    updatedSelectedAnswers[activeQuestion] = \"\";\n    setSelectedAnswers(updatedSelectedAnswers);\n  };\n  const goToPreviousQuestion = () => {\n    setCurrentQuestionIndex(prevIndex => {\n      // Save the current timer value for the question\n\n      const updatedTimers = [...timers];\n      updatedTimers[prevIndex] = timer;\n      setTimers(updatedTimers);\n\n      // Move to the previous question\n\n      return prevIndex - 1;\n    });\n    if (activeQuestion > 0) {\n      setActiveQuestion(activeQuestion - 1);\n    }\n  };\n  const onClickNext = () => {\n    setCurrentQuestionIndex(prevIndex => {\n      // Save the current timer value for the question\n\n      const updatedTimers = [...timers];\n      updatedTimers[prevIndex] = timer;\n      setTimers(updatedTimers);\n      return prevIndex + 1;\n    });\n\n    // // Mark the question as not answered\n\n    // const updatedQuestionStatus = [...questionStatus];\n    // if (!selectedAnswers[activeQuestion] === \"answered\") {\n    //   updatedQuestionStatus[activeQuestion] = \"notAnswered\";\n    // }\n    // else if(!markForReview()===true){\n    //   markForReview()\n    // }\n    // else if (selectedAnswers[activeQuestion]) {\n    //   updatedQuestionStatus[activeQuestion] = \"answered\";\n    // } else if(!markForReview()===false) {\n    //   markForReview()\n    // }\n\n    // setQuestionStatus(updatedQuestionStatus);\n\n    const updatedQuestionStatus = [...questionStatus];\n    // updatedQuestionStatus[activeQuestion] = \"notAnswered\";\n\n    // Set status of the next question (if any) to \"notAnswered\"\n    if (activeQuestion < Qimages.length - 1) {\n      updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n    } else if (!selectedAnswers[activeQuestion] === \"answered\") {\n      updatedQuestionStatus[activeQuestion] = \"notAnswered\";\n    } else if (!markForReview() === true) {\n      markForReview();\n    } else if (selectedAnswers[activeQuestion]) {\n      updatedQuestionStatus[activeQuestion] = \"answered\";\n    } else if (!markForReview() === false) {\n      markForReview();\n    }\n    setQuestionStatus(updatedQuestionStatus);\n    const correctAnswer = Qimages[activeQuestion].correct_answer; // Replace 'correct_answer' with the actual property name\n    const selectedAnswer = selectedAnswers[activeQuestion];\n    if (selectedAnswer === correctAnswer) {\n      setResult(prevResult => ({\n        ...prevResult,\n        score: prevResult.score + 5,\n        correctAnswers: prevResult.correctAnswers + 1\n      }));\n    } else {\n      setResult(prevResult => ({\n        ...prevResult,\n        wrongAnswers: prevResult.wrongAnswers + 1\n      }));\n    }\n    if (activeQuestion < Qimages.length - 1) {\n      setActiveQuestion(prevActiveQuestion => prevActiveQuestion + 1);\n    } else {\n      setShowResult(true);\n      calculateResult();\n    }\n  };\n  const markForReview = () => {\n    // Update questionStatus for the marked question\n    const updatedQuestionStatus = [...questionStatus];\n    if (selectedAnswers[activeQuestion]) {\n      updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n      // if(selectedAnswers[activeQuestion] === \"Answered but marked for review\"){\n      //   updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n      // }\n    } else if (!selectedAnswers[activeQuestion]) {\n      updatedQuestionStatus[activeQuestion] = \"marked\";\n    }\n    setQuestionStatus(updatedQuestionStatus);\n  };\n\n  // const formatTime = (seconds) => {\n  //   const hours = Math.floor(seconds / 3600);\n\n  //   const minutes = Math.floor((seconds % 3600) / 60);\n\n  //   const remainingSeconds = seconds % 60;\n\n  //   return `${hours > 9 ? hours : \"0\" + hours}:${\n  //     minutes > 9 ? minutes : \"0\" + minutes\n  //   }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n  // };\n\n  // useEffect(() => {\n  //   // Set the timer to the saved value for the current question\n\n  //   setTimer(timers[currentQuestionIndex] || 0);\n\n  //   let interval;\n\n  //   interval = setInterval(() => {\n  //     setTimer((prevTimer) => prevTimer + 1);\n  //   }, 1000);\n\n  //   // Clear the interval when the component unmounts or when the user moves to the next question\n\n  //   return () => {\n  //     clearInterval(interval);\n  //   };\n  // }, [currentQuestionIndex, timers]);\n\n  // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\n  const currentQuestion = Qimages[currentQuestionIndex];\n  const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : \"\";\n  const addLeadingZero = number => number > 9 ? number : `0${number}`;\n  const calculateResult = () => {\n    // Implement additional result calculations here if needed\n    // Example: Accuracy, Average Score, Top Score, Live Rank, etc.\n  };\n\n  // Timer for whole page\n\n  //   const totalTime = 180 * 60; // 180 minutes in seconds\n  //   const [wtimer, setWTimer] = useState(totalTime);\n\n  //   useEffect(() => {\n  //     const interval = setInterval(() => {\n  //       setWTimer((prevTimer) => prevTimer - 1);\n  //     }, 1000);\n\n  //     // Clear the interval and handle time-up logic when timer reaches 0\n  //     if (timer <= 0) {\n  //       clearInterval(interval);\n  //       // Handle time-up logic here (e.g., navigate to a different component)\n  //     }\n\n  //     // Clean up the interval on component unmount or when navigating away\n  //     return () => {\n  //       clearInterval(interval);\n  //     };\n  //   }, [timer]);\n\n  //   const WformatTime = (seconds) => {\n  //     const hours = Math.floor(seconds / 3600);\n  //     const minutes = Math.floor((seconds % 3600) / 60);\n  //     const remainingSeconds = seconds % 60;\n  //     return `${hours > 9 ? hours : '0' + hours}:${minutes > 9 ? minutes : '0' + minutes}:${remainingSeconds > 9 ? remainingSeconds : '0' + remainingSeconds}`;\n  //   };\n\n  // const [answeredQuestions, setAnsweredQuestions] = useState([]);\n\n  // const handleButtonClick = (questionNumber) => {\n  //   onQuestionSelect(questionNumber);\n  //   setAnsweredQuestions([...answeredQuestions, questionNumber]);\n  // };\n\n  // const buttons = [\n  //   1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\n  //   22, 23, 24, 25, 26, 27, 28, 29, 30,\n  // ];\n  // const renderList = buttons.map((item, index) => {\n  //   let className = \"quesAns-btn\";\n  //   if (questionStatus && questionStatus[index] === \"answered\") {\n  //     className += \"answered\";\n  //   }\n  //   return (\n  //     <div>\n  //       <button className={className} onClick={() => handleButtonClick(item)}>\n  //         {item}\n  //       </button>\n  //     </div>\n  //   );\n  // });\n\n  const [opensubject_1, setOpensubject_1] = useState(true);\n  const [opensubject_2, setOpensubject_2] = useState(false);\n  const [opensubject_3, setOpensubject_3] = useState(false);\n  const openAlertSubject1 = () => {\n    setOpensubject_1(true);\n    setOpensubject_2(false);\n    setOpensubject_3(false);\n  };\n  const openAlertSubject2 = () => {\n    setOpensubject_2(true);\n    setOpensubject_1(false);\n    setOpensubject_3(false);\n  };\n  const openAlertSubject3 = () => {\n    setOpensubject_3(true);\n    setOpensubject_2(false);\n    setOpensubject_1(false);\n  };\n  const handleQuestionSelect = questionNumber => {\n    setCurrentQuestionIndex(questionNumber - 1);\n    setActiveQuestion(questionNumber - 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sub-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(PaperHeader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"subjects\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"subject-btn\",\n              onClick: openAlertSubject1,\n              children: \"Mathematics\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 498,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"subject-btn\",\n              onClick: openAlertSubject2,\n              children: \"Physics\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"subject-btn\",\n              onClick: openAlertSubject3,\n              children: \"Chemistry\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 500,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 497,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"second-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"single-select-question\",\n              children: \"Single Select Question\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 503,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"right-header\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"marks\",\n                children: [\"Marks: \", /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"plus-mark\",\n                  children: \"+1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 508,\n                  columnNumber: 26\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"minus-mark\",\n                  children: \"-1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 509,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 507,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 506,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 13\n          }, this), opensubject_1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Subject-Container\",\n            children: [\"maths\", /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"question-no\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"active-question-no\",\n                children: [\"Question No. \", addLeadingZero(currentQuestionIndex + 1)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 529,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"total-question\",\n                children: [\" \", \"of \", addLeadingZero(Qimages.length)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 532,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 527,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"question\",\n              children: Qimages && Qimages.length > 0 && Qimages[activeQuestion] ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: `data:image/png;base64,${Qimages[activeQuestion].image_data}`,\n                  alt: `QImage ${activeQuestion + 1}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 540,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                  className: \"options-container\",\n                  children: OPTimages.slice(activeQuestion * 4, activeQuestion * 4 + 4).map((optImage, optIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"radio\",\n                      name: \"index\",\n                      checked: selectedAnswers[activeQuestion] === String.fromCharCode(65 + optIndex),\n                      onChange: () => onAnswerSelected(String.fromCharCode(65 + optIndex))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 550,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"alpha-index\",\n                      children: /*#__PURE__*/_jsxDEV(\"img\", {\n                        src: `data:image/png;base64,${optImage.image_data}`,\n                        alt: `OPTImage ${optIndex + 2}-${optIndex + 5}`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 565,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 563,\n                      columnNumber: 27\n                    }, this)]\n                  }, optIndex, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 549,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 544,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 539,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"loading-gif\",\n                children: /*#__PURE__*/_jsxDEV(DotSpinner, {\n                  size: 90,\n                  speed: 0.9,\n                  color: \"black\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 576,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 575,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 537,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 525,\n            columnNumber: 2\n          }, this) : null, opensubject_2 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Subject-Container\",\n            children: [\"Physics\", /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"question-no\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"active-question-no\",\n                children: [\"Question No. \", addLeadingZero(currentQuestionIndex + 1)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 590,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"total-question\",\n                children: [\" \", \"of \", addLeadingZero(Qimages.length)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 593,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 588,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"question\",\n              children: Qimages && Qimages.length > 0 && Qimages[activeQuestion] ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: `data:image/png;base64,${Qimages[activeQuestion].image_data}`,\n                  alt: `QImage ${activeQuestion + 1}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 601,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                  className: \"options-container\",\n                  children: OPTimages.slice(activeQuestion * 4, activeQuestion * 4 + 4).map((optImage, optIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"radio\",\n                      name: \"index\",\n                      checked: selectedAnswers[activeQuestion] === String.fromCharCode(65 + optIndex),\n                      onChange: () => onAnswerSelected(String.fromCharCode(65 + optIndex))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 611,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"alpha-index\",\n                      children: /*#__PURE__*/_jsxDEV(\"img\", {\n                        src: `data:image/png;base64,${optImage.image_data}`,\n                        alt: `OPTImage ${optIndex + 2}-${optIndex + 5}`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 625,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 624,\n                      columnNumber: 27\n                    }, this)]\n                  }, optIndex, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 610,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 605,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 600,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"loading-gif\",\n                children: /*#__PURE__*/_jsxDEV(DotSpinner, {\n                  size: 90,\n                  speed: 0.9,\n                  color: \"black\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 636,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 635,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 598,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 2\n          }, this) : null, opensubject_3 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Subject-Container\",\n            children: [\"Chemistry\", /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"question-no\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"active-question-no\",\n                children: [\"Question No. \", addLeadingZero(currentQuestionIndex + 1)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 650,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"total-question\",\n                children: [\" \", \"of \", addLeadingZero(Qimages.length)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 653,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 648,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"question\",\n              children: Qimages && Qimages.length > 0 && Qimages[activeQuestion] ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: `data:image/png;base64,${Qimages[activeQuestion].image_data}`,\n                  alt: `QImage ${activeQuestion + 1}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 661,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                  className: \"options-container\",\n                  children: OPTimages.slice(activeQuestion * 4, activeQuestion * 4 + 4).map((optImage, optIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"radio\",\n                      name: \"index\",\n                      checked: selectedAnswers[activeQuestion] === String.fromCharCode(65 + optIndex),\n                      onChange: () => onAnswerSelected(String.fromCharCode(65 + optIndex))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 671,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"alpha-index\",\n                      children: /*#__PURE__*/_jsxDEV(\"img\", {\n                        src: `data:image/png;base64,${optImage.image_data}`,\n                        alt: `OPTImage ${optIndex + 2}-${optIndex + 5}`\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 685,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 684,\n                      columnNumber: 27\n                    }, this)]\n                  }, optIndex, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 670,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 665,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 660,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"loading-gif\",\n                children: /*#__PURE__*/_jsxDEV(DotSpinner, {\n                  size: 90,\n                  speed: 0.9,\n                  color: \"black\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 696,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 695,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 658,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 646,\n            columnNumber: 2\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex-right\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 705,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-right\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"clear-btn\",\n          onClick: markForReview,\n          children: \"Mark for Review & Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"clear-btn\",\n          onClick: clearResponse,\n          children: \"Clear Response\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 711,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"previous-btn\",\n          onClick: goToPreviousQuestion,\n          disabled: activeQuestion === 0,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa-solid fa-angles-left\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 719,\n            columnNumber: 13\n          }, this), \" Previous\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 714,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-btn\",\n          onClick: onClickNext\n          // disabled={!selectedAnswers[activeQuestion]}\n          ,\n          children: [activeQuestion === Qimages.length - 1 ? \"Submit\" : \"Save & Next\", /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa-solid fa-angles-right\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 727,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 721,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 709,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rightsidebar\",\n      children: /*#__PURE__*/_jsxDEV(RightSidebar, {\n        onQuestionSelect: handleQuestionSelect,\n        questionStatus: questionStatus,\n        setQuestionStatus: setQuestionStatus,\n        answeredCount: answeredCount,\n        notAnsweredCount: notAnsweredCount,\n        answeredmarkedForReviewCount: answeredmarkedForReviewCount,\n        markedForReviewCount: markedForReviewCount,\n        VisitedCount: VisitedCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 732,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 731,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 490,\n    columnNumber: 5\n  }, this);\n};\n_s(Paper, \"9XKfVZ8A2KOEGhv+TbJhsHus74Y=\");\n_c = Paper;\nexport default Paper;\nvar _c;\n$RefreshReg$(_c, \"Paper\");","map":{"version":3,"names":["React","useEffect","useState","useRef","PaperHeader","RightSidebar","DotSpinner","jsxDEV","_jsxDEV","Paper","_s","Qimages","setQImages","questionStatus","setQuestionStatus","Array","fill","answeredCount","setAnsweredCount","notAnsweredCount","setNotAnsweredCount","answeredmarkedForReviewCount","setAnsweredmarkedForReviewCount","markedForReviewCount","setMarkedForReviewCount","VisitedCount","setVisitedCount","updateCounters","answered","notAnswered","marked","markedForReview","Visited","forEach","status","OPTimages","setOPTImages","activeQuestion","setActiveQuestion","selectedAnswers","setSelectedAnswers","length","currentQuestionIndex","setCurrentQuestionIndex","showResult","setShowResult","result","setResult","score","correctAnswers","wrongAnswers","fetchQImages","fetchedQImages","i","response","fetch","data","json","push","error","console","fetchOPTImages","fetchedOPTImages","j","timers","setTimers","timer","setTimer","onAnswerSelected","OptionLetter","updatedSelectedAnswers","updatedQuestionStatus","clearResponse","goToPreviousQuestion","prevIndex","updatedTimers","onClickNext","markForReview","correctAnswer","correct_answer","selectedAnswer","prevResult","prevActiveQuestion","calculateResult","currentQuestion","questionImageSrc","image_data","addLeadingZero","number","opensubject_1","setOpensubject_1","opensubject_2","setOpensubject_2","opensubject_3","setOpensubject_3","openAlertSubject1","openAlertSubject2","openAlertSubject3","handleQuestionSelect","questionNumber","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","slice","map","optImage","optIndex","type","name","checked","String","fromCharCode","onChange","size","speed","color","disabled","onQuestionSelect","_c","$RefreshReg$"],"sources":["D:/web projects files/Current_egate_Quiz_project/src/Pages/Paper/Paper1.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// // import { useParams } from \"react-router-dom\";\r\n\r\n// const Paper1 = () => {\r\n//   // const { subi_id } = useParams();\r\n//   //     const [quizData, setQuizData] = useState([]);\r\n\r\n//   // console.log(quizData)\r\n//   // useEffect(() => {\r\n//   //   // Fetch data from the endpoint\r\n//   //   fetch(`http://localhost:10000/quiz_all/`+subi_id)\r\n\r\n//   //     .then((response) => response.json())\r\n//   //     .then((data) => setQuizData(data))\r\n//   //     .catch((error) => console.error('Error fetching data:', error));\r\n//   // }, [subi_id]);\r\n\r\n//   const [subjectNames, setSubjectNames] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     fetch(`http://localhost:4009/quiz_all/1`)\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         console.log(data); // Log the data received from the API\r\n//         setSubjectNames(data);\r\n//       })\r\n//       .catch((error) => console.error(\"Error fetching data:\", error));\r\n//   }, []);\r\n\r\n//   // const [answer, setAnswer] = useState([]);\r\n//   // useEffect(() => {\r\n//   //   // Fetch data from the endpoint\r\n//   //   fetch(`http://localhost:4009/answers/`)\r\n//   //     .then((response) => response.json())\r\n//   //     .then((data) => setAnswer(data))\r\n//   //     .catch((error) => console.error(\"Error fetching data:\", error));\r\n//   // }, []);\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>hii</h1>\r\n\r\n//       <div>\r\n//         {Array.isArray(subjectNames) && subjectNames.length > 0 ? (\r\n//           <div>\r\n//             {subjectNames.map((subjects) => (\r\n//               <li key={subjects.subi_id}>\r\n//                 <p>{subjects.subject_name}</p>\r\n//               </li>\r\n//             ))}\r\n//           </div>\r\n//         ) : (\r\n//           <p>No subjects available.</p>\r\n//         )}\r\n//         {/* <ul>\r\n//            {subjectNames.map((item) => (\r\n//           <li key={item.subi_id}>\r\n//             <p>{item.subject_name}</p>\r\n//           </li>\r\n//         ))}\r\n//         </ul> */}\r\n\r\n//         {/* <button>Mathematics</button>\r\n//                 <button>Physics</button>\r\n//                 <button>Chemistry</button> */}\r\n//       </div>\r\n\r\n//       {/* answers display */}\r\n//       {/* <div>\r\n//       {answer.map((ans) => (\r\n//           <li key={ans.subi_id}>\r\n//             <p>{ans.answer}</p>\r\n//           </li>\r\n//         ))}\r\n//       </div> */}\r\n\r\n//       {/* <h1>Quiz Questions</h1> */}\r\n//       <div>\r\n//         {/* {quizData.map((question) => (\r\n//           <div key={question.question_id}>\r\n//             <h3>Question {question.question_id}</h3>\r\n//             <img\r\n//               src={`data:image/png;base64,${question.question_img}`}\r\n//               alt={`Question ${question.question_id}`}\r\n//             />\r\n//             <ul>\r\n//               {question.options.map((option) => (\r\n//                 <li key={option.option_id}>\r\n//                   <img\r\n//                     src={`data:image/png;base64,${option.option_img}`}\r\n//                     alt={`Option ${option.option_id}`}\r\n//                   />\r\n//                 </li>\r\n//               ))}\r\n//             </ul>\r\n//           </div>\r\n//         ))} */}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Paper1;\r\n\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport \"./Paper.css\";\r\nimport PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\r\nimport RightSidebar from \"../../Components/RightSidebar/RightSidebar\";\r\n// import \"../../Components/RightSidebar/RightSidebar.css\";\r\nimport { DotSpinner } from \"@uiball/loaders\";\r\n\r\nconst Paper = () => {\r\n  const [Qimages, setQImages] = useState([]);\r\n  const [questionStatus, setQuestionStatus] = useState([\"notAnswered\", ...Array(29).fill(\"notVisited\")]);\r\n  const [answeredCount, setAnsweredCount] = useState(0);\r\n  const [notAnsweredCount, setNotAnsweredCount] = useState(0);\r\n  const [answeredmarkedForReviewCount, setAnsweredmarkedForReviewCount] = useState(0);\r\n  const [markedForReviewCount, setMarkedForReviewCount] = useState(0);\r\n  const [VisitedCount, setVisitedCount] = useState(0);\r\n  const updateCounters = () => {\r\n    let answered = 0;\r\n    let notAnswered = 0;\r\n    let marked = 0;\r\n    let markedForReview = 0;\r\n    let Visited = 0;\r\n\r\n    questionStatus.forEach((status) => {\r\n      if (status === \"answered\") {\r\n        answered++;\r\n      } else if (status === \"notAnswered\") {\r\n        notAnswered++;\r\n      } else if (status === \"marked\") {\r\n        marked++;\r\n      }\r\n      else if (status === \"Answered but marked for review\") {\r\n        markedForReview++;\r\n      } else if (status ===\"notVisited\") {\r\n        Visited++;\r\n      }\r\n    });\r\n\r\n    setAnsweredCount(answered);\r\n    setNotAnsweredCount(notAnswered);\r\n    setAnsweredmarkedForReviewCount(marked);\r\n    setMarkedForReviewCount(markedForReview);\r\n    setVisitedCount(Visited);\r\n  };\r\n\r\n  // const [Qimages, setQImages] = useState([]);\r\n  const [OPTimages, setOPTImages] = useState([]);\r\n  const [activeQuestion, setActiveQuestion] = useState(0);\r\n  const [selectedAnswers, setSelectedAnswers] = useState(\r\n    Array(Qimages.length).fill(\"\")\r\n  );\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [showResult, setShowResult] = useState(false);\r\n  const [result, setResult] = useState({\r\n    score: 0,\r\n    correctAnswers: 0,\r\n    wrongAnswers: 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\r\n    const fetchQImages = async () => {\r\n      let fetchedQImages = [];\r\n\r\n      for (let i = 1; i <= 1000; i += 6) {\r\n        // Assuming there are 100 sets of images\r\n        try {\r\n          const response = await fetch(`http://localhost:4009/api/getAllImages/${i}`);\r\n          const data = await response.json();\r\n          if (data.length > 0) {\r\n            fetchedQImages.push(data[0]); // Add only the first image from each set\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error fetching Qimages:\", error);\r\n        }\r\n      }\r\n\r\n      setQImages(fetchedQImages);\r\n    };\r\n\r\n    // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\r\n    const fetchOPTImages = async () => {\r\n      let fetchedOPTImages = [];\r\n\r\n      for (let i = 1; i <= 1000; i += 6) {\r\n        // Assuming there are 100 sets of images\r\n        try {\r\n          for (let j = i + 1; j <= i + 4; j++) {\r\n            const response = await fetch(`http://localhost:4009/api/getAllImages/${j}`);\r\n            const data = await response.json();\r\n            if (data.length > 0) {\r\n              fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error fetching OPTimages:\", error);\r\n        }\r\n      }\r\n\r\n      setOPTImages(fetchedOPTImages);\r\n    };\r\n\r\n    fetchQImages();\r\n    fetchOPTImages();\r\n\r\n\r\n    updateCounters();\r\n  }, [questionStatus]); // Empty dependency array to fetch data only once when the component mounts\r\n\r\n  const [timers, setTimers] = useState(new Array(Qimages.length).fill(0));\r\n  const [timer, setTimer] = useState(0);\r\n\r\n  const onAnswerSelected = (OptionLetter) => {\r\n    const updatedSelectedAnswers = [...selectedAnswers];\r\n    updatedSelectedAnswers[activeQuestion] = OptionLetter;\r\n    setSelectedAnswers(updatedSelectedAnswers);\r\n\r\n    const updatedQuestionStatus = [...questionStatus];\r\n    updatedQuestionStatus[activeQuestion] = \"answered\";\r\n    setQuestionStatus(updatedQuestionStatus);\r\n  };\r\n\r\n\r\n  const clearResponse = () => {\r\n    const updatedSelectedAnswers = [...selectedAnswers];\r\n    updatedSelectedAnswers[activeQuestion] = \"\";\r\n    setSelectedAnswers(updatedSelectedAnswers);\r\n  };\r\n\r\n  const goToPreviousQuestion = () => {\r\n    setCurrentQuestionIndex((prevIndex) => {\r\n      // Save the current timer value for the question\r\n\r\n      const updatedTimers = [...timers];\r\n\r\n      updatedTimers[prevIndex] = timer;\r\n\r\n      setTimers(updatedTimers);\r\n\r\n      // Move to the previous question\r\n\r\n      return prevIndex - 1;\r\n    });\r\n    if (activeQuestion > 0) {\r\n      setActiveQuestion(activeQuestion - 1);\r\n    }\r\n  };\r\n\r\n  const onClickNext = () => {\r\n\r\n    \r\n    setCurrentQuestionIndex((prevIndex) => {\r\n      // Save the current timer value for the question\r\n\r\n      const updatedTimers = [...timers];\r\n\r\n      updatedTimers[prevIndex] = timer;\r\n\r\n      setTimers(updatedTimers);\r\n      return prevIndex + 1 ;\r\n      \r\n    });\r\n\r\n    \r\n\r\n \r\n      // // Mark the question as not answered\r\n      \r\n      // const updatedQuestionStatus = [...questionStatus];\r\n      // if (!selectedAnswers[activeQuestion] === \"answered\") {\r\n      //   updatedQuestionStatus[activeQuestion] = \"notAnswered\";\r\n      // }\r\n      // else if(!markForReview()===true){\r\n      //   markForReview()\r\n      // }\r\n      // else if (selectedAnswers[activeQuestion]) {\r\n      //   updatedQuestionStatus[activeQuestion] = \"answered\";\r\n      // } else if(!markForReview()===false) {\r\n      //   markForReview()\r\n      // }\r\n\r\n      // setQuestionStatus(updatedQuestionStatus);\r\n\r\n\r\n      const updatedQuestionStatus = [...questionStatus];\r\n      // updatedQuestionStatus[activeQuestion] = \"notAnswered\";\r\n  \r\n      // Set status of the next question (if any) to \"notAnswered\"\r\n      if (activeQuestion < Qimages.length - 1) {\r\n        updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\r\n      }else if (!selectedAnswers[activeQuestion] === \"answered\") {\r\n          updatedQuestionStatus[activeQuestion] = \"notAnswered\";\r\n        }\r\n        else if(!markForReview()===true){\r\n          markForReview()\r\n        }\r\n        else if (selectedAnswers[activeQuestion]) {\r\n          updatedQuestionStatus[activeQuestion] = \"answered\";\r\n        } else if(!markForReview()===false) {\r\n          markForReview()\r\n        }\r\n  \r\n      setQuestionStatus(updatedQuestionStatus);\r\n\r\n\r\n\r\n\r\n\r\n    const correctAnswer = Qimages[activeQuestion].correct_answer; // Replace 'correct_answer' with the actual property name\r\n    const selectedAnswer = selectedAnswers[activeQuestion];\r\n\r\n    if (selectedAnswer === correctAnswer) {\r\n      setResult((prevResult) => ({\r\n        ...prevResult,\r\n        score: prevResult.score + 5,\r\n        correctAnswers: prevResult.correctAnswers + 1,\r\n      }));\r\n    } else {\r\n      setResult((prevResult) => ({\r\n        ...prevResult,\r\n        wrongAnswers: prevResult.wrongAnswers + 1,\r\n      }));\r\n    }\r\n\r\n    if (activeQuestion < Qimages.length - 1) {\r\n      setActiveQuestion((prevActiveQuestion) => prevActiveQuestion + 1);\r\n  } else {\r\n      setShowResult(true);\r\n      calculateResult();\r\n  }\r\n  };\r\n\r\n\r\n  \r\n  const markForReview = () => {\r\n    // Update questionStatus for the marked question\r\n    const updatedQuestionStatus = [...questionStatus];\r\n    if (selectedAnswers[activeQuestion]) {\r\n      updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\r\n      // if(selectedAnswers[activeQuestion] === \"Answered but marked for review\"){\r\n      //   updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\r\n      // }\r\n    } \r\n    else if (!selectedAnswers[activeQuestion])  {\r\n      updatedQuestionStatus[activeQuestion] = \"marked\";\r\n    }\r\n    \r\n    \r\n    setQuestionStatus(updatedQuestionStatus);\r\n};\r\n\r\n  // const formatTime = (seconds) => {\r\n  //   const hours = Math.floor(seconds / 3600);\r\n\r\n  //   const minutes = Math.floor((seconds % 3600) / 60);\r\n\r\n  //   const remainingSeconds = seconds % 60;\r\n\r\n  //   return `${hours > 9 ? hours : \"0\" + hours}:${\r\n  //     minutes > 9 ? minutes : \"0\" + minutes\r\n  //   }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   // Set the timer to the saved value for the current question\r\n\r\n  //   setTimer(timers[currentQuestionIndex] || 0);\r\n\r\n  //   let interval;\r\n\r\n  //   interval = setInterval(() => {\r\n  //     setTimer((prevTimer) => prevTimer + 1);\r\n  //   }, 1000);\r\n\r\n  //   // Clear the interval when the component unmounts or when the user moves to the next question\r\n\r\n  //   return () => {\r\n  //     clearInterval(interval);\r\n  //   };\r\n  // }, [currentQuestionIndex, timers]);\r\n\r\n  // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\r\n  const currentQuestion = Qimages[currentQuestionIndex];\r\n  const questionImageSrc = currentQuestion\r\n    ? `data:image/png;base64,${currentQuestion.image_data}`\r\n    : \"\";\r\n  const addLeadingZero = (number) => (number > 9 ? number : `0${number}`);\r\n\r\n  const calculateResult = () => {\r\n    // Implement additional result calculations here if needed\r\n    // Example: Accuracy, Average Score, Top Score, Live Rank, etc.\r\n  };\r\n\r\n\r\n\r\n\r\n  // Timer for whole page\r\n\r\n//   const totalTime = 180 * 60; // 180 minutes in seconds\r\n//   const [wtimer, setWTimer] = useState(totalTime);\r\n\r\n//   useEffect(() => {\r\n//     const interval = setInterval(() => {\r\n//       setWTimer((prevTimer) => prevTimer - 1);\r\n//     }, 1000);\r\n\r\n//     // Clear the interval and handle time-up logic when timer reaches 0\r\n//     if (timer <= 0) {\r\n//       clearInterval(interval);\r\n//       // Handle time-up logic here (e.g., navigate to a different component)\r\n//     }\r\n\r\n//     // Clean up the interval on component unmount or when navigating away\r\n//     return () => {\r\n//       clearInterval(interval);\r\n//     };\r\n//   }, [timer]);\r\n\r\n//   const WformatTime = (seconds) => {\r\n//     const hours = Math.floor(seconds / 3600);\r\n//     const minutes = Math.floor((seconds % 3600) / 60);\r\n//     const remainingSeconds = seconds % 60;\r\n//     return `${hours > 9 ? hours : '0' + hours}:${minutes > 9 ? minutes : '0' + minutes}:${remainingSeconds > 9 ? remainingSeconds : '0' + remainingSeconds}`;\r\n//   };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // const [answeredQuestions, setAnsweredQuestions] = useState([]);\r\n\r\n  // const handleButtonClick = (questionNumber) => {\r\n  //   onQuestionSelect(questionNumber);\r\n  //   setAnsweredQuestions([...answeredQuestions, questionNumber]);\r\n  // };\r\n\r\n  // const buttons = [\r\n  //   1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\r\n  //   22, 23, 24, 25, 26, 27, 28, 29, 30,\r\n  // ];\r\n  // const renderList = buttons.map((item, index) => {\r\n  //   let className = \"quesAns-btn\";\r\n  //   if (questionStatus && questionStatus[index] === \"answered\") {\r\n  //     className += \"answered\";\r\n  //   }\r\n  //   return (\r\n  //     <div>\r\n  //       <button className={className} onClick={() => handleButtonClick(item)}>\r\n  //         {item}\r\n  //       </button>\r\n  //     </div>\r\n  //   );\r\n  // });\r\n\r\n  const[opensubject_1,setOpensubject_1]=useState(true)\r\n  const [opensubject_2,setOpensubject_2]=useState(false)\r\n  const [opensubject_3,setOpensubject_3]=useState(false)\r\n\r\n  const openAlertSubject1=()=>{\r\n    setOpensubject_1(true)\r\n    setOpensubject_2(false)\r\n    setOpensubject_3(false)\r\n  }\r\n  const openAlertSubject2=()=>{\r\n    setOpensubject_2(true)\r\n    setOpensubject_1(false)\r\n    setOpensubject_3(false)\r\n\r\n  }\r\n  const openAlertSubject3=()=>{\r\n    setOpensubject_3(true)\r\n    setOpensubject_2(false)\r\n    setOpensubject_1(false)\r\n  }\r\n\r\n\r\n\r\n  const handleQuestionSelect = (questionNumber) => {\r\n    setCurrentQuestionIndex(questionNumber - 1);\r\n    setActiveQuestion(questionNumber - 1);\r\n};\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <div className=\"sub-main\">\r\n        <div>\r\n          <PaperHeader />\r\n        </div>\r\n        <div className=\"quiz-container\">\r\n          <div>\r\n            <div className=\"subjects\">\r\n              <button className=\"subject-btn\" onClick={openAlertSubject1}>Mathematics</button>\r\n              <button className=\"subject-btn\" onClick={openAlertSubject2}>Physics</button>\r\n              <button className=\"subject-btn\" onClick={openAlertSubject3}>Chemistry</button>\r\n            </div>\r\n            <div className=\"second-header\">\r\n              <div className=\"single-select-question\">\r\n                Single Select Question\r\n              </div>\r\n              <div className=\"right-header\">\r\n                <div className=\"marks\">\r\n                  Marks: <div className=\"plus-mark\">+1</div>\r\n                  <div className=\"minus-mark\">-1</div>\r\n                </div>\r\n                {/* <div>Timer: {formatTime(timer)}</div> */}\r\n              </div>\r\n            </div>\r\n            {/* <div className=\"question-no\">\r\n              <span className=\"active-question-no\">\r\n                Question No. {addLeadingZero(currentQuestionIndex + 1)}\r\n              </span>\r\n              <span className=\"total-question\">\r\n                {\" \"}\r\n                of {addLeadingZero(Qimages.length)}\r\n              </span>\r\n            </div> */}\r\n\r\n{opensubject_1 ?\r\n <div className=\"Subject-Container\">\r\n  maths\r\n            <div className=\"question-no\">\r\n           \r\n              <span className=\"active-question-no\">\r\n                Question No. {addLeadingZero(currentQuestionIndex + 1)}\r\n              </span>\r\n              <span className=\"total-question\">\r\n                {\" \"}\r\n                of {addLeadingZero(Qimages.length)}\r\n              </span>\r\n            </div>\r\n              <h2 className=\"question\">\r\n                {Qimages && Qimages.length > 0 && Qimages[activeQuestion] ? (\r\n                  <div>\r\n                    <img\r\n                      src={`data:image/png;base64,${Qimages[activeQuestion].image_data}`}\r\n                      alt={`QImage ${activeQuestion + 1}`}\r\n                    />\r\n                    <ul className=\"options-container\">\r\n                      {OPTimages.slice(\r\n                        activeQuestion * 4,\r\n                        activeQuestion * 4 + 4\r\n                      ).map((optImage, optIndex) => (\r\n                        <li key={optIndex}>\r\n                          <input\r\n                            type=\"radio\"\r\n                            name=\"index\"\r\n                            checked={\r\n                              selectedAnswers[activeQuestion] ===\r\n                              String.fromCharCode(65 + optIndex)\r\n                            }\r\n                            onChange={() =>\r\n                              onAnswerSelected(\r\n                                String.fromCharCode(65 + optIndex)\r\n                              )\r\n                            }\r\n                          />\r\n                          <label className=\"alpha-index\">\r\n                            \r\n                            <img\r\n                              src={`data:image/png;base64,${optImage.image_data}`}\r\n                              alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\r\n                            />\r\n                          </label>\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"loading-gif\">\r\n                    <DotSpinner size={90} speed={0.9} color=\"black\" />\r\n                  </div>\r\n                )}\r\n              </h2>\r\n            </div>:\r\n            null\r\n}\r\n\r\n\r\n{opensubject_2 ?\r\n <div className=\"Subject-Container\">\r\n  Physics\r\n            <div className=\"question-no\">\r\n           \r\n              <span className=\"active-question-no\">\r\n                Question No. {addLeadingZero(currentQuestionIndex + 1)}\r\n              </span>\r\n              <span className=\"total-question\">\r\n                {\" \"}\r\n                of {addLeadingZero(Qimages.length)}\r\n              </span>\r\n            </div>\r\n              <h2 className=\"question\">\r\n                {Qimages && Qimages.length > 0 && Qimages[activeQuestion] ? (\r\n                  <div>\r\n                    <img\r\n                      src={`data:image/png;base64,${Qimages[activeQuestion].image_data}`}\r\n                      alt={`QImage ${activeQuestion + 1}`}\r\n                    />\r\n                    <ul className=\"options-container\">\r\n                      {OPTimages.slice(\r\n                        activeQuestion * 4,\r\n                        activeQuestion * 4 + 4\r\n                      ).map((optImage, optIndex) => (\r\n                        <li key={optIndex}>\r\n                          <input\r\n                            type=\"radio\"\r\n                            name=\"index\"\r\n                            checked={\r\n                              selectedAnswers[activeQuestion] ===\r\n                              String.fromCharCode(65 + optIndex)\r\n                            }\r\n                            onChange={() =>\r\n                              onAnswerSelected(\r\n                                String.fromCharCode(65 + optIndex)\r\n                              )\r\n                            }\r\n                          />\r\n                          <label className=\"alpha-index\">\r\n                            <img\r\n                              src={`data:image/png;base64,${optImage.image_data}`}\r\n                              alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\r\n                            />\r\n                          </label>\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"loading-gif\">\r\n                    <DotSpinner size={90} speed={0.9} color=\"black\" />\r\n                  </div>\r\n                )}\r\n              </h2>\r\n            </div>:\r\n            null\r\n}\r\n\r\n\r\n{opensubject_3 ?\r\n <div className=\"Subject-Container\">\r\nChemistry\r\n            <div className=\"question-no\">\r\n           \r\n              <span className=\"active-question-no\">\r\n                Question No. {addLeadingZero(currentQuestionIndex + 1)}\r\n              </span>\r\n              <span className=\"total-question\">\r\n                {\" \"}\r\n                of {addLeadingZero(Qimages.length)}\r\n              </span>\r\n            </div>\r\n              <h2 className=\"question\">\r\n                {Qimages && Qimages.length > 0 && Qimages[activeQuestion] ? (\r\n                  <div>\r\n                    <img\r\n                      src={`data:image/png;base64,${Qimages[activeQuestion].image_data}`}\r\n                      alt={`QImage ${activeQuestion + 1}`}\r\n                    />\r\n                    <ul className=\"options-container\">\r\n                      {OPTimages.slice(\r\n                        activeQuestion * 4,\r\n                        activeQuestion * 4 + 4\r\n                      ).map((optImage, optIndex) => (\r\n                        <li key={optIndex}>\r\n                          <input\r\n                            type=\"radio\"\r\n                            name=\"index\"\r\n                            checked={\r\n                              selectedAnswers[activeQuestion] ===\r\n                              String.fromCharCode(65 + optIndex)\r\n                            }\r\n                            onChange={() =>\r\n                              onAnswerSelected(\r\n                                String.fromCharCode(65 + optIndex)\r\n                              )\r\n                            }\r\n                          />\r\n                          <label className=\"alpha-index\">\r\n                            <img\r\n                              src={`data:image/png;base64,${optImage.image_data}`}\r\n                              alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\r\n                            />\r\n                          </label>\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"loading-gif\">\r\n                    <DotSpinner size={90} speed={0.9} color=\"black\" />\r\n                  </div>\r\n                )}\r\n              </h2>\r\n            </div>:\r\n            null\r\n}\r\n\r\n\r\n            <div className=\"flex-right\"></div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flex-right\">\r\n          <button className=\"clear-btn\" onClick={markForReview}>Mark for Review & Next</button>\r\n          <button className=\"clear-btn\" onClick={clearResponse}>\r\n            Clear Response\r\n          </button>\r\n          <button\r\n            className=\"previous-btn\"\r\n            onClick={goToPreviousQuestion}\r\n            disabled={activeQuestion === 0}\r\n          >\r\n            <i className=\"fa-solid fa-angles-left\"></i> Previous\r\n          </button>\r\n          <button\r\n            className=\"save-btn\"\r\n            onClick={onClickNext}\r\n            // disabled={!selectedAnswers[activeQuestion]}\r\n          >\r\n            {activeQuestion === Qimages.length - 1 ? \"Submit\" : \"Save & Next\"}\r\n            <i className=\"fa-solid fa-angles-right\"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"rightsidebar\">\r\n        <RightSidebar \r\n        onQuestionSelect={handleQuestionSelect} \r\n        questionStatus={questionStatus} \r\n        setQuestionStatus={setQuestionStatus}\r\n        answeredCount={answeredCount}\r\n        notAnsweredCount={notAnsweredCount}\r\n        answeredmarkedForReviewCount={answeredmarkedForReviewCount}\r\n        markedForReviewCount={markedForReviewCount}\r\n        VisitedCount={VisitedCount}\r\n          />\r\n       \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Paper;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}