{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/egate_Quiz_project/src/Pages/MainQuizFunctionality/QuestionsFunctionality.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { Link, useParams, useNavigate } from \"react-router-dom\";\n// import PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\n// import \"../Paper/Paper.css\";\n// import ButtonsFunctionality from \"./ButtonsFunctionality\";\n// import TestResultsPage from \"./TestResultsPage\";\n\n// const QuestionsFunctionality = ({ answeredQuestions }) => {\n\n//     const [selectedSubject, setSelectedSubject] = useState(null);\n\n//     const handleSubjectSelect = (subject) => {\n//         // Set the selected subject when a subject button is clicked\n//         setSelectedSubject(subject);\n//     };\n\n//     const [questionData, setQuestionData] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//     const [Subjects, setSubjects] = useState([]);\n//     const { testCreationTableId, subjectId } = useParams();\n//     const [sections, setSections] = useState([]);\n\n//     const [questionStatus, setQuestionStatus] = useState(\n//         Array(questionData.length).fill(\"notAnswered\")\n//     );\n\n//     const [answeredCount, setAnsweredCount] = useState(0);\n//     const [notAnsweredCount, setNotAnsweredCount] = useState(0);\n//     const [answeredmarkedForReviewCount, setAnsweredmarkedForReviewCount] =\n//         useState(0);\n//     const [markedForReviewCount, setMarkedForReviewCount] = useState(0);\n//     const [VisitedCount, setVisitedCount] = useState(0);\n\n//     const updateCounters = () => {\n//         let answered = 0;\n//         let notAnswered = 0;\n//         let marked = 0;\n//         let markedForReview = 0;\n//         let Visited = 0;\n\n//         questionStatus.forEach((status) => {\n//             if (status === \"answered\") {\n//                 answered++;\n//             } else if (status === \"notAnswered\") {\n//                 notAnswered++;\n//             } else if (status === \"marked\") {\n//                 marked++;\n//             } else if (status === \"Answered but marked for review\") {\n//                 markedForReview++;\n//             } else if (status === \"notVisited\") {\n//                 Visited++;\n//             }\n//         });\n\n//         setAnsweredCount(answered);\n//         setNotAnsweredCount(notAnswered);\n//         setAnsweredmarkedForReviewCount(marked);\n//         setMarkedForReviewCount(markedForReview);\n//         setVisitedCount(Visited);\n//     };\n\n//     // ---------------------------------Timer code Start--------------------------------\n//     const [timer, setTimer] = useState(0);\n//     const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\n\n//     const formatTime = (seconds) => {\n//         const hours = Math.floor(seconds / 3600);\n\n//         const minutes = Math.floor((seconds % 3600) / 60);\n\n//         const remainingSeconds = seconds % 60;\n\n//         return `${hours > 9 ? hours : \"0\" + hours}:${minutes > 9 ? minutes : \"0\" + minutes\n//             }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n//     };\n\n//     useEffect(() => {\n//         // Set the timer to the saved value for the current question\n//         setTimer(timers[currentQuestionIndex] || 0);\n//         let interval;\n//         interval = setInterval(() => {\n//             setTimer((prevTimer) => prevTimer + 1);\n//         }, 1000);\n//         // Clear the interval when the component unmounts or when the user moves to the next question\n//         return () => {\n//             clearInterval(interval);\n//         };\n//     }, [currentQuestionIndex, timers]);\n//     // ------------------------------------Timer code end--------------------------------\n\n//     useEffect(() => {\n//         const fetchSubjects = async () => {\n//             try {\n//                 const response = await fetch(\n//                     `http://localhost:4009/subjects/${testCreationTableId}`\n//                 );\n//                 const data = await response.json();\n//                 setSubjects(data);\n//             } catch (error) {\n//                 console.error(error);\n//             }\n//         };\n\n//         const fetchSections = async () => {\n//             try {\n//                 const response = await fetch(\n//                     `http://localhost:4009/fetchSections/${testCreationTableId}`\n//                 );\n//                 const data = await response.json();\n//                 setSections(data);\n//             } catch (error) {\n//                 console.error(error);\n//             }\n//         };\n\n//         const fetchQuestionData = async () => {\n//             try {\n//                 const response = await fetch(\n//                     `http://localhost:4009/getPaperData/${testCreationTableId}`\n//                 );\n//                 const data = await response.json();\n\n//                 // Check if the data has both 'questions' and 'options' properties\n//                 if (data && data.questions && data.options) {\n//                     // Assuming both questions and options are arrays, you might want to merge them\n//                     const mergedData = data.questions.map((question, index) => ({\n//                         ...question,\n//                         options: data.options.slice(index * 4, (index + 1) * 4), // Assuming 4 options per question\n//                     }));\n\n//                     setQuestionData(mergedData);\n//                     setQuestionStatus([\n//                         \"notAnswered\",\n//                         ...Array(mergedData.length - 1).fill(\"notVisited\"),\n//                     ]);\n//                 } else {\n//                     console.error(\"API response does not have expected structure:\", data);\n//                 }\n//             } catch (error) {\n//                 console.error(error);\n//             }\n//         };\n\n//         fetchSubjects();\n//         fetchSections();\n//         fetchQuestionData();\n//     }, [testCreationTableId]);\n\n//     useEffect(() => {\n//         // Call the updateCounters function initially when the component mounts\n//         updateCounters();\n//     }, [questionStatus]);\n\n//     const [selectedAnswers, setSelectedAnswers] = useState(\n//         Array(questionData.length).fill(\"\")\n//     );\n\n//     const onAnswerSelected = (OptionLetter) => {\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//         setSelectedAnswers(updatedSelectedAnswers);\n\n//     };\n\n//     const [activeQuestion, setActiveQuestion] = useState(0);\n\n//     const markForReview = () => {\n//         // Update questionStatus for the marked question\n//         const updatedQuestionStatus = [...questionStatus];\n//         if (selectedAnswers[activeQuestion]) {\n//             updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n//             if (selectedAnswers[activeQuestion] === \"Answered but marked for review\") {\n//                 updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n//             }\n//         } else if (!selectedAnswers[activeQuestion]) {\n//             updatedQuestionStatus[activeQuestion] = \"marked\";\n//         }\n\n//         setQuestionStatus(updatedQuestionStatus);\n//     };\n\n//     const clearResponse = () => {\n//         // Clear the selected answer\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[currentQuestionIndex] = \"\";\n//         setSelectedAnswers(updatedSelectedAnswers);\n\n//         // Update the question status to \"notAnswered\"\n//         setQuestionStatus((prevQuestionStatus) => {\n//             const currentStatus = prevQuestionStatus[currentQuestionIndex];\n//             if (currentStatus === \"answered\") {\n//                 return [\n//                     ...prevQuestionStatus.slice(0, currentQuestionIndex),\n//                     \"notAnswered\",\n//                     ...prevQuestionStatus.slice(currentQuestionIndex + 1),\n//                 ];\n//             }\n//             return prevQuestionStatus;\n//         });\n//     };\n\n//     const goToPreviousQuestion = () => {\n//         setCurrentQuestionIndex((prevIndex) => {\n//             // Save the current timer value for the question\n//             const updatedTimers = [...timers];\n//             updatedTimers[prevIndex] = timer;\n//             setTimers(updatedTimers);\n//             // Move to the previous question\n//             return prevIndex - 1;\n//         });\n\n//         setActiveQuestion((prevActiveQuestion) => prevActiveQuestion - 1);\n//     };\n\n//     const handleNextClick = () => {\n\n//         setCurrentQuestionIndex((prevIndex) => {\n//             // Save the current timer value for the question\n\n//             const updatedTimers = [...timers];\n\n//             updatedTimers[prevIndex] = timer;\n\n//             setTimers(updatedTimers);\n//             return prevIndex + 1;\n//         });\n\n//         const updatedQuestionStatus = [...questionStatus];\n\n//         if (activeQuestion < questionData.length - 1) {\n//             // Check the status of the next question\n//             const nextQuestionStatus = questionStatus[activeQuestion + 1];\n\n//             if (nextQuestionStatus === \"answered\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"answered\";\n//             } else if (nextQuestionStatus === \"notAnswered\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n//             } else if (!markForReview() === false) {\n//                 markForReview();\n//             }\n\n//             setActiveQuestion((prevActiveQuestion) => prevActiveQuestion + 1);\n//         }\n\n//         updateCounters();\n\n//         // Set status of the next question (if any) to \"notAnswered\"\n\n//         if (activeQuestion < questionData.length - 1) {\n//             const updatedQuestionStatus = [...questionStatus];\n//             const nextQuestionStatus = questionStatus[activeQuestion + 1];\n\n//             if (nextQuestionStatus === \"notVisited\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n//             }\n\n//             if (selectedAnswers[activeQuestion] === \"answered\") {\n//                 updatedQuestionStatus[activeQuestion] = \"answered\";\n//             } else if (markForReview() === true) {\n//                 updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n//             } else if (markForReview() === false) {\n//                 updatedQuestionStatus[activeQuestion] = \"marked\";\n//             }\n\n//             if (nextQuestionStatus === \"notAnswered\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n//             }\n\n//             setQuestionStatus(updatedQuestionStatus);\n//         }\n\n//             // Update the question status to \"answered\" only if an answer has been selected\n//     if (selectedAnswers[activeQuestion]) {\n//         setQuestionStatus((prevQuestionStatus) => {\n//             const currentStatus = prevQuestionStatus[activeQuestion];\n//             if (currentStatus === \"notAnswered\") {\n//                 return [\n//                     ...prevQuestionStatus.slice(0, activeQuestion),\n//                     \"answered\",\n//                     ...prevQuestionStatus.slice(activeQuestion + 1),\n//                 ];\n//             }\n//             return prevQuestionStatus;\n//         });\n//     }\n\n//     };\n\n//     const [accuracy, setAccuracy] = useState(0);\n//     const [averageScore, setAverageScore] = useState(0);\n//     const [topScore, setTopScore] = useState(0);\n//     const [liveRank, setLiveRank] = useState(0);\n\n//     const calculateQuestionCounts = () => {\n//         let answered = 0;\n//         let notAnswered = 0;\n//         let markedForReview = 0;\n//         let answeredmarkedForReviewCount = 0;\n//         let VisitedCount = 0;\n\n//         questionStatus.forEach((status, index) => {\n//             if (status === \"answered\") {\n//                 answered++;\n//             } else if (status === \"notAnswered\") {\n//                 notAnswered++;\n//             } else if (status === \"marked\") {\n//                 markedForReview++;\n//             } else if (status === \"Answered but marked for review\") {\n//                 answeredmarkedForReviewCount++;\n//             } else if (status === \"notVisited\") {\n//                 VisitedCount++;\n//             }\n//         });\n\n//         return {\n//             answered,\n//             notAnswered,\n//             markedForReview,\n//             answeredmarkedForReviewCount,\n//             VisitedCount,\n//         };\n//     };\n\n//     const [showResult, setShowResult] = useState(false);\n//     const navigate = useNavigate();\n\n//     const handleSubmit = () => {\n//         window.alert(\"Your Test has been Submitted!! Click Ok to See Result.\");\n\n//         // Call the function to get question counts\n//         const {\n//             answered,\n//             notAnswered,\n//             markedForReview,\n//             answeredmarkedForReviewCount,\n//             VisitedCount,\n//         } = calculateQuestionCounts();\n\n//         // Add any additional logic you need for submitting the exam\n//         // For example, you might want to send this data to the server.\n//          // Redirect to the result page\n//          navigate(\"/result\", {\n//             state: {\n//               answeredCount: answered,\n//               notAnsweredCount: notAnswered,\n//               markedForReviewCount: markedForReview,\n//               answeredmarkedForReviewCount: answeredmarkedForReviewCount,\n//               VisitedCount: VisitedCount,\n//             },\n//         });\n//     };\n\n//     const handleQuestionSelect = (questionNumber) => {\n//         setCurrentQuestionIndex(questionNumber - 1);\n//         setActiveQuestion(questionNumber - 1);\n//     };\n\n//     return (\n\n//         <div className=\"Main-Page\">\n//            {showResult ? (\n//         // Render the ResultPage component here\n//         <TestResultsPage\n//           answeredCount={answeredCount}\n//           notAnsweredCount={notAnsweredCount}\n//           markedForReviewCount={markedForReviewCount}\n//           answeredmarkedForReviewCount={answeredmarkedForReviewCount}\n//           VisitedCount={VisitedCount}\n//         />\n//       ) : (\n//         <div>\n//         <div>\n//             <PaperHeader />\n//         </div>\n//         <div className=\"QUESTIONS_CONTAINER\">\n//             <div className=\"QUESTIONS_CONTAINER_subpart\">\n//             <div className=\"subjects\">\n//             {Subjects.map((subjectTitle, index) => (\n//                 <li key={index}>\n//                     <Link ><button className=\"subject-btn\" onClick={() => handleSubjectSelect(subjectTitle.subjectName)}>{subjectTitle.subjectName}</button></Link>\n//                     {/* <button className=\"subject-btn\">{subjectTitle.subjectName}</button> */}\n//                 </li>\n//             ))}\n\n//         </div>\n\n//         <div className=\"second-header\">\n//             <div className=\"single-select-question\">\n//                 {sections.map((sectionTitle, index) => (\n//                     <li key={index}>\n//                         <p>{sectionTitle.sectionName}</p>\n\n//                     </li>\n//                 ))}\n//                 {/* Single Select Question */}\n//             </div>\n//             <div className=\"right-header\">\n//                 <div className=\"marks\">\n//                     Marks: <div className=\"plus-mark\">+1</div>\n//                     <div className=\"minus-mark\">-1</div>\n//                 </div>\n//                 <div>Timer: {formatTime(timer)}</div>\n//             </div>\n//         </div>\n\n//         <div className=\"Question_No_heading\">\n//             <p>  Question No. {currentQuestionIndex + 1}  of {questionData.length}</p>\n//         </div>\n\n//         <div  className=\"_quizexampart \">\n// {questionData.length > 0 && (\n//             <div className=\"quizexampart_q_O_container\">\n//                 <h4>\n//                     {/* {currentQuestionIndex + 1}. */}\n\n//                     <img\n//                         src={`data:image/png;base64,${questionData[currentQuestionIndex].question_img}`}\n//                         alt={`Question ${currentQuestionIndex + 1}`}\n//                     />\n//                 </h4>\n\n//                 {questionData[currentQuestionIndex].options.map(\n//                     (OptionImage, optionIndex) => (\n//                         <li key={optionIndex}>\n//                             <input\n//                                 type=\"radio\"\n//                                 name={`question-${currentQuestionIndex}-option`}\n//                                 value={optionIndex}\n//                                 checked={\n//                                     selectedAnswers[currentQuestionIndex] === optionIndex\n//                                 }\n//                                 onChange={() => onAnswerSelected(optionIndex)}\n//                             />\n//                             {OptionImage && OptionImage.option_img && (\n//                                 <img\n//                                     key={OptionImage.question_id}\n//                                     src={`data:image/png;base64,${OptionImage.option_img}`}\n//                                     alt={`Option ${optionIndex + 1}`}\n//                                 />\n//                             )}\n//                         </li>\n//                     )\n//                 )}\n//                 <div className=\"flex-right\">\n//                     <button className=\"clear-btn\" onClick={markForReview}>\n//                         Mark for Review & Next\n//                     </button>\n//                     <button className=\"clear-btn\" onClick={clearResponse}>\n//                         Clear Response\n//                     </button>\n//                     <button\n//                         className=\"previous-btn\"\n//                         onClick={goToPreviousQuestion}\n//                         disabled={currentQuestionIndex === 0}\n//                     >\n//                         <i className=\"fa-solid fa-angles-left\"></i> Previous\n//                     </button>\n//                     <button className=\"save-btn\" onClick={handleNextClick}>\n//                         Next <i className=\"fa-solid fa-angles-right\"></i>\n//                     </button>\n//                 </div>\n//             </div>\n//         )}\n// </div>\n//             </div>\n\n// <div className=\"rightsidebar\">\n//                 <ButtonsFunctionality\n//                     onQuestionSelect={handleQuestionSelect}\n//                     questionStatus={questionStatus}\n//                     setQuestionStatus={setQuestionStatus}\n//                     answeredCount={answeredCount}\n//                     notAnsweredCount={notAnsweredCount}\n//                     answeredmarkedForReviewCount={answeredmarkedForReviewCount}\n//                     markedForReviewCount={markedForReviewCount}\n//                     VisitedCount={VisitedCount}\n//                     selectedSubject={selectedSubject}\n//                     questionData={questionData}\n//                 />\n//                 <button onClick={handleSubmit} id=\"resume_btn\">\n//                     Submit\n//                 </button>\n//             </div>\n\n//         </div>\n\n//     </div>\n//       )}\n\n//         </div>\n//     )\n// }\n\n// export default QuestionsFunctionality\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, Link, useNavigate } from \"react-router-dom\";\nimport ButtonsFunctionality from \"./ButtonsFunctionality\";\nimport TestResultsPage from \"./TestResultsPage\";\nimport \"../Paper/Paper.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionsFunctionality = ({\n  answeredQuestions\n}) => {\n  _s();\n  const [selectedSubject, setSelectedSubject] = useState(null);\n  const [data, setData] = useState(null);\n  const [questionStatus, setQuestionStatus] = useState(Array.isArray(data) ? Array(data.questions.length).fill(\"notAnswered\") : []);\n  const [answeredCount, setAnsweredCount] = useState(0);\n  const [notAnsweredCount, setNotAnsweredCount] = useState(0);\n  const [answeredmarkedForReviewCount, setAnsweredmarkedForReviewCount] = useState(0);\n  const [markedForReviewCount, setMarkedForReviewCount] = useState(0);\n  const [VisitedCount, setVisitedCount] = useState(0);\n  const navigate = useNavigate();\n  const [activeQuestion, setActiveQuestion] = useState(0);\n  const calculateQuestionCounts = () => {\n    let answered = 0;\n    let notAnswered = 0;\n    let markedForReview = 0;\n    let answeredmarkedForReviewCount = 0;\n    let VisitedCount = 0;\n    questionStatus.forEach((status, index) => {\n      if (status === \"answered\") {\n        answered++;\n      } else if (status === \"notAnswered\") {\n        notAnswered++;\n      } else if (status === \"marked\") {\n        markedForReview++;\n      } else if (status === \"Answered but marked for review\") {\n        answeredmarkedForReviewCount++;\n      } else if (status === \"notVisited\") {\n        VisitedCount++;\n      }\n    });\n    return {\n      answered,\n      notAnswered,\n      markedForReview,\n      answeredmarkedForReviewCount,\n      VisitedCount\n    };\n  };\n  const handleSubmit = () => {\n    window.alert(\"Your Test has been Submitted!! Click Ok to See Result.\");\n\n    // Call the function to get question counts\n    const {\n      answered,\n      notAnswered,\n      markedForReview,\n      answeredmarkedForReviewCount,\n      VisitedCount\n    } = calculateQuestionCounts();\n\n    // Add any additional logic you need for submitting the exam\n    // For example, you might want to send this data to the server.\n    // Redirect to the result page\n    navigate(\"/result\", {\n      state: {\n        answeredCount: answered,\n        notAnsweredCount: notAnswered,\n        markedForReviewCount: markedForReview,\n        answeredmarkedForReviewCount: answeredmarkedForReviewCount,\n        VisitedCount: VisitedCount\n      }\n    });\n  };\n  const handleQuestionSelect = questionNumber => {\n    setCurrentQuestionIndex(questionNumber - 1);\n    setActiveQuestion(questionNumber - 1);\n  };\n  const {\n    subjectId,\n    testCreationTableId\n  } = useParams();\n  const [Subjects, setSubjects] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n  // Function to set data in local storage\n  const setLocalStorageData = (key, data) => {\n    localStorage.setItem(key, JSON.stringify(data));\n  };\n\n  // Function to get data from local storage\n  const getLocalStorageData = key => {\n    const data = localStorage.getItem(key);\n    return data ? JSON.parse(data) : null;\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch all subjects\n        const responseSubjects = await fetch(`http://localhost:4009/subjects/${testCreationTableId}`);\n        const subjectsData = await responseSubjects.json();\n        setSubjects(subjectsData);\n        console.log(subjectsData);\n\n        // Find the least subjectId\n        const leastSubjectId = subjectsData.length > 0 ? Math.min(...subjectsData.map(subject => subject.subjectId)) : null;\n\n        // If subjectId is not provided, set it to the least subjectId\n        const defaultSubjectId = subjectId || leastSubjectId;\n\n        // Fetch data for the default subject\n        const response = await fetch(`http://localhost:4009/getPaperData/${testCreationTableId}/${defaultSubjectId}`);\n        const result = await response.json();\n        setData(result);\n\n        // Load selected answers from local storage\n        const storedAnswers = getLocalStorageData('selectedAnswersMap') || {};\n        if (storedAnswers && storedAnswers[data.subjectId]) {\n          setSelectedAnswersMap(storedAnswers);\n          setSelectedAnswers(storedAnswers[data.subjectId]);\n        }\n\n        // Construct the link with the least subjectId\n        const linkUrl = `/subjects/${testCreationTableId}/${subjectId || leastSubjectId}`;\n        // Use linkUrl as needed in your component\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  }, [testCreationTableId, subjectId]);\n  const [sections, setSections] = useState([]);\n  useEffect(() => {\n    const fetchSections = async () => {\n      try {\n        const response = await fetch(`http://localhost:4009/fetchSections/${testCreationTableId}`);\n        const data = await response.json();\n        setSections(data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchSections();\n  }, [testCreationTableId]);\n  const [selectedAnswersMap, setSelectedAnswersMap] = useState({});\n  // const [markedQuestions, setMarkedQuestions] = useState([]);\n  // const handleSubjectsClick = async (clickedSubjectId, selectedSubjectId) => {\n  //     try {\n  //         const response = await fetch(\n  //             `http://localhost:4009/getPaperData/${testCreationTableId}/${clickedSubjectId}`\n  //         );\n  //         const subjectsData = await response.json();\n\n  //         // Load selected answers from local storage\n  //         const storedAnswers = getLocalStorageData('selectedAnswersMap') || {};\n  //         if (storedAnswers && storedAnswers[clickedSubjectId]) {\n  //             setSelectedAnswersMap(storedAnswers);\n  //             setSelectedAnswers(storedAnswers[clickedSubjectId]);\n  //         }\n\n  //         if (subjectsData && subjectsData.questions) {\n  //             // Preserve selected answers for the current subject\n  //             const selectedAnswersForSubject = selectedAnswersMap[clickedSubjectId] || [];\n  //             setSelectedAnswers(selectedAnswersForSubject);\n\n  //             // Set data and current question index\n  //             setData(subjectsData);\n\n  //             // Check if the question was answered and mark them\n  //             const markedQuestions = subjectsData.questions.map((question, index) => {\n  //                 const isAnswered = selectedAnswersForSubject[index] !== undefined;\n  //                 return { ...question, isAnswered };\n  //             });\n\n  //             setMarkedQuestions(markedQuestions);\n\n  //             setCurrentQuestionIndex(selectedAnswersForSubject.length > 0 ? selectedAnswersForSubject.length - 1 : 0);\n  //         } else {\n  //             console.error(\"Invalid data format:\", subjectsData);\n  //         }\n  //     } catch (error) {\n  //         console.error(error);\n  //     }\n\n  //     setSelectedSubject(selectedSubjectId);\n  // };\n\n  const handleNextClick = () => {\n    // Update the current question index to move to the next question\n    setCurrentQuestionIndex(prevIndex => prevIndex < data.questions.length - 1 ? prevIndex + 1 : prevIndex);\n  };\n  const handlePreviousClick = () => {\n    // Update the current question index to move to the previous question\n    setCurrentQuestionIndex(prevIndex => prevIndex > 0 ? prevIndex - 1 : prevIndex);\n  };\n\n  // ---------------------------------Timer code Start--------------------------------\n  const [timer, setTimer] = useState(0);\n  // const [timers, setTimers] = useState(new Array(data.length).fill(0));\n  const [timers, setTimers] = useState(Array(data));\n  const formatTime = seconds => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor(seconds % 3600 / 60);\n    const remainingSeconds = seconds % 60;\n    return `${hours > 9 ? hours : \"0\" + hours}:${minutes > 9 ? minutes : \"0\" + minutes}:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n  };\n\n  //working code\n  useEffect(() => {\n    // Set the timer to the saved value for the current question\n    setTimer(timers[currentQuestionIndex] || 0);\n    let interval;\n    interval = setInterval(() => {\n      setTimer(prevTimer => prevTimer + 1);\n    }, 1000);\n    // Clear the interval when the component unmounts or when the user moves to the next question\n    return () => {\n      clearInterval(interval);\n    };\n  }, [currentQuestionIndex, timers]);\n  // ------------------------------------Timer code end--------------------------------\n  const initialSelectedOption = localStorage.getItem('selectedAnswers') || [];\n  const [selectedAnswers, setSelectedAnswers] = useState(initialSelectedOption);\n\n  // working code\n  // const onAnswerSelected = (optionIndex) => {\n  //     const updatedSelectedAnswers = [...selectedAnswers];\n  //     updatedSelectedAnswers[currentQuestionIndex] = optionIndex;\n\n  //     // Update the selected answers map for the current subject\n  //     setSelectedAnswersMap((prevMap) => ({\n  //         ...prevMap,\n  //         [data.subjectId]: updatedSelectedAnswers,\n  //       }));\n  //       setSelectedAnswers(updatedSelectedAnswers);\n  // };\n\n  const onAnswerSelected = optionIndex => {\n    const updatedSelectedAnswers = [...selectedAnswers];\n    updatedSelectedAnswers[currentQuestionIndex] = optionIndex;\n\n    // Update the selected answers map for the current subject\n    setSelectedAnswersMap(prevMap => ({\n      ...prevMap,\n      [data.subjectId]: updatedSelectedAnswers\n    }));\n    setSelectedAnswers(updatedSelectedAnswers);\n\n    // Update local storage\n    setLocalStorageData(\"selectedAnswersMap\", selectedAnswersMap);\n    setLocalStorageData(\"selectedAnswers\", updatedSelectedAnswers);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"subjects\",\n      children: Subjects.map(subjectTitle => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSubjectsClick(subjectTitle.subjectId),\n          className: \"subject-btn\",\n          children: subjectTitle.subjectName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 869,\n          columnNumber: 25\n        }, this)\n      }, subjectTitle.subjectId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 868,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 866,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"second-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"single-select-question\",\n        children: sections.map((sectionTitle, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: sectionTitle.sectionName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 883,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 882,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 880,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"marks\",\n          children: [\"Marks: \", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"plus-mark\",\n            children: \"+1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 890,\n            columnNumber: 32\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"minus-mark\",\n            children: \"-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 891,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 889,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Timer: \", formatTime(timer)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 893,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 888,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 879,\n      columnNumber: 13\n    }, this), data !== null && data.questions !== undefined && data.questions.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [currentQuestionIndex + 1, \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 901,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `data:image/png;base64,${data.questions[currentQuestionIndex].question_img}`,\n          alt: \"Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 902,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 899,\n        columnNumber: 21\n      }, this), data.options.filter(opt => opt.question_id === data.questions[currentQuestionIndex].question_id).map((option, optionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"option\",\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: `question-${currentQuestionIndex}-option`,\n            value: optionIndex,\n            checked: selectedAnswers[currentQuestionIndex] !== undefined && selectedAnswers[currentQuestionIndex] === optionIndex,\n            onChange: () => onAnswerSelected(optionIndex)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 959,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `data:image/png;base64,${option.option_img}`,\n            alt: \"Option\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 969,\n            columnNumber: 37\n          }, this)]\n        }, optionIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 946,\n          columnNumber: 33\n        }, this)\n      }, option.option_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 945,\n        columnNumber: 29\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"previous-btn\",\n          onClick: handlePreviousClick,\n          disabled: currentQuestionIndex === 0,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa-solid fa-angles-left\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 985,\n            columnNumber: 29\n          }, this), \" Previous\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 980,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-btn\",\n          onClick: handleNextClick,\n          children: [\"Next \", /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa-solid fa-angles-right\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 988,\n            columnNumber: 34\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 987,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 979,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rightsidebar\",\n        children: [/*#__PURE__*/_jsxDEV(ButtonsFunctionality, {\n          onQuestionSelect: handleQuestionSelect,\n          questionStatus: questionStatus,\n          setQuestionStatus: setQuestionStatus,\n          answeredCount: answeredCount,\n          notAnsweredCount: notAnsweredCount,\n          answeredmarkedForReviewCount: answeredmarkedForReviewCount,\n          markedForReviewCount: markedForReviewCount,\n          VisitedCount: VisitedCount,\n          selectedSubject: selectedSubject,\n          data: data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 993,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSubmit,\n          id: \"resume_btn\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1005,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 992,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 898,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1014,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 865,\n    columnNumber: 9\n  }, this);\n};\n_s(QuestionsFunctionality, \"3jDOAxLbva7yLmLnsoc7fzYRkDI=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = QuestionsFunctionality;\nexport default QuestionsFunctionality;\nvar _c;\n$RefreshReg$(_c, \"QuestionsFunctionality\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Link","useNavigate","ButtonsFunctionality","TestResultsPage","jsxDEV","_jsxDEV","QuestionsFunctionality","answeredQuestions","_s","selectedSubject","setSelectedSubject","data","setData","questionStatus","setQuestionStatus","Array","isArray","questions","length","fill","answeredCount","setAnsweredCount","notAnsweredCount","setNotAnsweredCount","answeredmarkedForReviewCount","setAnsweredmarkedForReviewCount","markedForReviewCount","setMarkedForReviewCount","VisitedCount","setVisitedCount","navigate","activeQuestion","setActiveQuestion","calculateQuestionCounts","answered","notAnswered","markedForReview","forEach","status","index","handleSubmit","window","alert","state","handleQuestionSelect","questionNumber","setCurrentQuestionIndex","subjectId","testCreationTableId","Subjects","setSubjects","currentQuestionIndex","setLocalStorageData","key","localStorage","setItem","JSON","stringify","getLocalStorageData","getItem","parse","fetchData","responseSubjects","fetch","subjectsData","json","console","log","leastSubjectId","Math","min","map","subject","defaultSubjectId","response","result","storedAnswers","setSelectedAnswersMap","setSelectedAnswers","linkUrl","error","sections","setSections","fetchSections","selectedAnswersMap","handleNextClick","prevIndex","handlePreviousClick","timer","setTimer","timers","setTimers","formatTime","seconds","hours","floor","minutes","remainingSeconds","interval","setInterval","prevTimer","clearInterval","initialSelectedOption","selectedAnswers","onAnswerSelected","optionIndex","updatedSelectedAnswers","prevMap","children","className","subjectTitle","onClick","handleSubjectsClick","subjectName","fileName","_jsxFileName","lineNumber","columnNumber","sectionTitle","sectionName","undefined","src","question_img","alt","options","filter","opt","question_id","option","type","name","value","checked","onChange","option_img","option_id","disabled","onQuestionSelect","id","_c","$RefreshReg$"],"sources":["/home/user/Documents/egate_Quiz_project/src/Pages/MainQuizFunctionality/QuestionsFunctionality.jsx"],"sourcesContent":["\n// import React, { useState, useEffect } from \"react\";\n// import { Link, useParams, useNavigate } from \"react-router-dom\";\n// import PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\n// import \"../Paper/Paper.css\";\n// import ButtonsFunctionality from \"./ButtonsFunctionality\";\n// import TestResultsPage from \"./TestResultsPage\";\n\n\n\n\n// const QuestionsFunctionality = ({ answeredQuestions }) => {\n\n//     const [selectedSubject, setSelectedSubject] = useState(null);\n\n//     const handleSubjectSelect = (subject) => {\n//         // Set the selected subject when a subject button is clicked\n//         setSelectedSubject(subject);\n//     };\n\n//     const [questionData, setQuestionData] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//     const [Subjects, setSubjects] = useState([]);\n//     const { testCreationTableId, subjectId } = useParams();\n//     const [sections, setSections] = useState([]);\n\n\n//     const [questionStatus, setQuestionStatus] = useState(\n//         Array(questionData.length).fill(\"notAnswered\")\n//     );\n\n//     const [answeredCount, setAnsweredCount] = useState(0);\n//     const [notAnsweredCount, setNotAnsweredCount] = useState(0);\n//     const [answeredmarkedForReviewCount, setAnsweredmarkedForReviewCount] =\n//         useState(0);\n//     const [markedForReviewCount, setMarkedForReviewCount] = useState(0);\n//     const [VisitedCount, setVisitedCount] = useState(0);\n\n\n//     const updateCounters = () => {\n//         let answered = 0;\n//         let notAnswered = 0;\n//         let marked = 0;\n//         let markedForReview = 0;\n//         let Visited = 0;\n\n//         questionStatus.forEach((status) => {\n//             if (status === \"answered\") {\n//                 answered++;\n//             } else if (status === \"notAnswered\") {\n//                 notAnswered++;\n//             } else if (status === \"marked\") {\n//                 marked++;\n//             } else if (status === \"Answered but marked for review\") {\n//                 markedForReview++;\n//             } else if (status === \"notVisited\") {\n//                 Visited++;\n//             }\n//         });\n\n//         setAnsweredCount(answered);\n//         setNotAnsweredCount(notAnswered);\n//         setAnsweredmarkedForReviewCount(marked);\n//         setMarkedForReviewCount(markedForReview);\n//         setVisitedCount(Visited);\n//     };\n\n\n//     // ---------------------------------Timer code Start--------------------------------\n//     const [timer, setTimer] = useState(0);\n//     const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\n\n//     const formatTime = (seconds) => {\n//         const hours = Math.floor(seconds / 3600);\n\n//         const minutes = Math.floor((seconds % 3600) / 60);\n\n//         const remainingSeconds = seconds % 60;\n\n//         return `${hours > 9 ? hours : \"0\" + hours}:${minutes > 9 ? minutes : \"0\" + minutes\n//             }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n//     };\n\n//     useEffect(() => {\n//         // Set the timer to the saved value for the current question\n//         setTimer(timers[currentQuestionIndex] || 0);\n//         let interval;\n//         interval = setInterval(() => {\n//             setTimer((prevTimer) => prevTimer + 1);\n//         }, 1000);\n//         // Clear the interval when the component unmounts or when the user moves to the next question\n//         return () => {\n//             clearInterval(interval);\n//         };\n//     }, [currentQuestionIndex, timers]);\n//     // ------------------------------------Timer code end--------------------------------\n\n\n//     useEffect(() => {\n//         const fetchSubjects = async () => {\n//             try {\n//                 const response = await fetch(\n//                     `http://localhost:4009/subjects/${testCreationTableId}`\n//                 );\n//                 const data = await response.json();\n//                 setSubjects(data);\n//             } catch (error) {\n//                 console.error(error);\n//             }\n//         };\n\n\n\n\n//         const fetchSections = async () => {\n//             try {\n//                 const response = await fetch(\n//                     `http://localhost:4009/fetchSections/${testCreationTableId}`\n//                 );\n//                 const data = await response.json();\n//                 setSections(data);\n//             } catch (error) {\n//                 console.error(error);\n//             }\n//         };\n\n\n\n\n\n\n//         const fetchQuestionData = async () => {\n//             try {\n//                 const response = await fetch(\n//                     `http://localhost:4009/getPaperData/${testCreationTableId}`\n//                 );\n//                 const data = await response.json();\n\n//                 // Check if the data has both 'questions' and 'options' properties\n//                 if (data && data.questions && data.options) {\n//                     // Assuming both questions and options are arrays, you might want to merge them\n//                     const mergedData = data.questions.map((question, index) => ({\n//                         ...question,\n//                         options: data.options.slice(index * 4, (index + 1) * 4), // Assuming 4 options per question\n//                     }));\n\n//                     setQuestionData(mergedData);\n//                     setQuestionStatus([\n//                         \"notAnswered\",\n//                         ...Array(mergedData.length - 1).fill(\"notVisited\"),\n//                     ]);\n//                 } else {\n//                     console.error(\"API response does not have expected structure:\", data);\n//                 }\n//             } catch (error) {\n//                 console.error(error);\n//             }\n//         };\n\n\n//         fetchSubjects();\n//         fetchSections();\n//         fetchQuestionData();\n//     }, [testCreationTableId]);\n\n\n//     useEffect(() => {\n//         // Call the updateCounters function initially when the component mounts\n//         updateCounters();\n//     }, [questionStatus]);\n\n\n\n//     const [selectedAnswers, setSelectedAnswers] = useState(\n//         Array(questionData.length).fill(\"\")\n//     );\n\n\n\n\n\n\n//     const onAnswerSelected = (OptionLetter) => {\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//         setSelectedAnswers(updatedSelectedAnswers);\n\n//     };\n\n//     const [activeQuestion, setActiveQuestion] = useState(0);\n\n\n//     const markForReview = () => {\n//         // Update questionStatus for the marked question\n//         const updatedQuestionStatus = [...questionStatus];\n//         if (selectedAnswers[activeQuestion]) {\n//             updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n//             if (selectedAnswers[activeQuestion] === \"Answered but marked for review\") {\n//                 updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n//             }\n//         } else if (!selectedAnswers[activeQuestion]) {\n//             updatedQuestionStatus[activeQuestion] = \"marked\";\n//         }\n\n//         setQuestionStatus(updatedQuestionStatus);\n//     };\n\n\n\n\n\n//     const clearResponse = () => {\n//         // Clear the selected answer\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[currentQuestionIndex] = \"\";\n//         setSelectedAnswers(updatedSelectedAnswers);\n\n//         // Update the question status to \"notAnswered\"\n//         setQuestionStatus((prevQuestionStatus) => {\n//             const currentStatus = prevQuestionStatus[currentQuestionIndex];\n//             if (currentStatus === \"answered\") {\n//                 return [\n//                     ...prevQuestionStatus.slice(0, currentQuestionIndex),\n//                     \"notAnswered\",\n//                     ...prevQuestionStatus.slice(currentQuestionIndex + 1),\n//                 ];\n//             }\n//             return prevQuestionStatus;\n//         });\n//     };\n\n\n//     const goToPreviousQuestion = () => {\n//         setCurrentQuestionIndex((prevIndex) => {\n//             // Save the current timer value for the question\n//             const updatedTimers = [...timers];\n//             updatedTimers[prevIndex] = timer;\n//             setTimers(updatedTimers);\n//             // Move to the previous question\n//             return prevIndex - 1;\n//         });\n\n//         setActiveQuestion((prevActiveQuestion) => prevActiveQuestion - 1);\n//     };\n\n\n//     const handleNextClick = () => {\n\n\n//         setCurrentQuestionIndex((prevIndex) => {\n//             // Save the current timer value for the question\n\n//             const updatedTimers = [...timers];\n\n//             updatedTimers[prevIndex] = timer;\n\n//             setTimers(updatedTimers);\n//             return prevIndex + 1;\n//         });\n\n//         const updatedQuestionStatus = [...questionStatus];\n\n//         if (activeQuestion < questionData.length - 1) {\n//             // Check the status of the next question\n//             const nextQuestionStatus = questionStatus[activeQuestion + 1];\n\n//             if (nextQuestionStatus === \"answered\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"answered\";\n//             } else if (nextQuestionStatus === \"notAnswered\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n//             } else if (!markForReview() === false) {\n//                 markForReview();\n//             }\n\n//             setActiveQuestion((prevActiveQuestion) => prevActiveQuestion + 1);\n//         }\n\n//         updateCounters();\n\n\n\n//         // Set status of the next question (if any) to \"notAnswered\"\n\n//         if (activeQuestion < questionData.length - 1) {\n//             const updatedQuestionStatus = [...questionStatus];\n//             const nextQuestionStatus = questionStatus[activeQuestion + 1];\n\n//             if (nextQuestionStatus === \"notVisited\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n//             }\n\n//             if (selectedAnswers[activeQuestion] === \"answered\") {\n//                 updatedQuestionStatus[activeQuestion] = \"answered\";\n//             } else if (markForReview() === true) {\n//                 updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n//             } else if (markForReview() === false) {\n//                 updatedQuestionStatus[activeQuestion] = \"marked\";\n//             }\n\n//             if (nextQuestionStatus === \"notAnswered\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n//             }\n\n//             setQuestionStatus(updatedQuestionStatus);\n//         }\n\n\n\n//             // Update the question status to \"answered\" only if an answer has been selected\n//     if (selectedAnswers[activeQuestion]) {\n//         setQuestionStatus((prevQuestionStatus) => {\n//             const currentStatus = prevQuestionStatus[activeQuestion];\n//             if (currentStatus === \"notAnswered\") {\n//                 return [\n//                     ...prevQuestionStatus.slice(0, activeQuestion),\n//                     \"answered\",\n//                     ...prevQuestionStatus.slice(activeQuestion + 1),\n//                 ];\n//             }\n//             return prevQuestionStatus;\n//         });\n//     }\n\n//     };\n\n\n//     const [accuracy, setAccuracy] = useState(0);\n//     const [averageScore, setAverageScore] = useState(0);\n//     const [topScore, setTopScore] = useState(0);\n//     const [liveRank, setLiveRank] = useState(0);\n\n//     const calculateQuestionCounts = () => {\n//         let answered = 0;\n//         let notAnswered = 0;\n//         let markedForReview = 0;\n//         let answeredmarkedForReviewCount = 0;\n//         let VisitedCount = 0;\n\n//         questionStatus.forEach((status, index) => {\n//             if (status === \"answered\") {\n//                 answered++;\n//             } else if (status === \"notAnswered\") {\n//                 notAnswered++;\n//             } else if (status === \"marked\") {\n//                 markedForReview++;\n//             } else if (status === \"Answered but marked for review\") {\n//                 answeredmarkedForReviewCount++;\n//             } else if (status === \"notVisited\") {\n//                 VisitedCount++;\n//             }\n//         });\n\n//         return {\n//             answered,\n//             notAnswered,\n//             markedForReview,\n//             answeredmarkedForReviewCount,\n//             VisitedCount,\n//         };\n//     };\n\n\n//     const [showResult, setShowResult] = useState(false);\n//     const navigate = useNavigate();\n\n\n//     const handleSubmit = () => {\n//         window.alert(\"Your Test has been Submitted!! Click Ok to See Result.\");\n\n\n\n//         // Call the function to get question counts\n//         const {\n//             answered,\n//             notAnswered,\n//             markedForReview,\n//             answeredmarkedForReviewCount,\n//             VisitedCount,\n//         } = calculateQuestionCounts();\n\n\n//         // Add any additional logic you need for submitting the exam\n//         // For example, you might want to send this data to the server.\n//          // Redirect to the result page\n//          navigate(\"/result\", {\n//             state: {\n//               answeredCount: answered,\n//               notAnsweredCount: notAnswered,\n//               markedForReviewCount: markedForReview,\n//               answeredmarkedForReviewCount: answeredmarkedForReviewCount,\n//               VisitedCount: VisitedCount,\n//             },\n//         });\n//     };\n\n\n\n//     const handleQuestionSelect = (questionNumber) => {\n//         setCurrentQuestionIndex(questionNumber - 1);\n//         setActiveQuestion(questionNumber - 1);\n//     };\n\n\n\n\n\n\n\n//     return (\n\n//         <div className=\"Main-Page\">\n//            {showResult ? (\n//         // Render the ResultPage component here\n//         <TestResultsPage\n//           answeredCount={answeredCount}\n//           notAnsweredCount={notAnsweredCount}\n//           markedForReviewCount={markedForReviewCount}\n//           answeredmarkedForReviewCount={answeredmarkedForReviewCount}\n//           VisitedCount={VisitedCount}\n//         />\n//       ) : (\n//         <div>\n//         <div>\n//             <PaperHeader />\n//         </div>\n//         <div className=\"QUESTIONS_CONTAINER\">\n//             <div className=\"QUESTIONS_CONTAINER_subpart\">\n//             <div className=\"subjects\">\n//             {Subjects.map((subjectTitle, index) => (\n//                 <li key={index}>\n//                     <Link ><button className=\"subject-btn\" onClick={() => handleSubjectSelect(subjectTitle.subjectName)}>{subjectTitle.subjectName}</button></Link>\n//                     {/* <button className=\"subject-btn\">{subjectTitle.subjectName}</button> */}\n//                 </li>\n//             ))}\n\n//         </div>\n\n\n//         <div className=\"second-header\">\n//             <div className=\"single-select-question\">\n//                 {sections.map((sectionTitle, index) => (\n//                     <li key={index}>\n//                         <p>{sectionTitle.sectionName}</p>\n\n//                     </li>\n//                 ))}\n//                 {/* Single Select Question */}\n//             </div>\n//             <div className=\"right-header\">\n//                 <div className=\"marks\">\n//                     Marks: <div className=\"plus-mark\">+1</div>\n//                     <div className=\"minus-mark\">-1</div>\n//                 </div>\n//                 <div>Timer: {formatTime(timer)}</div>\n//             </div>\n//         </div>\n\n\n//         <div className=\"Question_No_heading\">\n//             <p>  Question No. {currentQuestionIndex + 1}  of {questionData.length}</p>\n//         </div>\n\n\n//         <div  className=\"_quizexampart \">\n// {questionData.length > 0 && (\n//             <div className=\"quizexampart_q_O_container\">\n//                 <h4>\n//                     {/* {currentQuestionIndex + 1}. */}\n\n//                     <img\n//                         src={`data:image/png;base64,${questionData[currentQuestionIndex].question_img}`}\n//                         alt={`Question ${currentQuestionIndex + 1}`}\n//                     />\n//                 </h4>\n\n//                 {questionData[currentQuestionIndex].options.map(\n//                     (OptionImage, optionIndex) => (\n//                         <li key={optionIndex}>\n//                             <input\n//                                 type=\"radio\"\n//                                 name={`question-${currentQuestionIndex}-option`}\n//                                 value={optionIndex}\n//                                 checked={\n//                                     selectedAnswers[currentQuestionIndex] === optionIndex\n//                                 }\n//                                 onChange={() => onAnswerSelected(optionIndex)}\n//                             />\n//                             {OptionImage && OptionImage.option_img && (\n//                                 <img\n//                                     key={OptionImage.question_id}\n//                                     src={`data:image/png;base64,${OptionImage.option_img}`}\n//                                     alt={`Option ${optionIndex + 1}`}\n//                                 />\n//                             )}\n//                         </li>\n//                     )\n//                 )}\n//                 <div className=\"flex-right\">\n//                     <button className=\"clear-btn\" onClick={markForReview}>\n//                         Mark for Review & Next\n//                     </button>\n//                     <button className=\"clear-btn\" onClick={clearResponse}>\n//                         Clear Response\n//                     </button>\n//                     <button\n//                         className=\"previous-btn\"\n//                         onClick={goToPreviousQuestion}\n//                         disabled={currentQuestionIndex === 0}\n//                     >\n//                         <i className=\"fa-solid fa-angles-left\"></i> Previous\n//                     </button>\n//                     <button className=\"save-btn\" onClick={handleNextClick}>\n//                         Next <i className=\"fa-solid fa-angles-right\"></i>\n//                     </button>\n//                 </div>\n//             </div>\n//         )}\n// </div>\n//             </div>\n\n\n// <div className=\"rightsidebar\">\n//                 <ButtonsFunctionality\n//                     onQuestionSelect={handleQuestionSelect}\n//                     questionStatus={questionStatus}\n//                     setQuestionStatus={setQuestionStatus}\n//                     answeredCount={answeredCount}\n//                     notAnsweredCount={notAnsweredCount}\n//                     answeredmarkedForReviewCount={answeredmarkedForReviewCount}\n//                     markedForReviewCount={markedForReviewCount}\n//                     VisitedCount={VisitedCount}\n//                     selectedSubject={selectedSubject}\n//                     questionData={questionData}\n//                 />\n//                 <button onClick={handleSubmit} id=\"resume_btn\">\n//                     Submit\n//                 </button>\n//             </div>\n\n//         </div>\n\n\n\n\n\n//     </div>\n//       )}\n\n\n\n\n//         </div>\n//     )\n// }\n\n// export default QuestionsFunctionality\n\n\n\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, Link, useNavigate } from \"react-router-dom\";\nimport ButtonsFunctionality from \"./ButtonsFunctionality\";\nimport TestResultsPage from \"./TestResultsPage\";\nimport \"../Paper/Paper.css\";\n\nconst QuestionsFunctionality = ({ answeredQuestions }) => {\n\n    const [selectedSubject, setSelectedSubject] = useState(null);\n    const [data, setData] = useState(null);\n\n\n    const [questionStatus, setQuestionStatus] = useState(\n        Array.isArray(data) ? Array(data.questions.length).fill(\"notAnswered\") : []\n    );\n\n\n    const [answeredCount, setAnsweredCount] = useState(0);\n    const [notAnsweredCount, setNotAnsweredCount] = useState(0);\n    const [answeredmarkedForReviewCount, setAnsweredmarkedForReviewCount] =\n        useState(0);\n    const [markedForReviewCount, setMarkedForReviewCount] = useState(0);\n    const [VisitedCount, setVisitedCount] = useState(0);\n\n    const navigate = useNavigate();\n    const [activeQuestion, setActiveQuestion] = useState(0);\n\n\n\n    const calculateQuestionCounts = () => {\n        let answered = 0;\n        let notAnswered = 0;\n        let markedForReview = 0;\n        let answeredmarkedForReviewCount = 0;\n        let VisitedCount = 0;\n\n        questionStatus.forEach((status, index) => {\n            if (status === \"answered\") {\n                answered++;\n            } else if (status === \"notAnswered\") {\n                notAnswered++;\n            } else if (status === \"marked\") {\n                markedForReview++;\n            } else if (status === \"Answered but marked for review\") {\n                answeredmarkedForReviewCount++;\n            } else if (status === \"notVisited\") {\n                VisitedCount++;\n            }\n        });\n\n        return {\n            answered,\n            notAnswered,\n            markedForReview,\n            answeredmarkedForReviewCount,\n            VisitedCount,\n        };\n    };\n\n\n    const handleSubmit = () => {\n        window.alert(\"Your Test has been Submitted!! Click Ok to See Result.\");\n\n\n\n        // Call the function to get question counts\n        const {\n            answered,\n            notAnswered,\n            markedForReview,\n            answeredmarkedForReviewCount,\n            VisitedCount,\n        } = calculateQuestionCounts();\n\n\n        // Add any additional logic you need for submitting the exam\n        // For example, you might want to send this data to the server.\n        // Redirect to the result page\n        navigate(\"/result\", {\n            state: {\n                answeredCount: answered,\n                notAnsweredCount: notAnswered,\n                markedForReviewCount: markedForReview,\n                answeredmarkedForReviewCount: answeredmarkedForReviewCount,\n                VisitedCount: VisitedCount,\n            },\n        });\n    };\n\n    const handleQuestionSelect = (questionNumber) => {\n        setCurrentQuestionIndex(questionNumber - 1);\n        setActiveQuestion(questionNumber - 1);\n    };\n\n\n\n    const { subjectId, testCreationTableId } = useParams();\n    const [Subjects, setSubjects] = useState([]);\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n\n\n        // Function to set data in local storage\n        const setLocalStorageData = (key, data) => {\n            localStorage.setItem(key, JSON.stringify(data));\n        };\n    \n        // Function to get data from local storage\n        const getLocalStorageData = (key) => {\n            const data = localStorage.getItem(key);\n            return data ? JSON.parse(data) : null;\n        };\n    \n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                // Fetch all subjects\n                const responseSubjects = await fetch(\n                    `http://localhost:4009/subjects/${testCreationTableId}`\n                );\n                const subjectsData = await responseSubjects.json();\n                setSubjects(subjectsData);\n                console.log(subjectsData);\n\n                // Find the least subjectId\n                const leastSubjectId =\n                    subjectsData.length > 0\n                        ? Math.min(...subjectsData.map((subject) => subject.subjectId))\n                        : null;\n\n                // If subjectId is not provided, set it to the least subjectId\n                const defaultSubjectId = subjectId || leastSubjectId;\n\n                // Fetch data for the default subject\n                const response = await fetch(\n                    `http://localhost:4009/getPaperData/${testCreationTableId}/${defaultSubjectId}`\n                );\n                const result = await response.json();\n                setData(result);\n\n                // Load selected answers from local storage\n                const storedAnswers = getLocalStorageData('selectedAnswersMap') || {};\n                if (storedAnswers && storedAnswers[data.subjectId]) {\n                  setSelectedAnswersMap(storedAnswers);\n                  setSelectedAnswers(storedAnswers[data.subjectId]);\n                }\n\n\n                // Construct the link with the least subjectId\n                const linkUrl = `/subjects/${testCreationTableId}/${subjectId || leastSubjectId}`;\n                // Use linkUrl as needed in your component\n            } catch (error) {\n                console.error(\"Error fetching data:\", error);\n            }\n        };\n\n        fetchData();\n    }, [testCreationTableId, subjectId]);\n\n\n    const [sections, setSections] = useState([]);\n    useEffect(() => {\n        const fetchSections = async () => {\n            try {\n                const response = await fetch(\n                    `http://localhost:4009/fetchSections/${testCreationTableId}`\n                );\n                const data = await response.json();\n                setSections(data);\n            } catch (error) {\n                console.error(error);\n            }\n        };\n\n        fetchSections();\n    }, [testCreationTableId]);\n\n\n\n\n\n    const [selectedAnswersMap, setSelectedAnswersMap] = useState({});\n    // const [markedQuestions, setMarkedQuestions] = useState([]);\n    // const handleSubjectsClick = async (clickedSubjectId, selectedSubjectId) => {\n    //     try {\n    //         const response = await fetch(\n    //             `http://localhost:4009/getPaperData/${testCreationTableId}/${clickedSubjectId}`\n    //         );\n    //         const subjectsData = await response.json();\n\n\n    //         // Load selected answers from local storage\n    //         const storedAnswers = getLocalStorageData('selectedAnswersMap') || {};\n    //         if (storedAnswers && storedAnswers[clickedSubjectId]) {\n    //             setSelectedAnswersMap(storedAnswers);\n    //             setSelectedAnswers(storedAnswers[clickedSubjectId]);\n    //         }\n\n    //         if (subjectsData && subjectsData.questions) {\n    //             // Preserve selected answers for the current subject\n    //             const selectedAnswersForSubject = selectedAnswersMap[clickedSubjectId] || [];\n    //             setSelectedAnswers(selectedAnswersForSubject);\n\n    //             // Set data and current question index\n    //             setData(subjectsData);\n\n    //             // Check if the question was answered and mark them\n    //             const markedQuestions = subjectsData.questions.map((question, index) => {\n    //                 const isAnswered = selectedAnswersForSubject[index] !== undefined;\n    //                 return { ...question, isAnswered };\n    //             });\n\n    //             setMarkedQuestions(markedQuestions);\n\n    //             setCurrentQuestionIndex(selectedAnswersForSubject.length > 0 ? selectedAnswersForSubject.length - 1 : 0);\n    //         } else {\n    //             console.error(\"Invalid data format:\", subjectsData);\n    //         }\n    //     } catch (error) {\n    //         console.error(error);\n    //     }\n\n    //     setSelectedSubject(selectedSubjectId);\n    // };\n\n    \n    const handleNextClick = () => {\n        // Update the current question index to move to the next question\n        setCurrentQuestionIndex((prevIndex) =>\n            prevIndex < data.questions.length - 1 ? prevIndex + 1 : prevIndex\n        );\n    };\n\n    const handlePreviousClick = () => {\n        // Update the current question index to move to the previous question\n        setCurrentQuestionIndex((prevIndex) =>\n            prevIndex > 0 ? prevIndex - 1 : prevIndex\n        );\n    };\n\n    // ---------------------------------Timer code Start--------------------------------\n    const [timer, setTimer] = useState(0);\n    // const [timers, setTimers] = useState(new Array(data.length).fill(0));\n    const [timers, setTimers] = useState(Array(data));\n    const formatTime = (seconds) => {\n        const hours = Math.floor(seconds / 3600);\n        const minutes = Math.floor((seconds % 3600) / 60);\n        const remainingSeconds = seconds % 60;\n        return `${hours > 9 ? hours : \"0\" + hours}:${minutes > 9 ? minutes : \"0\" + minutes\n            }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n    };\n\n    //working code\n    useEffect(() => {\n        // Set the timer to the saved value for the current question\n        setTimer(timers[currentQuestionIndex] || 0);\n        let interval;\n        interval = setInterval(() => {\n            setTimer((prevTimer) => prevTimer + 1);\n        }, 1000);\n        // Clear the interval when the component unmounts or when the user moves to the next question\n        return () => {\n            clearInterval(interval);\n        };\n    }, [currentQuestionIndex, timers]);\n    // ------------------------------------Timer code end--------------------------------\n    const initialSelectedOption = localStorage.getItem('selectedAnswers') || [];\n\n    const [selectedAnswers, setSelectedAnswers] = useState(initialSelectedOption);\n\n\n    // working code\n    // const onAnswerSelected = (optionIndex) => {\n    //     const updatedSelectedAnswers = [...selectedAnswers];\n    //     updatedSelectedAnswers[currentQuestionIndex] = optionIndex;\n\n    //     // Update the selected answers map for the current subject\n    //     setSelectedAnswersMap((prevMap) => ({\n    //         ...prevMap,\n    //         [data.subjectId]: updatedSelectedAnswers,\n    //       }));\n    //       setSelectedAnswers(updatedSelectedAnswers);\n    // };\n\n    const onAnswerSelected = (optionIndex) => {\n        const updatedSelectedAnswers = [...selectedAnswers];\n        updatedSelectedAnswers[currentQuestionIndex] = optionIndex;\n      \n        // Update the selected answers map for the current subject\n        setSelectedAnswersMap((prevMap) => ({\n          ...prevMap,\n          [data.subjectId]: updatedSelectedAnswers,\n        }));\n        setSelectedAnswers(updatedSelectedAnswers);\n      \n        // Update local storage\n        setLocalStorageData(\"selectedAnswersMap\", selectedAnswersMap);\n        setLocalStorageData(\"selectedAnswers\", updatedSelectedAnswers);\n      };\n      \n\n\n    return (\n        <div>\n            <div className=\"subjects\">\n                {Subjects.map((subjectTitle) => (\n                    <li key={subjectTitle.subjectId}>\n                        <button\n                            onClick={() => handleSubjectsClick(subjectTitle.subjectId)}\n                            className=\"subject-btn\"\n                        >\n                            {/* {subjectTitle.subjectId[0]} */}\n                            {subjectTitle.subjectName}\n                        </button>\n                    </li>\n                ))}\n            </div>\n            <div className=\"second-header\">\n                <div className=\"single-select-question\">\n                    {sections.map((sectionTitle, index) => (\n                        <li key={index}>\n                            <p>{sectionTitle.sectionName}</p>\n                        </li>\n                    ))}\n                    {/* Single Select Question */}\n                </div>\n                <div className=\"right-header\">\n                    <div className=\"marks\">\n                        Marks: <div className=\"plus-mark\">+1</div>\n                        <div className=\"minus-mark\">-1</div>\n                    </div>\n                    <div>Timer: {formatTime(timer)}</div>\n                </div>\n            </div>\n\n            {data !== null && data.questions !== undefined && data.questions.length > 0 ? (\n                <div>\n                    <div className=\"question\">\n                        {/* Render the current question based on currentQuestionIndex */}\n                        <h3>{currentQuestionIndex + 1}.</h3>\n                        <img\n                            src={`data:image/png;base64,${data.questions[currentQuestionIndex].question_img}`}\n                            alt=\"Question\"\n                        />\n                    </div>\n\n                    {/* Map over options for the current question and render them */}\n\n                    {/* {data.options\n                        .filter(\n                            (opt) =>\n                                opt.question_id ===\n                                data.questions[currentQuestionIndex].question_id\n                        )\n                        .map((option, optionIndex) => (\n                            <div className=\"option\" key={option.option_id}>\n                                <li key={optionIndex}>\n                                    <input\n                                        type=\"radio\"\n                                        name={`question-${currentQuestionIndex}-option`}\n                                        value={optionIndex}\n                                        checked={\n                                            selectedAnswers[currentQuestionIndex] === optionIndex\n                                        }\n                                        // onChange={() => onAnswerSelected(subjectIndex, optionIndex)}\n                                        onChange={() => onAnswerSelected(optionIndex)}\n                                    />\n                                    <img\n                                        src={`data:image/png;base64,${option.option_img}`}\n                                        alt=\"Option\"\n                                    />\n                                </li>\n                            </div>\n                        ))} */}\n\n\n                    {data.options\n                        .filter(\n                            (opt) =>\n                                opt.question_id ===\n                                data.questions[currentQuestionIndex].question_id\n                        )\n                        .map((option, optionIndex) => (\n                            <div className=\"option\" key={option.option_id}>\n                                <li key={optionIndex}>\n                                    {/* <input\n                                        type=\"radio\"\n                                        name={`question-${currentQuestionIndex}-option`}\n                                        value={optionIndex}\n                                        checked={\n                                            selectedAnswers[currentQuestionIndex] === optionIndex\n                                        }\n                                        onChange={() => onAnswerSelected(optionIndex)}\n                                    /> */}\n\n\n\n<input\n  type=\"radio\"\n  name={`question-${currentQuestionIndex}-option`}\n  value={optionIndex}\n  checked={\n    selectedAnswers[currentQuestionIndex] !== undefined &&\n    selectedAnswers[currentQuestionIndex] === optionIndex\n  }\n  onChange={() => onAnswerSelected(optionIndex)}\n/>\n                                    <img\n                                        src={`data:image/png;base64,${option.option_img}`}\n                                        alt=\"Option\"\n                                    />\n                                </li>\n                            </div>\n                        ))\n                    }\n\n\n                    <div>\n                        <button\n                            className=\"previous-btn\"\n                            onClick={handlePreviousClick}\n                            disabled={currentQuestionIndex === 0}\n                        >\n                            <i className=\"fa-solid fa-angles-left\"></i> Previous\n                        </button>\n                        <button className=\"save-btn\" onClick={handleNextClick}>\n                            Next <i className=\"fa-solid fa-angles-right\"></i>\n                        </button>\n                    </div>\n\n                    <div className=\"rightsidebar\">\n                        <ButtonsFunctionality\n                            onQuestionSelect={handleQuestionSelect}\n                            questionStatus={questionStatus}\n                            setQuestionStatus={setQuestionStatus}\n                            answeredCount={answeredCount}\n                            notAnsweredCount={notAnsweredCount}\n                            answeredmarkedForReviewCount={answeredmarkedForReviewCount}\n                            markedForReviewCount={markedForReviewCount}\n                            VisitedCount={VisitedCount}\n                            selectedSubject={selectedSubject}\n                            data={data}\n                        />\n                        <button onClick={handleSubmit} id=\"resume_btn\">\n                            Submit\n                        </button>\n                    </div>\n\n\n\n                </div>\n            ) : (\n                <p>Loading data...</p>\n            )}\n\n\n        </div>\n    );\n}\n\nexport default QuestionsFunctionality"],"mappings":";;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAOA;AACA;AACA;AACA;;AAEA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAMA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;;AAGA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAIA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAGA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAQA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;;AAKA;AACA;AACA;;AAEA;;AAKA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,IAAI,EAAEC,WAAW,QAAQ,kBAAkB;AAC/D,OAAOC,oBAAoB,MAAM,wBAAwB;AACzD,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,sBA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}