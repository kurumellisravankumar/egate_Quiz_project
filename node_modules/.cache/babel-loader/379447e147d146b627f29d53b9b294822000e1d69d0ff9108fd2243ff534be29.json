{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/egate_Quiz_project/src/Pages/MainQuizFunctionality/QuestionsFunctionality.jsx\";\n// import React, { useState, useEffect } from \"react\";\n// import { Link, useParams, useNavigate } from \"react-router-dom\";\n// import PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\n// import \"../Paper/Paper.css\";\n// import ButtonsFunctionality from \"./ButtonsFunctionality\";\n// import TestResultsPage from \"./TestResultsPage\";\n\n// const QuestionsFunctionality = ({ answeredQuestions }) => {\n\n//     const [selectedSubject, setSelectedSubject] = useState(null);\n\n//     const handleSubjectSelect = (subject) => {\n//         // Set the selected subject when a subject button is clicked\n//         setSelectedSubject(subject);\n//     };\n\n//     const [questionData, setQuestionData] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//     const [Subjects, setSubjects] = useState([]);\n//     const { testCreationTableId, subjectId } = useParams();\n//     const [sections, setSections] = useState([]);\n\n//     const [questionStatus, setQuestionStatus] = useState(\n//         Array(questionData.length).fill(\"notAnswered\")\n//     );\n\n//     const [answeredCount, setAnsweredCount] = useState(0);\n//     const [notAnsweredCount, setNotAnsweredCount] = useState(0);\n//     const [answeredmarkedForReviewCount, setAnsweredmarkedForReviewCount] =\n//         useState(0);\n//     const [markedForReviewCount, setMarkedForReviewCount] = useState(0);\n//     const [VisitedCount, setVisitedCount] = useState(0);\n\n//     const updateCounters = () => {\n//         let answered = 0;\n//         let notAnswered = 0;\n//         let marked = 0;\n//         let markedForReview = 0;\n//         let Visited = 0;\n\n//         questionStatus.forEach((status) => {\n//             if (status === \"answered\") {\n//                 answered++;\n//             } else if (status === \"notAnswered\") {\n//                 notAnswered++;\n//             } else if (status === \"marked\") {\n//                 marked++;\n//             } else if (status === \"Answered but marked for review\") {\n//                 markedForReview++;\n//             } else if (status === \"notVisited\") {\n//                 Visited++;\n//             }\n//         });\n\n//         setAnsweredCount(answered);\n//         setNotAnsweredCount(notAnswered);\n//         setAnsweredmarkedForReviewCount(marked);\n//         setMarkedForReviewCount(markedForReview);\n//         setVisitedCount(Visited);\n//     };\n\n//     // ---------------------------------Timer code Start--------------------------------\n//     const [timer, setTimer] = useState(0);\n//     const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\n\n//     const formatTime = (seconds) => {\n//         const hours = Math.floor(seconds / 3600);\n\n//         const minutes = Math.floor((seconds % 3600) / 60);\n\n//         const remainingSeconds = seconds % 60;\n\n//         return `${hours > 9 ? hours : \"0\" + hours}:${minutes > 9 ? minutes : \"0\" + minutes\n//             }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n//     };\n\n//     useEffect(() => {\n//         // Set the timer to the saved value for the current question\n//         setTimer(timers[currentQuestionIndex] || 0);\n//         let interval;\n//         interval = setInterval(() => {\n//             setTimer((prevTimer) => prevTimer + 1);\n//         }, 1000);\n//         // Clear the interval when the component unmounts or when the user moves to the next question\n//         return () => {\n//             clearInterval(interval);\n//         };\n//     }, [currentQuestionIndex, timers]);\n//     // ------------------------------------Timer code end--------------------------------\n\n//     useEffect(() => {\n//         const fetchSubjects = async () => {\n//             try {\n//                 const response = await fetch(\n//                     `http://localhost:4009/subjects/${testCreationTableId}`\n//                 );\n//                 const data = await response.json();\n//                 setSubjects(data);\n//             } catch (error) {\n//                 console.error(error);\n//             }\n//         };\n\n//         const fetchSections = async () => {\n//             try {\n//                 const response = await fetch(\n//                     `http://localhost:4009/fetchSections/${testCreationTableId}`\n//                 );\n//                 const data = await response.json();\n//                 setSections(data);\n//             } catch (error) {\n//                 console.error(error);\n//             }\n//         };\n\n//         const fetchQuestionData = async () => {\n//             try {\n//                 const response = await fetch(\n//                     `http://localhost:4009/getPaperData/${testCreationTableId}`\n//                 );\n//                 const data = await response.json();\n\n//                 // Check if the data has both 'questions' and 'options' properties\n//                 if (data && data.questions && data.options) {\n//                     // Assuming both questions and options are arrays, you might want to merge them\n//                     const mergedData = data.questions.map((question, index) => ({\n//                         ...question,\n//                         options: data.options.slice(index * 4, (index + 1) * 4), // Assuming 4 options per question\n//                     }));\n\n//                     setQuestionData(mergedData);\n//                     setQuestionStatus([\n//                         \"notAnswered\",\n//                         ...Array(mergedData.length - 1).fill(\"notVisited\"),\n//                     ]);\n//                 } else {\n//                     console.error(\"API response does not have expected structure:\", data);\n//                 }\n//             } catch (error) {\n//                 console.error(error);\n//             }\n//         };\n\n//         fetchSubjects();\n//         fetchSections();\n//         fetchQuestionData();\n//     }, [testCreationTableId]);\n\n//     useEffect(() => {\n//         // Call the updateCounters function initially when the component mounts\n//         updateCounters();\n//     }, [questionStatus]);\n\n//     const [selectedAnswers, setSelectedAnswers] = useState(\n//         Array(questionData.length).fill(\"\")\n//     );\n\n//     const onAnswerSelected = (OptionLetter) => {\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//         setSelectedAnswers(updatedSelectedAnswers);\n\n//     };\n\n//     const [activeQuestion, setActiveQuestion] = useState(0);\n\n//     const markForReview = () => {\n//         // Update questionStatus for the marked question\n//         const updatedQuestionStatus = [...questionStatus];\n//         if (selectedAnswers[activeQuestion]) {\n//             updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n//             if (selectedAnswers[activeQuestion] === \"Answered but marked for review\") {\n//                 updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n//             }\n//         } else if (!selectedAnswers[activeQuestion]) {\n//             updatedQuestionStatus[activeQuestion] = \"marked\";\n//         }\n\n//         setQuestionStatus(updatedQuestionStatus);\n//     };\n\n//     const clearResponse = () => {\n//         // Clear the selected answer\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[currentQuestionIndex] = \"\";\n//         setSelectedAnswers(updatedSelectedAnswers);\n\n//         // Update the question status to \"notAnswered\"\n//         setQuestionStatus((prevQuestionStatus) => {\n//             const currentStatus = prevQuestionStatus[currentQuestionIndex];\n//             if (currentStatus === \"answered\") {\n//                 return [\n//                     ...prevQuestionStatus.slice(0, currentQuestionIndex),\n//                     \"notAnswered\",\n//                     ...prevQuestionStatus.slice(currentQuestionIndex + 1),\n//                 ];\n//             }\n//             return prevQuestionStatus;\n//         });\n//     };\n\n//     const goToPreviousQuestion = () => {\n//         setCurrentQuestionIndex((prevIndex) => {\n//             // Save the current timer value for the question\n//             const updatedTimers = [...timers];\n//             updatedTimers[prevIndex] = timer;\n//             setTimers(updatedTimers);\n//             // Move to the previous question\n//             return prevIndex - 1;\n//         });\n\n//         setActiveQuestion((prevActiveQuestion) => prevActiveQuestion - 1);\n//     };\n\n//     const handleNextClick = () => {\n\n//         setCurrentQuestionIndex((prevIndex) => {\n//             // Save the current timer value for the question\n\n//             const updatedTimers = [...timers];\n\n//             updatedTimers[prevIndex] = timer;\n\n//             setTimers(updatedTimers);\n//             return prevIndex + 1;\n//         });\n\n//         const updatedQuestionStatus = [...questionStatus];\n\n//         if (activeQuestion < questionData.length - 1) {\n//             // Check the status of the next question\n//             const nextQuestionStatus = questionStatus[activeQuestion + 1];\n\n//             if (nextQuestionStatus === \"answered\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"answered\";\n//             } else if (nextQuestionStatus === \"notAnswered\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n//             } else if (!markForReview() === false) {\n//                 markForReview();\n//             }\n\n//             setActiveQuestion((prevActiveQuestion) => prevActiveQuestion + 1);\n//         }\n\n//         updateCounters();\n\n//         // Set status of the next question (if any) to \"notAnswered\"\n\n//         if (activeQuestion < questionData.length - 1) {\n//             const updatedQuestionStatus = [...questionStatus];\n//             const nextQuestionStatus = questionStatus[activeQuestion + 1];\n\n//             if (nextQuestionStatus === \"notVisited\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n//             }\n\n//             if (selectedAnswers[activeQuestion] === \"answered\") {\n//                 updatedQuestionStatus[activeQuestion] = \"answered\";\n//             } else if (markForReview() === true) {\n//                 updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n//             } else if (markForReview() === false) {\n//                 updatedQuestionStatus[activeQuestion] = \"marked\";\n//             }\n\n//             if (nextQuestionStatus === \"notAnswered\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n//             }\n\n//             setQuestionStatus(updatedQuestionStatus);\n//         }\n\n//             // Update the question status to \"answered\" only if an answer has been selected\n//     if (selectedAnswers[activeQuestion]) {\n//         setQuestionStatus((prevQuestionStatus) => {\n//             const currentStatus = prevQuestionStatus[activeQuestion];\n//             if (currentStatus === \"notAnswered\") {\n//                 return [\n//                     ...prevQuestionStatus.slice(0, activeQuestion),\n//                     \"answered\",\n//                     ...prevQuestionStatus.slice(activeQuestion + 1),\n//                 ];\n//             }\n//             return prevQuestionStatus;\n//         });\n//     }\n\n//     };\n\n//     const [accuracy, setAccuracy] = useState(0);\n//     const [averageScore, setAverageScore] = useState(0);\n//     const [topScore, setTopScore] = useState(0);\n//     const [liveRank, setLiveRank] = useState(0);\n\n//     const calculateQuestionCounts = () => {\n//         let answered = 0;\n//         let notAnswered = 0;\n//         let markedForReview = 0;\n//         let answeredmarkedForReviewCount = 0;\n//         let VisitedCount = 0;\n\n//         questionStatus.forEach((status, index) => {\n//             if (status === \"answered\") {\n//                 answered++;\n//             } else if (status === \"notAnswered\") {\n//                 notAnswered++;\n//             } else if (status === \"marked\") {\n//                 markedForReview++;\n//             } else if (status === \"Answered but marked for review\") {\n//                 answeredmarkedForReviewCount++;\n//             } else if (status === \"notVisited\") {\n//                 VisitedCount++;\n//             }\n//         });\n\n//         return {\n//             answered,\n//             notAnswered,\n//             markedForReview,\n//             answeredmarkedForReviewCount,\n//             VisitedCount,\n//         };\n//     };\n\n//     const [showResult, setShowResult] = useState(false);\n//     const navigate = useNavigate();\n\n//     const handleSubmit = () => {\n//         window.alert(\"Your Test has been Submitted!! Click Ok to See Result.\");\n\n//         // Call the function to get question counts\n//         const {\n//             answered,\n//             notAnswered,\n//             markedForReview,\n//             answeredmarkedForReviewCount,\n//             VisitedCount,\n//         } = calculateQuestionCounts();\n\n//         // Add any additional logic you need for submitting the exam\n//         // For example, you might want to send this data to the server.\n//          // Redirect to the result page\n//          navigate(\"/result\", {\n//             state: {\n//               answeredCount: answered,\n//               notAnsweredCount: notAnswered,\n//               markedForReviewCount: markedForReview,\n//               answeredmarkedForReviewCount: answeredmarkedForReviewCount,\n//               VisitedCount: VisitedCount,\n//             },\n//         });\n//     };\n\n//     const handleQuestionSelect = (questionNumber) => {\n//         setCurrentQuestionIndex(questionNumber - 1);\n//         setActiveQuestion(questionNumber - 1);\n//     };\n\n//     return (\n\n//         <div className=\"Main-Page\">\n//            {showResult ? (\n//         // Render the ResultPage component here\n//         <TestResultsPage\n//           answeredCount={answeredCount}\n//           notAnsweredCount={notAnsweredCount}\n//           markedForReviewCount={markedForReviewCount}\n//           answeredmarkedForReviewCount={answeredmarkedForReviewCount}\n//           VisitedCount={VisitedCount}\n//         />\n//       ) : (\n//         <div>\n//         <div>\n//             <PaperHeader />\n//         </div>\n//         <div className=\"QUESTIONS_CONTAINER\">\n//             <div className=\"QUESTIONS_CONTAINER_subpart\">\n//             <div className=\"subjects\">\n//             {Subjects.map((subjectTitle, index) => (\n//                 <li key={index}>\n//                     <Link ><button className=\"subject-btn\" onClick={() => handleSubjectSelect(subjectTitle.subjectName)}>{subjectTitle.subjectName}</button></Link>\n//                     {/* <button className=\"subject-btn\">{subjectTitle.subjectName}</button> */}\n//                 </li>\n//             ))}\n\n//         </div>\n\n//         <div className=\"second-header\">\n//             <div className=\"single-select-question\">\n//                 {sections.map((sectionTitle, index) => (\n//                     <li key={index}>\n//                         <p>{sectionTitle.sectionName}</p>\n\n//                     </li>\n//                 ))}\n//                 {/* Single Select Question */}\n//             </div>\n//             <div className=\"right-header\">\n//                 <div className=\"marks\">\n//                     Marks: <div className=\"plus-mark\">+1</div>\n//                     <div className=\"minus-mark\">-1</div>\n//                 </div>\n//                 <div>Timer: {formatTime(timer)}</div>\n//             </div>\n//         </div>\n\n//         <div className=\"Question_No_heading\">\n//             <p>  Question No. {currentQuestionIndex + 1}  of {questionData.length}</p>\n//         </div>\n\n//         <div  className=\"_quizexampart \">\n// {questionData.length > 0 && (\n//             <div className=\"quizexampart_q_O_container\">\n//                 <h4>\n//                     {/* {currentQuestionIndex + 1}. */}\n\n//                     <img\n//                         src={`data:image/png;base64,${questionData[currentQuestionIndex].question_img}`}\n//                         alt={`Question ${currentQuestionIndex + 1}`}\n//                     />\n//                 </h4>\n\n//                 {questionData[currentQuestionIndex].options.map(\n//                     (OptionImage, optionIndex) => (\n//                         <li key={optionIndex}>\n//                             <input\n//                                 type=\"radio\"\n//                                 name={`question-${currentQuestionIndex}-option`}\n//                                 value={optionIndex}\n//                                 checked={\n//                                     selectedAnswers[currentQuestionIndex] === optionIndex\n//                                 }\n//                                 onChange={() => onAnswerSelected(optionIndex)}\n//                             />\n//                             {OptionImage && OptionImage.option_img && (\n//                                 <img\n//                                     key={OptionImage.question_id}\n//                                     src={`data:image/png;base64,${OptionImage.option_img}`}\n//                                     alt={`Option ${optionIndex + 1}`}\n//                                 />\n//                             )}\n//                         </li>\n//                     )\n//                 )}\n//                 <div className=\"flex-right\">\n//                     <button className=\"clear-btn\" onClick={markForReview}>\n//                         Mark for Review & Next\n//                     </button>\n//                     <button className=\"clear-btn\" onClick={clearResponse}>\n//                         Clear Response\n//                     </button>\n//                     <button\n//                         className=\"previous-btn\"\n//                         onClick={goToPreviousQuestion}\n//                         disabled={currentQuestionIndex === 0}\n//                     >\n//                         <i className=\"fa-solid fa-angles-left\"></i> Previous\n//                     </button>\n//                     <button className=\"save-btn\" onClick={handleNextClick}>\n//                         Next <i className=\"fa-solid fa-angles-right\"></i>\n//                     </button>\n//                 </div>\n//             </div>\n//         )}\n// </div>\n//             </div>\n\n// <div className=\"rightsidebar\">\n//                 <ButtonsFunctionality\n//                     onQuestionSelect={handleQuestionSelect}\n//                     questionStatus={questionStatus}\n//                     setQuestionStatus={setQuestionStatus}\n//                     answeredCount={answeredCount}\n//                     notAnsweredCount={notAnsweredCount}\n//                     answeredmarkedForReviewCount={answeredmarkedForReviewCount}\n//                     markedForReviewCount={markedForReviewCount}\n//                     VisitedCount={VisitedCount}\n//                     selectedSubject={selectedSubject}\n//                     questionData={questionData}\n//                 />\n//                 <button onClick={handleSubmit} id=\"resume_btn\">\n//                     Submit\n//                 </button>\n//             </div>\n\n//         </div>\n\n//     </div>\n//       )}\n\n//         </div>\n//     )\n// }\n\n// export default QuestionsFunctionality\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionsFunctionality = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"subjects\",\n      children: Subjects.map(subjectTitle => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"#\",\n          onClick: () => handleSubjectsClick(subjectTitle.subjectId),\n          className: \"subject-btn\",\n          children: subjectTitle.subjectName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 17\n        }, this)\n      }, subjectTitle.subjectId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 571,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"second-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"single-select-question\",\n        children: sections.map((sectionTitle, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: sectionTitle.sectionName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 19\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 586,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"marks\",\n          children: [\"Marks: \", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"plus-mark\",\n            children: \"+1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 596,\n            columnNumber: 24\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"minus-mark\",\n            children: \"-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 597,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 595,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Timer: \", formatTime(timer)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 594,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 585,\n      columnNumber: 11\n    }, this), data !== null && data.questions.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [currentQuestionIndex + 1, \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `data:image/png;base64,${data.questions[currentQuestionIndex].question_img}`,\n          alt: \"Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 15\n      }, this), data.options.filter(opt => opt.question_id === data.questions[currentQuestionIndex].question_id).map((option, optionIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"option\",\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: `question-${currentQuestionIndex}-option`,\n            value: optionIndex,\n            checked: selectedAnswers[currentQuestionIndex] === optionIndex\n            // onChange={() => onAnswerSelected(subjectIndex, optionIndex)}\n            ,\n            onChange: () => onAnswerSelected(optionIndex)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 624,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `data:image/png;base64,${option.option_img}`,\n            alt: \"Option\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 634,\n            columnNumber: 23\n          }, this)]\n        }, optionIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 21\n        }, this)\n      }, option.option_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 19\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"previous-btn\",\n          onClick: handlePreviousClick,\n          disabled: currentQuestionIndex === 0,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa-solid fa-angles-left\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 648,\n            columnNumber: 19\n          }, this), \" Previous\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 643,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-btn\",\n          onClick: handleNextClick,\n          children: [\"Next \", /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa-solid fa-angles-right\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 651,\n            columnNumber: 24\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 642,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 604,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 656,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 570,\n    columnNumber: 9\n  }, this);\n};\n_c = QuestionsFunctionality;\nexport default QuestionsFunctionality;\nvar _c;\n$RefreshReg$(_c, \"QuestionsFunctionality\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","QuestionsFunctionality","children","className","Subjects","map","subjectTitle","Link","to","onClick","handleSubjectsClick","subjectId","subjectName","fileName","_jsxFileName","lineNumber","columnNumber","sections","sectionTitle","index","sectionName","formatTime","timer","data","questions","length","currentQuestionIndex","src","question_img","alt","options","filter","opt","question_id","option","optionIndex","type","name","value","checked","selectedAnswers","onChange","onAnswerSelected","option_img","option_id","handlePreviousClick","disabled","handleNextClick","_c","$RefreshReg$"],"sources":["/home/user/Documents/egate_Quiz_project/src/Pages/MainQuizFunctionality/QuestionsFunctionality.jsx"],"sourcesContent":["\n// import React, { useState, useEffect } from \"react\";\n// import { Link, useParams, useNavigate } from \"react-router-dom\";\n// import PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\n// import \"../Paper/Paper.css\";\n// import ButtonsFunctionality from \"./ButtonsFunctionality\";\n// import TestResultsPage from \"./TestResultsPage\";\n\n\n\n\n// const QuestionsFunctionality = ({ answeredQuestions }) => {\n\n//     const [selectedSubject, setSelectedSubject] = useState(null);\n\n//     const handleSubjectSelect = (subject) => {\n//         // Set the selected subject when a subject button is clicked\n//         setSelectedSubject(subject);\n//     };\n\n//     const [questionData, setQuestionData] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//     const [Subjects, setSubjects] = useState([]);\n//     const { testCreationTableId, subjectId } = useParams();\n//     const [sections, setSections] = useState([]);\n\n\n//     const [questionStatus, setQuestionStatus] = useState(\n//         Array(questionData.length).fill(\"notAnswered\")\n//     );\n\n//     const [answeredCount, setAnsweredCount] = useState(0);\n//     const [notAnsweredCount, setNotAnsweredCount] = useState(0);\n//     const [answeredmarkedForReviewCount, setAnsweredmarkedForReviewCount] =\n//         useState(0);\n//     const [markedForReviewCount, setMarkedForReviewCount] = useState(0);\n//     const [VisitedCount, setVisitedCount] = useState(0);\n\n\n//     const updateCounters = () => {\n//         let answered = 0;\n//         let notAnswered = 0;\n//         let marked = 0;\n//         let markedForReview = 0;\n//         let Visited = 0;\n\n//         questionStatus.forEach((status) => {\n//             if (status === \"answered\") {\n//                 answered++;\n//             } else if (status === \"notAnswered\") {\n//                 notAnswered++;\n//             } else if (status === \"marked\") {\n//                 marked++;\n//             } else if (status === \"Answered but marked for review\") {\n//                 markedForReview++;\n//             } else if (status === \"notVisited\") {\n//                 Visited++;\n//             }\n//         });\n\n//         setAnsweredCount(answered);\n//         setNotAnsweredCount(notAnswered);\n//         setAnsweredmarkedForReviewCount(marked);\n//         setMarkedForReviewCount(markedForReview);\n//         setVisitedCount(Visited);\n//     };\n\n\n//     // ---------------------------------Timer code Start--------------------------------\n//     const [timer, setTimer] = useState(0);\n//     const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\n\n//     const formatTime = (seconds) => {\n//         const hours = Math.floor(seconds / 3600);\n\n//         const minutes = Math.floor((seconds % 3600) / 60);\n\n//         const remainingSeconds = seconds % 60;\n\n//         return `${hours > 9 ? hours : \"0\" + hours}:${minutes > 9 ? minutes : \"0\" + minutes\n//             }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n//     };\n\n//     useEffect(() => {\n//         // Set the timer to the saved value for the current question\n//         setTimer(timers[currentQuestionIndex] || 0);\n//         let interval;\n//         interval = setInterval(() => {\n//             setTimer((prevTimer) => prevTimer + 1);\n//         }, 1000);\n//         // Clear the interval when the component unmounts or when the user moves to the next question\n//         return () => {\n//             clearInterval(interval);\n//         };\n//     }, [currentQuestionIndex, timers]);\n//     // ------------------------------------Timer code end--------------------------------\n\n\n//     useEffect(() => {\n//         const fetchSubjects = async () => {\n//             try {\n//                 const response = await fetch(\n//                     `http://localhost:4009/subjects/${testCreationTableId}`\n//                 );\n//                 const data = await response.json();\n//                 setSubjects(data);\n//             } catch (error) {\n//                 console.error(error);\n//             }\n//         };\n\n\n\n\n//         const fetchSections = async () => {\n//             try {\n//                 const response = await fetch(\n//                     `http://localhost:4009/fetchSections/${testCreationTableId}`\n//                 );\n//                 const data = await response.json();\n//                 setSections(data);\n//             } catch (error) {\n//                 console.error(error);\n//             }\n//         };\n\n\n\n\n\n\n//         const fetchQuestionData = async () => {\n//             try {\n//                 const response = await fetch(\n//                     `http://localhost:4009/getPaperData/${testCreationTableId}`\n//                 );\n//                 const data = await response.json();\n\n//                 // Check if the data has both 'questions' and 'options' properties\n//                 if (data && data.questions && data.options) {\n//                     // Assuming both questions and options are arrays, you might want to merge them\n//                     const mergedData = data.questions.map((question, index) => ({\n//                         ...question,\n//                         options: data.options.slice(index * 4, (index + 1) * 4), // Assuming 4 options per question\n//                     }));\n\n//                     setQuestionData(mergedData);\n//                     setQuestionStatus([\n//                         \"notAnswered\",\n//                         ...Array(mergedData.length - 1).fill(\"notVisited\"),\n//                     ]);\n//                 } else {\n//                     console.error(\"API response does not have expected structure:\", data);\n//                 }\n//             } catch (error) {\n//                 console.error(error);\n//             }\n//         };\n\n\n//         fetchSubjects();\n//         fetchSections();\n//         fetchQuestionData();\n//     }, [testCreationTableId]);\n\n\n//     useEffect(() => {\n//         // Call the updateCounters function initially when the component mounts\n//         updateCounters();\n//     }, [questionStatus]);\n\n\n\n//     const [selectedAnswers, setSelectedAnswers] = useState(\n//         Array(questionData.length).fill(\"\")\n//     );\n\n\n\n\n\n\n//     const onAnswerSelected = (OptionLetter) => {\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//         setSelectedAnswers(updatedSelectedAnswers);\n\n//     };\n\n//     const [activeQuestion, setActiveQuestion] = useState(0);\n\n\n//     const markForReview = () => {\n//         // Update questionStatus for the marked question\n//         const updatedQuestionStatus = [...questionStatus];\n//         if (selectedAnswers[activeQuestion]) {\n//             updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n//             if (selectedAnswers[activeQuestion] === \"Answered but marked for review\") {\n//                 updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n//             }\n//         } else if (!selectedAnswers[activeQuestion]) {\n//             updatedQuestionStatus[activeQuestion] = \"marked\";\n//         }\n\n//         setQuestionStatus(updatedQuestionStatus);\n//     };\n\n\n\n\n\n//     const clearResponse = () => {\n//         // Clear the selected answer\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[currentQuestionIndex] = \"\";\n//         setSelectedAnswers(updatedSelectedAnswers);\n    \n//         // Update the question status to \"notAnswered\"\n//         setQuestionStatus((prevQuestionStatus) => {\n//             const currentStatus = prevQuestionStatus[currentQuestionIndex];\n//             if (currentStatus === \"answered\") {\n//                 return [\n//                     ...prevQuestionStatus.slice(0, currentQuestionIndex),\n//                     \"notAnswered\",\n//                     ...prevQuestionStatus.slice(currentQuestionIndex + 1),\n//                 ];\n//             }\n//             return prevQuestionStatus;\n//         });\n//     };\n\n\n//     const goToPreviousQuestion = () => {\n//         setCurrentQuestionIndex((prevIndex) => {\n//             // Save the current timer value for the question\n//             const updatedTimers = [...timers];\n//             updatedTimers[prevIndex] = timer;\n//             setTimers(updatedTimers);\n//             // Move to the previous question\n//             return prevIndex - 1;\n//         });\n\n//         setActiveQuestion((prevActiveQuestion) => prevActiveQuestion - 1);\n//     };\n\n\n//     const handleNextClick = () => {\n\n\n//         setCurrentQuestionIndex((prevIndex) => {\n//             // Save the current timer value for the question\n\n//             const updatedTimers = [...timers];\n\n//             updatedTimers[prevIndex] = timer;\n\n//             setTimers(updatedTimers);\n//             return prevIndex + 1;\n//         });\n\n//         const updatedQuestionStatus = [...questionStatus];\n\n//         if (activeQuestion < questionData.length - 1) {\n//             // Check the status of the next question\n//             const nextQuestionStatus = questionStatus[activeQuestion + 1];\n\n//             if (nextQuestionStatus === \"answered\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"answered\";\n//             } else if (nextQuestionStatus === \"notAnswered\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n//             } else if (!markForReview() === false) {\n//                 markForReview();\n//             }\n\n//             setActiveQuestion((prevActiveQuestion) => prevActiveQuestion + 1);\n//         }\n\n//         updateCounters();\n\n\n\n//         // Set status of the next question (if any) to \"notAnswered\"\n\n//         if (activeQuestion < questionData.length - 1) {\n//             const updatedQuestionStatus = [...questionStatus];\n//             const nextQuestionStatus = questionStatus[activeQuestion + 1];\n\n//             if (nextQuestionStatus === \"notVisited\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n//             }\n\n//             if (selectedAnswers[activeQuestion] === \"answered\") {\n//                 updatedQuestionStatus[activeQuestion] = \"answered\";\n//             } else if (markForReview() === true) {\n//                 updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n//             } else if (markForReview() === false) {\n//                 updatedQuestionStatus[activeQuestion] = \"marked\";\n//             }\n\n//             if (nextQuestionStatus === \"notAnswered\") {\n//                 updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n//             }\n\n//             setQuestionStatus(updatedQuestionStatus);\n//         }\n\n\n\n//             // Update the question status to \"answered\" only if an answer has been selected\n//     if (selectedAnswers[activeQuestion]) {\n//         setQuestionStatus((prevQuestionStatus) => {\n//             const currentStatus = prevQuestionStatus[activeQuestion];\n//             if (currentStatus === \"notAnswered\") {\n//                 return [\n//                     ...prevQuestionStatus.slice(0, activeQuestion),\n//                     \"answered\",\n//                     ...prevQuestionStatus.slice(activeQuestion + 1),\n//                 ];\n//             }\n//             return prevQuestionStatus;\n//         });\n//     }\n\n//     };\n\n\n//     const [accuracy, setAccuracy] = useState(0);\n//     const [averageScore, setAverageScore] = useState(0);\n//     const [topScore, setTopScore] = useState(0);\n//     const [liveRank, setLiveRank] = useState(0);\n\n//     const calculateQuestionCounts = () => {\n//         let answered = 0;\n//         let notAnswered = 0;\n//         let markedForReview = 0;\n//         let answeredmarkedForReviewCount = 0;\n//         let VisitedCount = 0;\n\n//         questionStatus.forEach((status, index) => {\n//             if (status === \"answered\") {\n//                 answered++;\n//             } else if (status === \"notAnswered\") {\n//                 notAnswered++;\n//             } else if (status === \"marked\") {\n//                 markedForReview++;\n//             } else if (status === \"Answered but marked for review\") {\n//                 answeredmarkedForReviewCount++;\n//             } else if (status === \"notVisited\") {\n//                 VisitedCount++;\n//             }\n//         });\n\n//         return {\n//             answered,\n//             notAnswered,\n//             markedForReview,\n//             answeredmarkedForReviewCount,\n//             VisitedCount,\n//         };\n//     };\n\n\n//     const [showResult, setShowResult] = useState(false);\n//     const navigate = useNavigate();\n    \n\n//     const handleSubmit = () => {\n//         window.alert(\"Your Test has been Submitted!! Click Ok to See Result.\");\n\n\n\n//         // Call the function to get question counts\n//         const {\n//             answered,\n//             notAnswered,\n//             markedForReview,\n//             answeredmarkedForReviewCount,\n//             VisitedCount,\n//         } = calculateQuestionCounts();\n\n\n//         // Add any additional logic you need for submitting the exam\n//         // For example, you might want to send this data to the server.\n//          // Redirect to the result page\n//          navigate(\"/result\", {\n//             state: {\n//               answeredCount: answered,\n//               notAnsweredCount: notAnswered,\n//               markedForReviewCount: markedForReview,\n//               answeredmarkedForReviewCount: answeredmarkedForReviewCount,\n//               VisitedCount: VisitedCount,\n//             },\n//         });\n//     };\n\n\n\n//     const handleQuestionSelect = (questionNumber) => {\n//         setCurrentQuestionIndex(questionNumber - 1);\n//         setActiveQuestion(questionNumber - 1);\n//     };\n\n\n\n\n\n\n\n//     return (\n\n//         <div className=\"Main-Page\">\n//            {showResult ? (\n//         // Render the ResultPage component here\n//         <TestResultsPage\n//           answeredCount={answeredCount}\n//           notAnsweredCount={notAnsweredCount}\n//           markedForReviewCount={markedForReviewCount}\n//           answeredmarkedForReviewCount={answeredmarkedForReviewCount}\n//           VisitedCount={VisitedCount}\n//         />\n//       ) : (\n//         <div>\n//         <div>\n//             <PaperHeader />\n//         </div>\n//         <div className=\"QUESTIONS_CONTAINER\">\n//             <div className=\"QUESTIONS_CONTAINER_subpart\">\n//             <div className=\"subjects\">\n//             {Subjects.map((subjectTitle, index) => (\n//                 <li key={index}>\n//                     <Link ><button className=\"subject-btn\" onClick={() => handleSubjectSelect(subjectTitle.subjectName)}>{subjectTitle.subjectName}</button></Link>\n//                     {/* <button className=\"subject-btn\">{subjectTitle.subjectName}</button> */}\n//                 </li>\n//             ))}\n\n//         </div>\n\n\n//         <div className=\"second-header\">\n//             <div className=\"single-select-question\">\n//                 {sections.map((sectionTitle, index) => (\n//                     <li key={index}>\n//                         <p>{sectionTitle.sectionName}</p>\n\n//                     </li>\n//                 ))}\n//                 {/* Single Select Question */}\n//             </div>\n//             <div className=\"right-header\">\n//                 <div className=\"marks\">\n//                     Marks: <div className=\"plus-mark\">+1</div>\n//                     <div className=\"minus-mark\">-1</div>\n//                 </div>\n//                 <div>Timer: {formatTime(timer)}</div>\n//             </div>\n//         </div>\n\n\n//         <div className=\"Question_No_heading\">\n//             <p>  Question No. {currentQuestionIndex + 1}  of {questionData.length}</p>\n//         </div>\n\n    \n//         <div  className=\"_quizexampart \">\n// {questionData.length > 0 && (\n//             <div className=\"quizexampart_q_O_container\">\n//                 <h4>\n//                     {/* {currentQuestionIndex + 1}. */}\n\n//                     <img\n//                         src={`data:image/png;base64,${questionData[currentQuestionIndex].question_img}`}\n//                         alt={`Question ${currentQuestionIndex + 1}`}\n//                     />\n//                 </h4>\n\n//                 {questionData[currentQuestionIndex].options.map(\n//                     (OptionImage, optionIndex) => (\n//                         <li key={optionIndex}>\n//                             <input\n//                                 type=\"radio\"\n//                                 name={`question-${currentQuestionIndex}-option`}\n//                                 value={optionIndex}\n//                                 checked={\n//                                     selectedAnswers[currentQuestionIndex] === optionIndex\n//                                 }\n//                                 onChange={() => onAnswerSelected(optionIndex)}\n//                             />\n//                             {OptionImage && OptionImage.option_img && (\n//                                 <img\n//                                     key={OptionImage.question_id}\n//                                     src={`data:image/png;base64,${OptionImage.option_img}`}\n//                                     alt={`Option ${optionIndex + 1}`}\n//                                 />\n//                             )}\n//                         </li>\n//                     )\n//                 )}\n//                 <div className=\"flex-right\">\n//                     <button className=\"clear-btn\" onClick={markForReview}>\n//                         Mark for Review & Next\n//                     </button>\n//                     <button className=\"clear-btn\" onClick={clearResponse}>\n//                         Clear Response\n//                     </button>\n//                     <button\n//                         className=\"previous-btn\"\n//                         onClick={goToPreviousQuestion}\n//                         disabled={currentQuestionIndex === 0}\n//                     >\n//                         <i className=\"fa-solid fa-angles-left\"></i> Previous\n//                     </button>\n//                     <button className=\"save-btn\" onClick={handleNextClick}>\n//                         Next <i className=\"fa-solid fa-angles-right\"></i>\n//                     </button>\n//                 </div>\n//             </div>\n//         )}\n// </div>\n//             </div>\n\n\n// <div className=\"rightsidebar\">\n//                 <ButtonsFunctionality\n//                     onQuestionSelect={handleQuestionSelect}\n//                     questionStatus={questionStatus}\n//                     setQuestionStatus={setQuestionStatus}\n//                     answeredCount={answeredCount}\n//                     notAnsweredCount={notAnsweredCount}\n//                     answeredmarkedForReviewCount={answeredmarkedForReviewCount}\n//                     markedForReviewCount={markedForReviewCount}\n//                     VisitedCount={VisitedCount}\n//                     selectedSubject={selectedSubject}\n//                     questionData={questionData}\n//                 />\n//                 <button onClick={handleSubmit} id=\"resume_btn\">\n//                     Submit\n//                 </button>\n//             </div>\n\n//         </div>\n     \n       \n      \n      \n\n//     </div>\n//       )}\n            \n\n\n\n//         </div>\n//     )\n// }\n\n// export default QuestionsFunctionality\n\n\n\n\nimport React from 'react'\n\nconst QuestionsFunctionality = () => {\n\n\n\n\n    \n    return (\n        <div>\n          <div className=\"subjects\">\n            {Subjects.map((subjectTitle) => (\n              <li key={subjectTitle.subjectId}>\n                <Link\n                  to=\"#\"\n                  onClick={() => handleSubjectsClick(subjectTitle.subjectId)}\n                  className=\"subject-btn\"\n                >\n                  {/* {subjectTitle.subjectId[0]} */}\n                  {subjectTitle.subjectName}\n                </Link>\n              </li>\n            ))}\n          </div>\n          <div className=\"second-header\">\n            <div className=\"single-select-question\">\n              {sections.map((sectionTitle, index) => (\n                <li key={index}>\n                  <p>{sectionTitle.sectionName}</p>\n                </li>\n              ))}\n              {/* Single Select Question */}\n            </div>\n            <div className=\"right-header\">\n              <div className=\"marks\">\n                Marks: <div className=\"plus-mark\">+1</div>\n                <div className=\"minus-mark\">-1</div>\n              </div>\n              <div>Timer: {formatTime(timer)}</div>\n            </div>\n          </div>\n     \n          {data !== null && data.questions.length > 0 ? (\n            <div>\n              <div className=\"question\">\n                {/* Render the current question based on currentQuestionIndex */}\n                <h3>{currentQuestionIndex + 1}.</h3>\n                <img\n                  src={`data:image/png;base64,${data.questions[currentQuestionIndex].question_img}`}\n                  alt=\"Question\"\n                />\n              </div>\n     \n              {/* Map over options for the current question and render them */}\n              {data.options\n                .filter(\n                  (opt) =>\n                    opt.question_id ===\n                    data.questions[currentQuestionIndex].question_id\n                )\n                .map((option, optionIndex) => (\n                  <div className=\"option\" key={option.option_id}>\n                    <li key={optionIndex}>\n                      <input\n                        type=\"radio\"\n                        name={`question-${currentQuestionIndex}-option`}\n                        value={optionIndex}\n                        checked={\n                          selectedAnswers[currentQuestionIndex] === optionIndex\n                        }\n                        // onChange={() => onAnswerSelected(subjectIndex, optionIndex)}\n                        onChange={() => onAnswerSelected(optionIndex)}\n                      />\n                      <img\n                        src={`data:image/png;base64,${option.option_img}`}\n                        alt=\"Option\"\n                      />\n                    </li>\n                  </div>\n                ))}\n     \n              <div>\n                <button\n                  className=\"previous-btn\"\n                  onClick={handlePreviousClick}\n                  disabled={currentQuestionIndex === 0}\n                >\n                  <i className=\"fa-solid fa-angles-left\"></i> Previous\n                </button>\n                <button className=\"save-btn\" onClick={handleNextClick}>\n                  Next <i className=\"fa-solid fa-angles-right\"></i>\n                </button>\n              </div>\n            </div>\n          ) : (\n            <p>Loading data...</p>\n          )}\n        </div>\n      );\n}\n\nexport default QuestionsFunctionality"],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAOA;AACA;AACA;AACA;;AAEA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAMA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;;AAGA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAIA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAGA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAQA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;;AAKA;AACA;AACA;;AAEA;;AAKA,OAAOA,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,sBAAsB,GAAGA,CAAA,KAAM;EAMjC,oBACID,OAAA;IAAAE,QAAA,gBACEF,OAAA;MAAKG,SAAS,EAAC,UAAU;MAAAD,QAAA,EACtBE,QAAQ,CAACC,GAAG,CAAEC,YAAY,iBACzBN,OAAA;QAAAE,QAAA,e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"},"metadata":{},"sourceType":"module","externalDependencies":[]}