{"ast":null,"code":"var _jsxFileName = \"D:\\\\web projects files\\\\Current_egate_Quiz_project\\\\src\\\\Pages\\\\Paper\\\\Paper1.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// // import { useParams } from \"react-router-dom\";\n\n// const Paper1 = () => {\n//   // const { subi_id } = useParams();\n//   //     const [quizData, setQuizData] = useState([]);\n\n//   // console.log(quizData)\n//   // useEffect(() => {\n//   //   // Fetch data from the endpoint\n//   //   fetch(`http://localhost:10000/quiz_all/`+subi_id)\n\n//   //     .then((response) => response.json())\n//   //     .then((data) => setQuizData(data))\n//   //     .catch((error) => console.error('Error fetching data:', error));\n//   // }, [subi_id]);\n\n//   const [subjectNames, setSubjectNames] = useState([]);\n\n//   useEffect(() => {\n//     fetch(`http://localhost:4009/quiz_all/1`)\n//       .then((response) => response.json())\n//       .then((data) => {\n//         console.log(data); // Log the data received from the API\n//         setSubjectNames(data);\n//       })\n//       .catch((error) => console.error(\"Error fetching data:\", error));\n//   }, []);\n\n//   // const [answer, setAnswer] = useState([]);\n//   // useEffect(() => {\n//   //   // Fetch data from the endpoint\n//   //   fetch(`http://localhost:4009/answers/`)\n//   //     .then((response) => response.json())\n//   //     .then((data) => setAnswer(data))\n//   //     .catch((error) => console.error(\"Error fetching data:\", error));\n//   // }, []);\n\n//   return (\n//     <div>\n//       <h1>hii</h1>\n\n//       <div>\n//         {Array.isArray(subjectNames) && subjectNames.length > 0 ? (\n//           <div>\n//             {subjectNames.map((subjects) => (\n//               <li key={subjects.subi_id}>\n//                 <p>{subjects.subject_name}</p>\n//               </li>\n//             ))}\n//           </div>\n//         ) : (\n//           <p>No subjects available.</p>\n//         )}\n//         {/* <ul>\n//            {subjectNames.map((item) => (\n//           <li key={item.subi_id}>\n//             <p>{item.subject_name}</p>\n//           </li>\n//         ))}\n//         </ul> */}\n\n//         {/* <button>Mathematics</button>\n//                 <button>Physics</button>\n//                 <button>Chemistry</button> */}\n//       </div>\n\n//       {/* answers display */}\n//       {/* <div>\n//       {answer.map((ans) => (\n//           <li key={ans.subi_id}>\n//             <p>{ans.answer}</p>\n//           </li>\n//         ))}\n//       </div> */}\n\n//       {/* <h1>Quiz Questions</h1> */}\n//       <div>\n//         {/* {quizData.map((question) => (\n//           <div key={question.question_id}>\n//             <h3>Question {question.question_id}</h3>\n//             <img\n//               src={`data:image/png;base64,${question.question_img}`}\n//               alt={`Question ${question.question_id}`}\n//             />\n//             <ul>\n//               {question.options.map((option) => (\n//                 <li key={option.option_id}>\n//                   <img\n//                     src={`data:image/png;base64,${option.option_img}`}\n//                     alt={`Option ${option.option_id}`}\n//                   />\n//                 </li>\n//               ))}\n//             </ul>\n//           </div>\n//         ))} */}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Paper1;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Link, useParams } from \"react-router-dom\";\n// import PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\n// import \"./Paper.css\";\n// const Paper1 = () => {\n//   const [questionData, setQuestionData] = useState([]);\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//   const [Subjects, setSubjects] = useState([]);\n//   const { testCreationTableId, subjectId } = useParams();\n//   const [sections, setSections] = useState([]);\n\n//   useEffect(() => {\n//     const fetchSubjects = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/subjects/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setSubjects(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchSubjects();\n//   }, [testCreationTableId]);\n\n//   useEffect(() => {\n//     const fetchSections = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/fetchSections/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setSections(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchSections();\n//   }, [testCreationTableId]);\n\n//   useEffect(() => {\n//     const fetchQuestionData = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/getPaperData/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setQuestionData(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchQuestionData();\n//   }, [testCreationTableId]);\n\n//   const [selectedAnswers, setSelectedAnswers] = useState(\n//     Array(questionData.length).fill(\"\")\n//   );\n\n//   const handleNextClick = () => {\n//     // Update the current question index to move to the next question\n//     setCurrentQuestionIndex((prevIndex) =>\n//       prevIndex < questionData.length - 1 ? prevIndex + 1 : prevIndex\n//     );\n//   };\n\n//   const onAnswerSelected = (optionIndex) => {\n//     const updatedSelectedAnswers = [...selectedAnswers];\n//     updatedSelectedAnswers[currentQuestionIndex] = optionIndex;\n//     setSelectedAnswers(updatedSelectedAnswers);\n//   };\n\n//   const [activeQuestion, setActiveQuestion] = useState(0);\n//   const clearResponse = () => {\n//     const updatedSelectedAnswers = [...selectedAnswers];\n//     updatedSelectedAnswers[activeQuestion] = \"\";\n//     setSelectedAnswers(updatedSelectedAnswers);\n//   };\n\n//   const goToPreviousQuestion = () => {\n//     setCurrentQuestionIndex((prevIndex) => {\n//       // Save the current timer value for the question\n\n//       const updatedTimers = [...timers];\n\n//       updatedTimers[prevIndex] = timer;\n\n//       setTimers(updatedTimers);\n\n//       // Move to the previous question\n\n//       return prevIndex - 1;\n//     });\n\n//     if (questionData > 0) {\n//       setActiveQuestion(questionData - 1);\n//     }\n//   };\n\n//   // ---------------------------------Timer code Start--------------------------------\n//   const [timer, setTimer] = useState(0);\n//   const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\n\n//   const formatTime = (seconds) => {\n//     const hours = Math.floor(seconds / 3600);\n\n//     const minutes = Math.floor((seconds % 3600) / 60);\n\n//     const remainingSeconds = seconds % 60;\n\n//     return `${hours > 9 ? hours : \"0\" + hours}:${\n//       minutes > 9 ? minutes : \"0\" + minutes\n//     }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n//   };\n\n//   useEffect(() => {\n//     // Set the timer to the saved value for the current question\n//     setTimer(timers[currentQuestionIndex] || 0);\n//     let interval;\n//     interval = setInterval(() => {\n//       setTimer((prevTimer) => prevTimer + 1);\n//     }, 1000);\n//     // Clear the interval when the component unmounts or when the user moves to the next question\n//     return () => {\n//       clearInterval(interval);\n//     };\n//   }, [currentQuestionIndex, timers]);\n//   // ------------------------------------Timer code end--------------------------------\n\n//   return (\n//     <div>\n//       <div>\n//         <PaperHeader />\n//       </div>\n//       <div className=\"subjects\">\n//         {Subjects.map((subjectTitle, index) => (\n//           <li key={index}>\n//             <button className=\"subject-btn\">{subjectTitle.subjectName}</button>\n//           </li>\n//         ))}\n//       </div>\n//       <div className=\"second-header\">\n//         <div className=\"single-select-question\">\n//           {sections.map((sectionTitle,index)=>(\n//             <li key={index}>\n//               <p>{sectionTitle.sectionName}</p>\n//             </li>\n//           ))}\n//           {/* Single Select Question */}\n//         </div>\n//         <div className=\"right-header\">\n//           <div className=\"marks\">\n//             Marks: <div className=\"plus-mark\">+1</div>\n//             <div className=\"minus-mark\">-1</div>\n//           </div>\n//           <div>Timer: {formatTime(timer)}</div>\n//         </div>\n//       </div>\n//       {questionData.length > 0 && (\n//         <div>\n//           <h4>\n//             {currentQuestionIndex + 1}.\n//             <img\n//               src={questionData[currentQuestionIndex].question_img}\n//               alt={`Question ${currentQuestionIndex + 1}`}\n//             />\n//           </h4>\n\n//           {questionData[currentQuestionIndex].optionImages.map(\n//             (OptionImage, optionIndex) => (\n//               <li key={optionIndex}>\n//                 <input\n//                   type=\"radio\"\n//                   name={`question-${currentQuestionIndex}-option`}\n//                   value={optionIndex}\n//                   checked={\n//                     selectedAnswers[currentQuestionIndex] === optionIndex\n//                   }\n//                   onChange={() => onAnswerSelected(optionIndex)}\n//                 />\n//                 <img\n//                   key={optionIndex}\n//                   src={OptionImage.option_img}\n//                   alt={`Option ${optionIndex + 1}`}\n//                 />\n//               </li>\n//             )\n//           )}\n//           <div className=\"flex-right\">\n//             <button className=\"clear-btn\" onClick={clearResponse}>\n//               Clear Response\n//             </button>\n//             <button\n//               className=\"previous-btn\"\n//               onClick={goToPreviousQuestion}\n//               disabled={questionData === 0}\n//             >\n//               <i className=\"fa-solid fa-angles-left\"></i> Previous\n//             </button>\n//             <button className=\"save-btn\" onClick={handleNextClick}>\n//               Next <i className=\"fa-solid fa-angles-right\"></i>\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Paper1;\n\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const Paper1 = () => {\n//   const [sections, setSections] = useState([]);\n//   const { testCreationTableId } = useParams();\n\n//   useEffect(() => {\n//     const fetchSections = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:4009/quiz_all/${testCreationTableId}`);\n\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! Status: ${response.status}`);\n//         }\n\n//         const data = await response.json();\n//         console.log('Received data:', data);\n//         setSections(data);\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//       }\n//     };\n\n//     fetchSections();\n//   }, [testCreationTableId]); // Use testCreationTableId as a dependency to trigger fetch when it changes\n\n//   return (\n//     <div>\n//       {Object.values(sections).map((section) => (\n//         <div key={section.sectionId}>\n//           <h2>{section.sectionName}</h2>\n//           {section.questions.map((question) => (\n//             <div key={question.qustion_id}>\n//               {/* Display question image */}\n//               <img src={`data:image/png;base64,${question.question_img}`} alt={`Question ${question.qustion_id}`} />\n\n//               {/* Display option images */}\n//               <ul>\n//                 {question.option_img.map((option, index) => (\n//                   <li key={index}>\n//                     <img src={`data:image/png;base64,${option.option_img}`} alt={`Option ${option.Option_Index}`} />\n//                   </li>\n//                 ))}\n//               </ul>\n//             </div>\n//           ))}\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default Paper1;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Link, useParams } from \"react-router-dom\";\n// import PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\n// import \"./Paper.css\";\n// const Paper1 = () => {\n//   const [questionData, setQuestionData] = useState([]);\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//   const [Subjects, setSubjects] = useState([]);\n//   const { testCreationTableId, subjectId } = useParams();\n//   const [sections, setSections] = useState([]);\n\n//   useEffect(() => {\n//     const fetchSubjects = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/subjects/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setSubjects(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchSubjects();\n//   }, [testCreationTableId]);\n\n//   useEffect(() => {\n//     const fetchSections = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/fetchSections/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setSections(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchSections();\n//   }, [testCreationTableId]);\n\n//   useEffect(() => {\n//     const fetchQuestionData = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/getPaperData/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setQuestionData(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchQuestionData();\n//   }, [testCreationTableId]);\n\n//   const [selectedAnswers, setSelectedAnswers] = useState(\n//     Array(questionData.length).fill(\"\")\n//   );\n\n//   const handleNextClick = () => {\n//     // Update the current question index to move to the next question\n//     setCurrentQuestionIndex((prevIndex) =>\n//       prevIndex < questionData.length - 1 ? prevIndex + 1 : prevIndex\n//     );\n//   };\n\n//   const onAnswerSelected = (optionIndex) => {\n//     const updatedSelectedAnswers = [...selectedAnswers];\n//     updatedSelectedAnswers[currentQuestionIndex] = optionIndex;\n//     setSelectedAnswers(updatedSelectedAnswers);\n//   };\n\n//   const [activeQuestion, setActiveQuestion] = useState(0);\n//   const clearResponse = () => {\n//     const updatedSelectedAnswers = [...selectedAnswers];\n//     updatedSelectedAnswers[activeQuestion] = \"\";\n//     setSelectedAnswers(updatedSelectedAnswers);\n//   };\n\n//   const goToPreviousQuestion = () => {\n//     setCurrentQuestionIndex((prevIndex) => {\n//       // Save the current timer value for the question\n\n//       const updatedTimers = [...timers];\n\n//       updatedTimers[prevIndex] = timer;\n\n//       setTimers(updatedTimers);\n\n//       // Move to the previous question\n\n//       return prevIndex - 1;\n//     });\n\n//     if (questionData > 0) {\n//       setActiveQuestion(questionData - 1);\n//     }\n//   };\n\n//   // ---------------------------------Timer code Start--------------------------------\n//   const [timer, setTimer] = useState(0);\n//   const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\n\n//   const formatTime = (seconds) => {\n//     const hours = Math.floor(seconds / 3600);\n\n//     const minutes = Math.floor((seconds % 3600) / 60);\n\n//     const remainingSeconds = seconds % 60;\n\n//     return `${hours > 9 ? hours : \"0\" + hours}:${\n//       minutes > 9 ? minutes : \"0\" + minutes\n//     }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n//   };\n\n//   useEffect(() => {\n//     // Set the timer to the saved value for the current question\n//     setTimer(timers[currentQuestionIndex] || 0);\n//     let interval;\n//     interval = setInterval(() => {\n//       setTimer((prevTimer) => prevTimer + 1);\n//     }, 1000);\n//     // Clear the interval when the component unmounts or when the user moves to the next question\n//     return () => {\n//       clearInterval(interval);\n//     };\n//   }, [currentQuestionIndex, timers]);\n//   // ------------------------------------Timer code end--------------------------------\n\n//   return (\n//     <div>\n//       <div>\n//         <PaperHeader />\n//       </div>\n//       <div className=\"subjects\">\n//         {Subjects.map((subjectTitle, index) => (\n//           <li key={index}>\n//             <button className=\"subject-btn\">{subjectTitle.subjectName}</button>\n//           </li>\n//         ))}\n//       </div>\n//       <div className=\"second-header\">\n//         <div className=\"single-select-question\">\n//           {sections.map((sectionTitle,index)=>(\n//             <li key={index}>\n//               <p>{sectionTitle.sectionName}</p>\n//             </li>\n//           ))}\n//           {/* Single Select Question */}\n//         </div>\n//         <div className=\"right-header\">\n//           <div className=\"marks\">\n//             Marks: <div className=\"plus-mark\">+1</div>\n//             <div className=\"minus-mark\">-1</div>\n//           </div>\n//           <div>Timer: {formatTime(timer)}</div>\n//         </div>\n//       </div>\n//       {questionData.length > 0 && (\n//         <div>\n//           <h4>\n//             {currentQuestionIndex + 1}.\n//             <img\n//               src={questionData[currentQuestionIndex].question_img}\n//               alt={`Question ${currentQuestionIndex + 1}`}\n//             />\n//           </h4>\n\n//           {questionData[currentQuestionIndex].optionImages.map(\n//             (OptionImage, optionIndex) => (\n//               <li key={optionIndex}>\n//                 <input\n//                   type=\"radio\"\n//                   name={`question-${currentQuestionIndex}-option`}\n//                   value={optionIndex}\n//                   checked={\n//                     selectedAnswers[currentQuestionIndex] === optionIndex\n//                   }\n//                   onChange={() => onAnswerSelected(optionIndex)}\n//                 />\n//                 <img\n//                   key={optionIndex}\n//                   src={OptionImage.option_img}\n//                   alt={`Option ${optionIndex + 1}`}\n//                 />\n//               </li>\n//             )\n//           )}\n//           <div className=\"flex-right\">\n//             <button className=\"clear-btn\" onClick={clearResponse}>\n//               Clear Response\n//             </button>\n//             <button\n//               className=\"previous-btn\"\n//               onClick={goToPreviousQuestion}\n//               disabled={questionData === 0}\n//             >\n//               <i className=\"fa-solid fa-angles-left\"></i> Previous\n//             </button>\n//             <button className=\"save-btn\" onClick={handleNextClick}>\n//               Next <i className=\"fa-solid fa-angles-right\"></i>\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Paper1;\n\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const Paper1 = () => {\n//   const [sections, setSections] = useState([]);\n//   const { testCreationTableId } = useParams();\n\n//   useEffect(() => {\n//     const fetchSections = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:4009/quiz_all/${testCreationTableId}`);\n\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! Status: ${response.status}`);\n//         }\n\n//         const data = await response.json();\n//         console.log('Received data:', data);\n//         setSections(data);\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//       }\n//     };\n\n//     fetchSections();\n//   }, [testCreationTableId]); // Use testCreationTableId as a dependency to trigger fetch when it changes\n\n//   return (\n//     <div>\n//       {Object.values(sections).map((section) => (\n//         <div key={section.sectionId}>\n//           <h2>{section.sectionName}</h2>\n//           {section.questions.map((question) => (\n//             <div key={question.qustion_id}>\n//               {/* Display question image */}\n//               <img src={`data:image/png;base64,${question.question_img}`} alt={`Question ${question.qustion_id}`} />\n\n//               {/* Display option images */}\n//               <ul>\n//                 {question.option_img.map((option, index) => (\n//                   <li key={index}>\n//                     <img src={`data:image/png;base64,${option.option_img}`} alt={`Option ${option.Option_Index}`} />\n//                   </li>\n//                 ))}\n//               </ul>\n//             </div>\n//           ))}\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default Paper1;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n\n// function Paper1() {\n\n//   const [questionData, setQuestionData] = useState([]);\n//   const {testCreationTableId} = useParams();\n\n//   useEffect(() => {\n//     const fetchQuestionData = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/getPaperData/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setQuestionData(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchQuestionData();\n//   }, [testCreationTableId]);\n\n//   return (\n//     <div>\n//       {/* Access data as needed, for example: */}\n\n//       {/* Map over questions and render them */}\n//       <div\n//         className=\"q1s\"\n//         style={{\n//           display: \"flex\",\n//           gap: \"4rem\",\n//           flexDirection: \"column\",\n//           width: \"85vw\",\n//           margin: \"2rem\",\n//         }}\n//       >\n//         {questionData.map((question, index) => (\n//           <div\n//             className=\"outColor\"\n//             style={{ background: \"#e5e5e5\", padding: \"2rem 2rem\" }}\n//           >\n//             <div key={question.question_id}>\n//               <div className=\"question\" key={index}>\n//                 <h3>{index + 1}</h3>\n//                 <img\n//                   src={`data:image/png;base64,${question.question_img}`}\n//                   alt=\"Question\"\n//                 />\n//               </div>\n\n//               {/* Map over options and render them */}\n//               {questionData\n//                 .filter((opt) => opt.question_id === question.question_id)\n//                 .map((option) => (\n\n//                     <img\n//                       key={option.question_id}\n//                       src={`data:image/png;base64,${option.option_img}`}\n//                       alt=\"Option\"\n//                     />\n\n//                 ))}\n\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Paper1;\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Paper1() {\n  _s();\n  const [questionData, setQuestionData] = useState([]);\n  const {\n    testCreationTableId\n  } = useParams();\n\n  // useEffect(() => {\n  //   const fetchQuestionData = async () => {\n  //     try {\n  //       const response = await fetch(\n  //         `http://localhost:4009/getPaperData/${testCreationTableId}`\n  //       );\n  //       const data = await response.json();\n\n  //       // Check if the data is an array before setting state\n  //       if (Array.isArray(data)) {\n  //         setQuestionData(data);\n  //       } else {\n  //         console.error(\"API response is not an array:\", data);\n  //       }\n  //     } catch (error) {\n  //       console.error(error);\n  //     }\n  //   };\n\n  //   fetchQuestionData();\n  // }, [testCreationTableId]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"q1s\",\n      style: {\n        display: \"flex\",\n        gap: \"4rem\",\n        flexDirection: \"column\",\n        width: \"85vw\",\n        margin: \"2rem\"\n      },\n      children: questionData.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"outColor\",\n        style: {\n          background: \"#e5e5e5\",\n          padding: \"2rem 2rem\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: index + 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 791,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `data:image/png;base64,${question.question_img}`,\n            alt: \"Question\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 792,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 790,\n          columnNumber: 13\n        }, this), questionData.filter(opt => opt.question_id === question.question_id).map(option => /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `data:image/png;base64,${option.option_img}`,\n          alt: \"Option\"\n        }, option.question_id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 801,\n          columnNumber: 17\n        }, this))]\n      }, question.question_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 785,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 774,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 773,\n    columnNumber: 5\n  }, this);\n}\n_s(Paper1, \"B7SiYWDsetWNCjH2aLDrHiY+9mw=\", false, function () {\n  return [useParams];\n});\n_c = Paper1;\nexport default Paper1;\nvar _c;\n$RefreshReg$(_c, \"Paper1\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","Paper1","_s","questionData","setQuestionData","testCreationTableId","children","className","style","display","gap","flexDirection","width","margin","map","question","index","background","padding","fileName","_jsxFileName","lineNumber","columnNumber","src","question_img","alt","filter","opt","question_id","option","option_img","_c","$RefreshReg$"],"sources":["D:/web projects files/Current_egate_Quiz_project/src/Pages/Paper/Paper1.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// // import { useParams } from \"react-router-dom\";\r\n\r\n// const Paper1 = () => {\r\n//   // const { subi_id } = useParams();\r\n//   //     const [quizData, setQuizData] = useState([]);\r\n\r\n//   // console.log(quizData)\r\n//   // useEffect(() => {\r\n//   //   // Fetch data from the endpoint\r\n//   //   fetch(`http://localhost:10000/quiz_all/`+subi_id)\r\n\r\n//   //     .then((response) => response.json())\r\n//   //     .then((data) => setQuizData(data))\r\n//   //     .catch((error) => console.error('Error fetching data:', error));\r\n//   // }, [subi_id]);\r\n\r\n//   const [subjectNames, setSubjectNames] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     fetch(`http://localhost:4009/quiz_all/1`)\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         console.log(data); // Log the data received from the API\r\n//         setSubjectNames(data);\r\n//       })\r\n//       .catch((error) => console.error(\"Error fetching data:\", error));\r\n//   }, []);\r\n\r\n//   // const [answer, setAnswer] = useState([]);\r\n//   // useEffect(() => {\r\n//   //   // Fetch data from the endpoint\r\n//   //   fetch(`http://localhost:4009/answers/`)\r\n//   //     .then((response) => response.json())\r\n//   //     .then((data) => setAnswer(data))\r\n//   //     .catch((error) => console.error(\"Error fetching data:\", error));\r\n//   // }, []);\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>hii</h1>\r\n\r\n//       <div>\r\n//         {Array.isArray(subjectNames) && subjectNames.length > 0 ? (\r\n//           <div>\r\n//             {subjectNames.map((subjects) => (\r\n//               <li key={subjects.subi_id}>\r\n//                 <p>{subjects.subject_name}</p>\r\n//               </li>\r\n//             ))}\r\n//           </div>\r\n//         ) : (\r\n//           <p>No subjects available.</p>\r\n//         )}\r\n//         {/* <ul>\r\n//            {subjectNames.map((item) => (\r\n//           <li key={item.subi_id}>\r\n//             <p>{item.subject_name}</p>\r\n//           </li>\r\n//         ))}\r\n//         </ul> */}\r\n\r\n//         {/* <button>Mathematics</button>\r\n//                 <button>Physics</button>\r\n//                 <button>Chemistry</button> */}\r\n//       </div>\r\n\r\n//       {/* answers display */}\r\n//       {/* <div>\r\n//       {answer.map((ans) => (\r\n//           <li key={ans.subi_id}>\r\n//             <p>{ans.answer}</p>\r\n//           </li>\r\n//         ))}\r\n//       </div> */}\r\n\r\n//       {/* <h1>Quiz Questions</h1> */}\r\n//       <div>\r\n//         {/* {quizData.map((question) => (\r\n//           <div key={question.question_id}>\r\n//             <h3>Question {question.question_id}</h3>\r\n//             <img\r\n//               src={`data:image/png;base64,${question.question_img}`}\r\n//               alt={`Question ${question.question_id}`}\r\n//             />\r\n//             <ul>\r\n//               {question.options.map((option) => (\r\n//                 <li key={option.option_id}>\r\n//                   <img\r\n//                     src={`data:image/png;base64,${option.option_img}`}\r\n//                     alt={`Option ${option.option_id}`}\r\n//                   />\r\n//                 </li>\r\n//               ))}\r\n//             </ul>\r\n//           </div>\r\n//         ))} */}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Paper1;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { Link, useParams } from \"react-router-dom\";\r\n// import PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\r\n// import \"./Paper.css\";\r\n// const Paper1 = () => {\r\n//   const [questionData, setQuestionData] = useState([]);\r\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n//   const [Subjects, setSubjects] = useState([]);\r\n//   const { testCreationTableId, subjectId } = useParams();\r\n//   const [sections, setSections] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchSubjects = async () => {\r\n//       try {\r\n//         const response = await fetch(\r\n//           `http://localhost:4009/subjects/${testCreationTableId}`\r\n//         );\r\n//         const data = await response.json();\r\n//         setSubjects(data);\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//       }\r\n//     };\r\n\r\n//     fetchSubjects();\r\n//   }, [testCreationTableId]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchSections = async () => {\r\n//       try {\r\n//         const response = await fetch(\r\n//           `http://localhost:4009/fetchSections/${testCreationTableId}`\r\n//         );\r\n//         const data = await response.json();\r\n//         setSections(data);\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//       }\r\n//     };\r\n\r\n//     fetchSections();\r\n//   }, [testCreationTableId]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchQuestionData = async () => {\r\n//       try {\r\n//         const response = await fetch(\r\n//           `http://localhost:4009/getPaperData/${testCreationTableId}`\r\n//         );\r\n//         const data = await response.json();\r\n//         setQuestionData(data);\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//       }\r\n//     };\r\n\r\n//     fetchQuestionData();\r\n//   }, [testCreationTableId]);\r\n\r\n//   const [selectedAnswers, setSelectedAnswers] = useState(\r\n//     Array(questionData.length).fill(\"\")\r\n//   );\r\n\r\n//   const handleNextClick = () => {\r\n//     // Update the current question index to move to the next question\r\n//     setCurrentQuestionIndex((prevIndex) =>\r\n//       prevIndex < questionData.length - 1 ? prevIndex + 1 : prevIndex\r\n//     );\r\n//   };\r\n\r\n//   const onAnswerSelected = (optionIndex) => {\r\n//     const updatedSelectedAnswers = [...selectedAnswers];\r\n//     updatedSelectedAnswers[currentQuestionIndex] = optionIndex;\r\n//     setSelectedAnswers(updatedSelectedAnswers);\r\n//   };\r\n\r\n//   const [activeQuestion, setActiveQuestion] = useState(0);\r\n//   const clearResponse = () => {\r\n//     const updatedSelectedAnswers = [...selectedAnswers];\r\n//     updatedSelectedAnswers[activeQuestion] = \"\";\r\n//     setSelectedAnswers(updatedSelectedAnswers);\r\n//   };\r\n\r\n//   const goToPreviousQuestion = () => {\r\n//     setCurrentQuestionIndex((prevIndex) => {\r\n//       // Save the current timer value for the question\r\n\r\n//       const updatedTimers = [...timers];\r\n\r\n//       updatedTimers[prevIndex] = timer;\r\n\r\n//       setTimers(updatedTimers);\r\n\r\n//       // Move to the previous question\r\n\r\n//       return prevIndex - 1;\r\n//     });\r\n\r\n//     if (questionData > 0) {\r\n//       setActiveQuestion(questionData - 1);\r\n//     }\r\n//   };\r\n\r\n//   // ---------------------------------Timer code Start--------------------------------\r\n//   const [timer, setTimer] = useState(0);\r\n//   const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\r\n\r\n//   const formatTime = (seconds) => {\r\n//     const hours = Math.floor(seconds / 3600);\r\n\r\n//     const minutes = Math.floor((seconds % 3600) / 60);\r\n\r\n//     const remainingSeconds = seconds % 60;\r\n\r\n//     return `${hours > 9 ? hours : \"0\" + hours}:${\r\n//       minutes > 9 ? minutes : \"0\" + minutes\r\n//     }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     // Set the timer to the saved value for the current question\r\n//     setTimer(timers[currentQuestionIndex] || 0);\r\n//     let interval;\r\n//     interval = setInterval(() => {\r\n//       setTimer((prevTimer) => prevTimer + 1);\r\n//     }, 1000);\r\n//     // Clear the interval when the component unmounts or when the user moves to the next question\r\n//     return () => {\r\n//       clearInterval(interval);\r\n//     };\r\n//   }, [currentQuestionIndex, timers]);\r\n//   // ------------------------------------Timer code end--------------------------------\r\n\r\n//   return (\r\n//     <div>\r\n//       <div>\r\n//         <PaperHeader />\r\n//       </div>\r\n//       <div className=\"subjects\">\r\n//         {Subjects.map((subjectTitle, index) => (\r\n//           <li key={index}>\r\n//             <button className=\"subject-btn\">{subjectTitle.subjectName}</button>\r\n//           </li>\r\n//         ))}\r\n//       </div>\r\n//       <div className=\"second-header\">\r\n//         <div className=\"single-select-question\">\r\n//           {sections.map((sectionTitle,index)=>(\r\n//             <li key={index}>\r\n//               <p>{sectionTitle.sectionName}</p>\r\n//             </li>\r\n//           ))}\r\n//           {/* Single Select Question */}\r\n//         </div>\r\n//         <div className=\"right-header\">\r\n//           <div className=\"marks\">\r\n//             Marks: <div className=\"plus-mark\">+1</div>\r\n//             <div className=\"minus-mark\">-1</div>\r\n//           </div>\r\n//           <div>Timer: {formatTime(timer)}</div>\r\n//         </div>\r\n//       </div>\r\n//       {questionData.length > 0 && (\r\n//         <div>\r\n//           <h4>\r\n//             {currentQuestionIndex + 1}.\r\n//             <img\r\n//               src={questionData[currentQuestionIndex].question_img}\r\n//               alt={`Question ${currentQuestionIndex + 1}`}\r\n//             />\r\n//           </h4>\r\n\r\n//           {questionData[currentQuestionIndex].optionImages.map(\r\n//             (OptionImage, optionIndex) => (\r\n//               <li key={optionIndex}>\r\n//                 <input\r\n//                   type=\"radio\"\r\n//                   name={`question-${currentQuestionIndex}-option`}\r\n//                   value={optionIndex}\r\n//                   checked={\r\n//                     selectedAnswers[currentQuestionIndex] === optionIndex\r\n//                   }\r\n//                   onChange={() => onAnswerSelected(optionIndex)}\r\n//                 />\r\n//                 <img\r\n//                   key={optionIndex}\r\n//                   src={OptionImage.option_img}\r\n//                   alt={`Option ${optionIndex + 1}`}\r\n//                 />\r\n//               </li>\r\n//             )\r\n//           )}\r\n//           <div className=\"flex-right\">\r\n//             <button className=\"clear-btn\" onClick={clearResponse}>\r\n//               Clear Response\r\n//             </button>\r\n//             <button\r\n//               className=\"previous-btn\"\r\n//               onClick={goToPreviousQuestion}\r\n//               disabled={questionData === 0}\r\n//             >\r\n//               <i className=\"fa-solid fa-angles-left\"></i> Previous\r\n//             </button>\r\n//             <button className=\"save-btn\" onClick={handleNextClick}>\r\n//               Next <i className=\"fa-solid fa-angles-right\"></i>\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Paper1;\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n\r\n// const Paper1 = () => {\r\n//   const [sections, setSections] = useState([]);\r\n//   const { testCreationTableId } = useParams();\r\n\r\n//   useEffect(() => {\r\n//     const fetchSections = async () => {\r\n//       try {\r\n//         const response = await fetch(`http://localhost:4009/quiz_all/${testCreationTableId}`);\r\n\r\n//         if (!response.ok) {\r\n//           throw new Error(`HTTP error! Status: ${response.status}`);\r\n//         }\r\n\r\n//         const data = await response.json();\r\n//         console.log('Received data:', data);\r\n//         setSections(data);\r\n//       } catch (error) {\r\n//         console.error('Error fetching data:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchSections();\r\n//   }, [testCreationTableId]); // Use testCreationTableId as a dependency to trigger fetch when it changes\r\n\r\n//   return (\r\n//     <div>\r\n//       {Object.values(sections).map((section) => (\r\n//         <div key={section.sectionId}>\r\n//           <h2>{section.sectionName}</h2>\r\n//           {section.questions.map((question) => (\r\n//             <div key={question.qustion_id}>\r\n//               {/* Display question image */}\r\n//               <img src={`data:image/png;base64,${question.question_img}`} alt={`Question ${question.qustion_id}`} />\r\n\r\n//               {/* Display option images */}\r\n//               <ul>\r\n//                 {question.option_img.map((option, index) => (\r\n//                   <li key={index}>\r\n//                     <img src={`data:image/png;base64,${option.option_img}`} alt={`Option ${option.Option_Index}`} />\r\n//                   </li>\r\n//                 ))}\r\n//               </ul>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n//       ))}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Paper1;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { Link, useParams } from \"react-router-dom\";\r\n// import PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\r\n// import \"./Paper.css\";\r\n// const Paper1 = () => {\r\n//   const [questionData, setQuestionData] = useState([]);\r\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n//   const [Subjects, setSubjects] = useState([]);\r\n//   const { testCreationTableId, subjectId } = useParams();\r\n//   const [sections, setSections] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchSubjects = async () => {\r\n//       try {\r\n//         const response = await fetch(\r\n//           `http://localhost:4009/subjects/${testCreationTableId}`\r\n//         );\r\n//         const data = await response.json();\r\n//         setSubjects(data);\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//       }\r\n//     };\r\n\r\n//     fetchSubjects();\r\n//   }, [testCreationTableId]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchSections = async () => {\r\n//       try {\r\n//         const response = await fetch(\r\n//           `http://localhost:4009/fetchSections/${testCreationTableId}`\r\n//         );\r\n//         const data = await response.json();\r\n//         setSections(data);\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//       }\r\n//     };\r\n\r\n//     fetchSections();\r\n//   }, [testCreationTableId]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchQuestionData = async () => {\r\n//       try {\r\n//         const response = await fetch(\r\n//           `http://localhost:4009/getPaperData/${testCreationTableId}`\r\n//         );\r\n//         const data = await response.json();\r\n//         setQuestionData(data);\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//       }\r\n//     };\r\n\r\n//     fetchQuestionData();\r\n//   }, [testCreationTableId]);\r\n\r\n//   const [selectedAnswers, setSelectedAnswers] = useState(\r\n//     Array(questionData.length).fill(\"\")\r\n//   );\r\n\r\n//   const handleNextClick = () => {\r\n//     // Update the current question index to move to the next question\r\n//     setCurrentQuestionIndex((prevIndex) =>\r\n//       prevIndex < questionData.length - 1 ? prevIndex + 1 : prevIndex\r\n//     );\r\n//   };\r\n\r\n//   const onAnswerSelected = (optionIndex) => {\r\n//     const updatedSelectedAnswers = [...selectedAnswers];\r\n//     updatedSelectedAnswers[currentQuestionIndex] = optionIndex;\r\n//     setSelectedAnswers(updatedSelectedAnswers);\r\n//   };\r\n\r\n//   const [activeQuestion, setActiveQuestion] = useState(0);\r\n//   const clearResponse = () => {\r\n//     const updatedSelectedAnswers = [...selectedAnswers];\r\n//     updatedSelectedAnswers[activeQuestion] = \"\";\r\n//     setSelectedAnswers(updatedSelectedAnswers);\r\n//   };\r\n\r\n//   const goToPreviousQuestion = () => {\r\n//     setCurrentQuestionIndex((prevIndex) => {\r\n//       // Save the current timer value for the question\r\n\r\n//       const updatedTimers = [...timers];\r\n\r\n//       updatedTimers[prevIndex] = timer;\r\n\r\n//       setTimers(updatedTimers);\r\n\r\n//       // Move to the previous question\r\n\r\n//       return prevIndex - 1;\r\n//     });\r\n\r\n//     if (questionData > 0) {\r\n//       setActiveQuestion(questionData - 1);\r\n//     }\r\n//   };\r\n\r\n//   // ---------------------------------Timer code Start--------------------------------\r\n//   const [timer, setTimer] = useState(0);\r\n//   const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\r\n\r\n//   const formatTime = (seconds) => {\r\n//     const hours = Math.floor(seconds / 3600);\r\n\r\n//     const minutes = Math.floor((seconds % 3600) / 60);\r\n\r\n//     const remainingSeconds = seconds % 60;\r\n\r\n//     return `${hours > 9 ? hours : \"0\" + hours}:${\r\n//       minutes > 9 ? minutes : \"0\" + minutes\r\n//     }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     // Set the timer to the saved value for the current question\r\n//     setTimer(timers[currentQuestionIndex] || 0);\r\n//     let interval;\r\n//     interval = setInterval(() => {\r\n//       setTimer((prevTimer) => prevTimer + 1);\r\n//     }, 1000);\r\n//     // Clear the interval when the component unmounts or when the user moves to the next question\r\n//     return () => {\r\n//       clearInterval(interval);\r\n//     };\r\n//   }, [currentQuestionIndex, timers]);\r\n//   // ------------------------------------Timer code end--------------------------------\r\n\r\n//   return (\r\n//     <div>\r\n//       <div>\r\n//         <PaperHeader />\r\n//       </div>\r\n//       <div className=\"subjects\">\r\n//         {Subjects.map((subjectTitle, index) => (\r\n//           <li key={index}>\r\n//             <button className=\"subject-btn\">{subjectTitle.subjectName}</button>\r\n//           </li>\r\n//         ))}\r\n//       </div>\r\n//       <div className=\"second-header\">\r\n//         <div className=\"single-select-question\">\r\n//           {sections.map((sectionTitle,index)=>(\r\n//             <li key={index}>\r\n//               <p>{sectionTitle.sectionName}</p>\r\n//             </li>\r\n//           ))}\r\n//           {/* Single Select Question */}\r\n//         </div>\r\n//         <div className=\"right-header\">\r\n//           <div className=\"marks\">\r\n//             Marks: <div className=\"plus-mark\">+1</div>\r\n//             <div className=\"minus-mark\">-1</div>\r\n//           </div>\r\n//           <div>Timer: {formatTime(timer)}</div>\r\n//         </div>\r\n//       </div>\r\n//       {questionData.length > 0 && (\r\n//         <div>\r\n//           <h4>\r\n//             {currentQuestionIndex + 1}.\r\n//             <img\r\n//               src={questionData[currentQuestionIndex].question_img}\r\n//               alt={`Question ${currentQuestionIndex + 1}`}\r\n//             />\r\n//           </h4>\r\n\r\n//           {questionData[currentQuestionIndex].optionImages.map(\r\n//             (OptionImage, optionIndex) => (\r\n//               <li key={optionIndex}>\r\n//                 <input\r\n//                   type=\"radio\"\r\n//                   name={`question-${currentQuestionIndex}-option`}\r\n//                   value={optionIndex}\r\n//                   checked={\r\n//                     selectedAnswers[currentQuestionIndex] === optionIndex\r\n//                   }\r\n//                   onChange={() => onAnswerSelected(optionIndex)}\r\n//                 />\r\n//                 <img\r\n//                   key={optionIndex}\r\n//                   src={OptionImage.option_img}\r\n//                   alt={`Option ${optionIndex + 1}`}\r\n//                 />\r\n//               </li>\r\n//             )\r\n//           )}\r\n//           <div className=\"flex-right\">\r\n//             <button className=\"clear-btn\" onClick={clearResponse}>\r\n//               Clear Response\r\n//             </button>\r\n//             <button\r\n//               className=\"previous-btn\"\r\n//               onClick={goToPreviousQuestion}\r\n//               disabled={questionData === 0}\r\n//             >\r\n//               <i className=\"fa-solid fa-angles-left\"></i> Previous\r\n//             </button>\r\n//             <button className=\"save-btn\" onClick={handleNextClick}>\r\n//               Next <i className=\"fa-solid fa-angles-right\"></i>\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Paper1;\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n\r\n// const Paper1 = () => {\r\n//   const [sections, setSections] = useState([]);\r\n//   const { testCreationTableId } = useParams();\r\n\r\n//   useEffect(() => {\r\n//     const fetchSections = async () => {\r\n//       try {\r\n//         const response = await fetch(`http://localhost:4009/quiz_all/${testCreationTableId}`);\r\n\r\n//         if (!response.ok) {\r\n//           throw new Error(`HTTP error! Status: ${response.status}`);\r\n//         }\r\n\r\n//         const data = await response.json();\r\n//         console.log('Received data:', data);\r\n//         setSections(data);\r\n//       } catch (error) {\r\n//         console.error('Error fetching data:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchSections();\r\n//   }, [testCreationTableId]); // Use testCreationTableId as a dependency to trigger fetch when it changes\r\n\r\n//   return (\r\n//     <div>\r\n//       {Object.values(sections).map((section) => (\r\n//         <div key={section.sectionId}>\r\n//           <h2>{section.sectionName}</h2>\r\n//           {section.questions.map((question) => (\r\n//             <div key={question.qustion_id}>\r\n//               {/* Display question image */}\r\n//               <img src={`data:image/png;base64,${question.question_img}`} alt={`Question ${question.qustion_id}`} />\r\n\r\n//               {/* Display option images */}\r\n//               <ul>\r\n//                 {question.option_img.map((option, index) => (\r\n//                   <li key={index}>\r\n//                     <img src={`data:image/png;base64,${option.option_img}`} alt={`Option ${option.Option_Index}`} />\r\n//                   </li>\r\n//                 ))}\r\n//               </ul>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n//       ))}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Paper1;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useParams } from \"react-router-dom\";\r\n\r\n// function Paper1() {\r\n\r\n//   const [questionData, setQuestionData] = useState([]);\r\n//   const {testCreationTableId} = useParams();\r\n\r\n//   useEffect(() => {\r\n//     const fetchQuestionData = async () => {\r\n//       try {\r\n//         const response = await fetch(\r\n//           `http://localhost:4009/getPaperData/${testCreationTableId}`\r\n//         );\r\n//         const data = await response.json();\r\n//         setQuestionData(data);\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//       }\r\n//     };\r\n\r\n//     fetchQuestionData();\r\n//   }, [testCreationTableId]);\r\n\r\n\r\n//   return (\r\n//     <div>\r\n//       {/* Access data as needed, for example: */}\r\n\r\n//       {/* Map over questions and render them */}\r\n//       <div\r\n//         className=\"q1s\"\r\n//         style={{\r\n//           display: \"flex\",\r\n//           gap: \"4rem\",\r\n//           flexDirection: \"column\",\r\n//           width: \"85vw\",\r\n//           margin: \"2rem\",\r\n//         }}\r\n//       >\r\n//         {questionData.map((question, index) => (\r\n//           <div\r\n//             className=\"outColor\"\r\n//             style={{ background: \"#e5e5e5\", padding: \"2rem 2rem\" }}\r\n//           >\r\n//             <div key={question.question_id}>\r\n//               <div className=\"question\" key={index}>\r\n//                 <h3>{index + 1}</h3>\r\n//                 <img\r\n//                   src={`data:image/png;base64,${question.question_img}`}\r\n//                   alt=\"Question\"\r\n//                 />\r\n//               </div>\r\n\r\n//               {/* Map over options and render them */}\r\n//               {questionData\r\n//                 .filter((opt) => opt.question_id === question.question_id)\r\n//                 .map((option) => (\r\n                 \r\n//                     <img\r\n//                       key={option.question_id}\r\n//                       src={`data:image/png;base64,${option.option_img}`}\r\n//                       alt=\"Option\"\r\n//                     />\r\n           \r\n//                 ))}\r\n\r\n             \r\n//             </div>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Paper1;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nfunction Paper1() {\r\n  const [questionData, setQuestionData] = useState([]);\r\n\r\n  const { testCreationTableId } = useParams();\r\n\r\n  // useEffect(() => {\r\n  //   const fetchQuestionData = async () => {\r\n  //     try {\r\n  //       const response = await fetch(\r\n  //         `http://localhost:4009/getPaperData/${testCreationTableId}`\r\n  //       );\r\n  //       const data = await response.json();\r\n\r\n  //       // Check if the data is an array before setting state\r\n  //       if (Array.isArray(data)) {\r\n  //         setQuestionData(data);\r\n  //       } else {\r\n  //         console.error(\"API response is not an array:\", data);\r\n  //       }\r\n  //     } catch (error) {\r\n  //       console.error(error);\r\n  //     }\r\n  //   };\r\n\r\n  //   fetchQuestionData();\r\n  // }, [testCreationTableId]);\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        className=\"q1s\"\r\n        style={{\r\n          display: \"flex\",\r\n          gap: \"4rem\",\r\n          flexDirection: \"column\",\r\n          width: \"85vw\",\r\n          margin: \"2rem\",\r\n        }}\r\n      >\r\n        {questionData.map((question, index) => (\r\n          <div\r\n            className=\"outColor\"\r\n            style={{ background: \"#e5e5e5\", padding: \"2rem 2rem\" }}\r\n            key={question.question_id}\r\n          >\r\n            <div className=\"question\" key={index}>\r\n              <h3>{index + 1}</h3>\r\n              <img\r\n                src={`data:image/png;base64,${question.question_img}`}\r\n                alt=\"Question\"\r\n              />\r\n            </div>\r\n\r\n            {questionData\r\n              .filter((opt) => opt.question_id === question.question_id)\r\n              .map((option) => (\r\n                <img\r\n                  key={option.question_id}\r\n                  src={`data:image/png;base64,${option.option_img}`}\r\n                  alt=\"Option\"\r\n                />\r\n              ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Paper1;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAYA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAWA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAM;IAAES;EAAoB,CAAC,GAAGP,SAAS,CAAC,CAAC;;EAE3C;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA,oBACEE,OAAA;IAAAM,QAAA,eACEN,OAAA;MACEO,SAAS,EAAC,KAAK;MACfC,KAAK,EAAE;QACLC,OAAO,EAAE,MAAM;QACfC,GAAG,EAAE,MAAM;QACXC,aAAa,EAAE,QAAQ;QACvBC,KAAK,EAAE,MAAM;QACbC,MAAM,EAAE;MACV,CAAE;MAAAP,QAAA,EAEDH,YAAY,CAACW,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,kBAChChB,OAAA;QACEO,SAAS,EAAC,UAAU;QACpBC,KAAK,EAAE;UAAES,UAAU,EAAE,SAAS;UAAEC,OAAO,EAAE;QAAY,CAAE;QAAAZ,QAAA,gBAGvDN,OAAA;UAAKO,SAAS,EAAC,UAAU;UAAAD,QAAA,gBACvBN,OAAA;YAAAM,QAAA,EAAKU,KAAK,GAAG;UAAC;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACpBtB,OAAA;YACEuB,GAAG,EAAG,yBAAwBR,QAAQ,CAACS,YAAa,EAAE;YACtDC,GAAG,EAAC;UAAU;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACf,CAAC;QAAA,GAL2BN,KAAK;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAM/B,CAAC,EAELnB,YAAY,CACVuB,MAAM,CAAEC,GAAG,IAAKA,GAAG,CAACC,WAAW,KAAKb,QAAQ,CAACa,WAAW,CAAC,CACzDd,GAAG,CAAEe,MAAM,iBACV7B,OAAA;UAEEuB,GAAG,EAAG,yBAAwBM,MAAM,CAACC,UAAW,EAAE;UAClDL,GAAG,EAAC;QAAQ,GAFPI,MAAM,CAACD,WAAW;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAGxB,CACF,CAAC;MAAA,GAlBCP,QAAQ,CAACa,WAAW;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAmBtB,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACpB,EAAA,CAnEQD,MAAM;EAAA,QAGmBH,SAAS;AAAA;AAAAiC,EAAA,GAHlC9B,MAAM;AAqEf,eAAeA,MAAM;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}