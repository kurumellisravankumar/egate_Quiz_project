{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/egate_Quiz_project/src/Pages/MainQuizFunctionality/QuestionsFunctionality.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\nimport \"../Paper/Paper.css\";\nimport ButtonsFunctionality from \"./ButtonsFunctionality\";\nimport TestResultsPage from \"./TestResultsPage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionsFunctionality = ({\n  answeredQuestions\n}) => {\n  _s();\n  const [selectedSubject, setSelectedSubject] = useState(null);\n  const handleSubjectSelect = subject => {\n    // Set the selected subject when a subject button is clicked\n    setSelectedSubject(subject);\n  };\n  const [questionData, setQuestionData] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [Subjects, setSubjects] = useState([]);\n  const {\n    testCreationTableId,\n    subjectId\n  } = useParams();\n  const [sections, setSections] = useState([]);\n  const [questionStatus, setQuestionStatus] = useState(Array(questionData.length).fill(\"notAnswered\"));\n  const [answeredCount, setAnsweredCount] = useState(0);\n  const [notAnsweredCount, setNotAnsweredCount] = useState(0);\n  const [answeredmarkedForReviewCount, setAnsweredmarkedForReviewCount] = useState(0);\n  const [markedForReviewCount, setMarkedForReviewCount] = useState(0);\n  const [VisitedCount, setVisitedCount] = useState(0);\n  const updateCounters = () => {\n    let answered = 0;\n    let notAnswered = 0;\n    let marked = 0;\n    let markedForReview = 0;\n    let Visited = 0;\n    questionStatus.forEach(status => {\n      if (status === \"answered\") {\n        answered++;\n      } else if (status === \"notAnswered\") {\n        notAnswered++;\n      } else if (status === \"marked\") {\n        marked++;\n      } else if (status === \"Answered but marked for review\") {\n        markedForReview++;\n      } else if (status === \"notVisited\") {\n        Visited++;\n      }\n    });\n    setAnsweredCount(answered);\n    setNotAnsweredCount(notAnswered);\n    setAnsweredmarkedForReviewCount(marked);\n    setMarkedForReviewCount(markedForReview);\n    setVisitedCount(Visited);\n  };\n\n  // ---------------------------------Timer code Start--------------------------------\n  const [timer, setTimer] = useState(0);\n  const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\n  const formatTime = seconds => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor(seconds % 3600 / 60);\n    const remainingSeconds = seconds % 60;\n    return `${hours > 9 ? hours : \"0\" + hours}:${minutes > 9 ? minutes : \"0\" + minutes}:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n  };\n  useEffect(() => {\n    // Set the timer to the saved value for the current question\n    setTimer(timers[currentQuestionIndex] || 0);\n    let interval;\n    interval = setInterval(() => {\n      setTimer(prevTimer => prevTimer + 1);\n    }, 1000);\n    // Clear the interval when the component unmounts or when the user moves to the next question\n    return () => {\n      clearInterval(interval);\n    };\n  }, [currentQuestionIndex, timers]);\n  // ------------------------------------Timer code end--------------------------------\n\n  useEffect(() => {\n    const fetchSubjects = async () => {\n      try {\n        const response = await fetch(`http://localhost:4009/subjects/${testCreationTableId}`);\n        const data = await response.json();\n        setSubjects(data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    const fetchSections = async () => {\n      try {\n        const response = await fetch(`http://localhost:4009/fetchSections/${testCreationTableId}`);\n        const data = await response.json();\n        setSections(data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    const fetchQuestionData = async () => {\n      try {\n        const response = await fetch(`http://localhost:4009/getPaperData/${testCreationTableId}`);\n        const data = await response.json();\n\n        // Check if the data has both 'questions' and 'options' properties\n        if (data && data.questions && data.options) {\n          // Assuming both questions and options are arrays, you might want to merge them\n          const mergedData = data.questions.map((question, index) => ({\n            ...question,\n            options: data.options.slice(index * 4, (index + 1) * 4) // Assuming 4 options per question\n          }));\n\n          setQuestionData(mergedData);\n          setQuestionStatus([\"notAnswered\", ...Array(mergedData.length - 1).fill(\"notVisited\")]);\n        } else {\n          console.error(\"API response does not have expected structure:\", data);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchSubjects();\n    fetchSections();\n    fetchQuestionData();\n  }, [testCreationTableId]);\n  useEffect(() => {\n    // Call the updateCounters function initially when the component mounts\n    updateCounters();\n  }, [questionStatus]);\n  const [selectedAnswers, setSelectedAnswers] = useState(Array(questionData.length).fill(\"\"));\n  const onAnswerSelected = OptionLetter => {\n    const updatedSelectedAnswers = [...selectedAnswers];\n    updatedSelectedAnswers[activeQuestion] = OptionLetter;\n    setSelectedAnswers(updatedSelectedAnswers);\n    const updatedQuestionStatus = [...questionStatus];\n    updatedQuestionStatus[activeQuestion] = \"answered\";\n    setQuestionStatus(updatedQuestionStatus);\n  };\n  const [activeQuestion, setActiveQuestion] = useState(0);\n  const markForReview = () => {\n    // Update questionStatus for the marked question\n    const updatedQuestionStatus = [...questionStatus];\n    if (selectedAnswers[activeQuestion]) {\n      updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n      if (selectedAnswers[activeQuestion] === \"Answered but marked for review\") {\n        updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n      }\n    } else if (!selectedAnswers[activeQuestion]) {\n      updatedQuestionStatus[activeQuestion] = \"marked\";\n    }\n    setQuestionStatus(updatedQuestionStatus);\n  };\n  const clearResponse = () => {\n    const updatedSelectedAnswers = [...selectedAnswers];\n    updatedSelectedAnswers[currentQuestionIndex] = \"\";\n    setSelectedAnswers(updatedSelectedAnswers);\n  };\n\n  // const goToPreviousQuestion = () => {\n  //     setCurrentQuestionIndex((prevIndex) => {\n  //         // Save the current timer value for the question\n  //         const updatedTimers = [...timers];\n  //         updatedTimers[prevIndex] = timer;\n  //         setTimers(updatedTimers);\n  //         // Move to the previous question\n  //         return prevIndex > 0 ? prevIndex - 1 : prevIndex;\n  //     });\n\n  //     if (questionData.length > 0) {\n  //         setActiveQuestion((prevActiveQuestion) => prevActiveQuestion > 0 ? prevActiveQuestion - 1 : prevActiveQuestion);\n  //     }\n  // };\n\n  const goToPreviousQuestion = () => {\n    setCurrentQuestionIndex(prevIndex => {\n      // Save the current timer value for the question\n      const updatedTimers = [...timers];\n      updatedTimers[prevIndex] = timer;\n      setTimers(updatedTimers);\n      // Move to the previous question\n      return prevIndex - 1;\n    });\n    setActiveQuestion(prevActiveQuestion => prevActiveQuestion - 1);\n  };\n  const handleNextClick = () => {\n    setCurrentQuestionIndex(prevIndex => {\n      // Save the current timer value for the question\n\n      const updatedTimers = [...timers];\n      updatedTimers[prevIndex] = timer;\n      setTimers(updatedTimers);\n      return prevIndex + 1;\n    });\n    const updatedQuestionStatus = [...questionStatus];\n    if (activeQuestion < questionData.length - 1) {\n      // Check the status of the next question\n      const nextQuestionStatus = questionStatus[activeQuestion + 1];\n      if (nextQuestionStatus === \"answered\") {\n        updatedQuestionStatus[activeQuestion + 1] = \"answered\";\n      } else if (nextQuestionStatus === \"notAnswered\") {\n        updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n      } else if (!markForReview() === false) {\n        markForReview();\n      }\n      setActiveQuestion(prevActiveQuestion => prevActiveQuestion + 1);\n    }\n    updateCounters();\n\n    // Set status of the next question (if any) to \"notAnswered\"\n\n    if (activeQuestion < questionData.length - 1) {\n      const updatedQuestionStatus = [...questionStatus];\n      const nextQuestionStatus = questionStatus[activeQuestion + 1];\n      if (nextQuestionStatus === \"notVisited\") {\n        updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n      }\n      if (selectedAnswers[activeQuestion] === \"answered\") {\n        updatedQuestionStatus[activeQuestion] = \"answered\";\n      } else if (markForReview() === true) {\n        updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n      } else if (markForReview() === false) {\n        updatedQuestionStatus[activeQuestion] = \"marked\";\n      }\n      if (nextQuestionStatus === \"notAnswered\") {\n        updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n      }\n      setQuestionStatus(updatedQuestionStatus);\n    }\n  };\n  const [showResult, setShowResult] = useState(false);\n  const calculateQuestionCounts = () => {\n    let answered = 0;\n    let notAnswered = 0;\n    let markedForReview = 0;\n    let answeredButMarkedForReview = 0;\n    let notVisited = 0;\n    questionStatus.forEach((status, index) => {\n      if (status === \"answered\") {\n        answered++;\n      } else if (status === \"notAnswered\") {\n        notAnswered++;\n      } else if (status === \"marked\") {\n        markedForReview++;\n      } else if (status === \"Answered but marked for review\") {\n        answeredButMarkedForReview++;\n      } else if (status === \"notVisited\") {\n        notVisited++;\n      }\n    });\n    return {\n      answered,\n      notAnswered,\n      markedForReview,\n      answeredButMarkedForReview,\n      notVisited\n    };\n  };\n  const handleSubmit = () => {\n    // Call the function to get question counts\n    const {\n      answered,\n      notAnswered,\n      markedForReview,\n      answeredmarkedForReviewCount,\n      VisitedCount\n    } = calculateQuestionCounts();\n\n    // Update state with the counts\n    setAnsweredCount(answered);\n    setNotAnsweredCount(notAnswered);\n    setMarkedForReviewCount(markedForReview);\n    setAnsweredmarkedForReviewCount(answeredmarkedForReviewCount);\n    setVisitedCount(VisitedCount);\n\n    // Now you can use these state variables in your UI\n    setShowResult(true);\n    // Close the current window\n    window.close();\n\n    // Open a new window with the results page\n    const resultsWindow = window.open('./TestResultsPage', '_blank');\n\n    // Optionally, you can focus on the new window\n    resultsWindow.focus();\n\n    // Open the result page in the current window\n    window.location.href = './TestResultsPage';\n  };\n  const handleQuestionSelect = questionNumber => {\n    setCurrentQuestionIndex(questionNumber - 1);\n    setActiveQuestion(questionNumber - 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Main-Page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(PaperHeader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"subjects\",\n        children: Subjects.map((subjectTitle, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"subject-btn\",\n              onClick: () => handleSubjectSelect(subjectTitle.subjectName),\n              children: subjectTitle.subjectName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 36\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"second-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"single-select-question\",\n          children: sections.map((sectionTitle, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: sectionTitle.sectionName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 33\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"marks\",\n            children: [\"Marks: \", /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"plus-mark\",\n              children: \"+1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 36\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"minus-mark\",\n              children: \"-1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Timer: \", formatTime(timer)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"  Question No. \", currentQuestionIndex + 1, \"  of \", questionData.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 17\n      }, this), questionData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `data:image/png;base64,${questionData[currentQuestionIndex].question_img}`,\n            alt: `Question ${currentQuestionIndex + 1}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 25\n        }, this), questionData[currentQuestionIndex].options.map((OptionImage, optionIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: `question-${currentQuestionIndex}-option`,\n            value: optionIndex,\n            checked: selectedAnswers[currentQuestionIndex] === optionIndex,\n            onChange: () => onAnswerSelected(optionIndex)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 37\n          }, this), OptionImage && OptionImage.option_img && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `data:image/png;base64,${OptionImage.option_img}`,\n            alt: `Option ${optionIndex + 1}`\n          }, OptionImage.question_id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 41\n          }, this)]\n        }, optionIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 33\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-right\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"clear-btn\",\n            onClick: markForReview,\n            children: \"Mark for Review & Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"clear-btn\",\n            onClick: clearResponse,\n            children: \"Clear Response\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"previous-btn\",\n            onClick: goToPreviousQuestion,\n            disabled: currentQuestionIndex === 0,\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa-solid fa-angles-left\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 479,\n              columnNumber: 33\n            }, this), \" Previous\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"save-btn\",\n            onClick: handleNextClick,\n            children: [\"Next \", /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa-solid fa-angles-right\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 38\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rightsidebar\",\n      children: [/*#__PURE__*/_jsxDEV(ButtonsFunctionality, {\n        onQuestionSelect: handleQuestionSelect,\n        questionStatus: questionStatus,\n        setQuestionStatus: setQuestionStatus,\n        answeredCount: answeredCount,\n        notAnsweredCount: notAnsweredCount,\n        answeredmarkedForReviewCount: answeredmarkedForReviewCount,\n        markedForReviewCount: markedForReviewCount,\n        VisitedCount: VisitedCount,\n        selectedSubject: selectedSubject,\n        questionData: questionData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 17\n      }, this), showResult ? /*#__PURE__*/_jsxDEV(TestResultsPage, {\n        answeredCount: answeredCount,\n        notAnsweredCount: notAnsweredCount,\n        markedForReviewCount: markedForReviewCount,\n        answeredmarkedForReviewCount: answeredmarkedForReviewCount,\n        VisitedCount: VisitedCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSubmit,\n          id: \"resume_btn\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 398,\n    columnNumber: 9\n  }, this);\n};\n_s(QuestionsFunctionality, \"WhxFW5AowdYNhaO4KakLHCUbiKY=\", false, function () {\n  return [useParams];\n});\n_c = QuestionsFunctionality;\nexport default QuestionsFunctionality;\nvar _c;\n$RefreshReg$(_c, \"QuestionsFunctionality\");","map":{"version":3,"names":["React","useState","useEffect","Link","useParams","PaperHeader","ButtonsFunctionality","TestResultsPage","jsxDEV","_jsxDEV","QuestionsFunctionality","answeredQuestions","_s","selectedSubject","setSelectedSubject","handleSubjectSelect","subject","questionData","setQuestionData","currentQuestionIndex","setCurrentQuestionIndex","Subjects","setSubjects","testCreationTableId","subjectId","sections","setSections","questionStatus","setQuestionStatus","Array","length","fill","answeredCount","setAnsweredCount","notAnsweredCount","setNotAnsweredCount","answeredmarkedForReviewCount","setAnsweredmarkedForReviewCount","markedForReviewCount","setMarkedForReviewCount","VisitedCount","setVisitedCount","updateCounters","answered","notAnswered","marked","markedForReview","Visited","forEach","status","timer","setTimer","timers","setTimers","formatTime","seconds","hours","Math","floor","minutes","remainingSeconds","interval","setInterval","prevTimer","clearInterval","fetchSubjects","response","fetch","data","json","error","console","fetchSections","fetchQuestionData","questions","options","mergedData","map","question","index","slice","selectedAnswers","setSelectedAnswers","onAnswerSelected","OptionLetter","updatedSelectedAnswers","activeQuestion","updatedQuestionStatus","setActiveQuestion","markForReview","clearResponse","goToPreviousQuestion","prevIndex","updatedTimers","prevActiveQuestion","handleNextClick","nextQuestionStatus","showResult","setShowResult","calculateQuestionCounts","answeredButMarkedForReview","notVisited","handleSubmit","window","close","resultsWindow","open","focus","location","href","handleQuestionSelect","questionNumber","className","children","fileName","_jsxFileName","lineNumber","columnNumber","subjectTitle","onClick","subjectName","sectionTitle","sectionName","src","question_img","alt","OptionImage","optionIndex","type","name","value","checked","onChange","option_img","question_id","disabled","onQuestionSelect","id","_c","$RefreshReg$"],"sources":["/home/user/Documents/egate_Quiz_project/src/Pages/MainQuizFunctionality/QuestionsFunctionality.jsx"],"sourcesContent":["\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\nimport \"../Paper/Paper.css\";\nimport ButtonsFunctionality from \"./ButtonsFunctionality\";\nimport TestResultsPage from \"./TestResultsPage\";\n\n\n\n\nconst QuestionsFunctionality = ({ answeredQuestions }) => {\n\n    const [selectedSubject, setSelectedSubject] = useState(null);\n\n    const handleSubjectSelect = (subject) => {\n        // Set the selected subject when a subject button is clicked\n        setSelectedSubject(subject);\n    };\n\n    const [questionData, setQuestionData] = useState([]);\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [Subjects, setSubjects] = useState([]);\n    const { testCreationTableId, subjectId } = useParams();\n    const [sections, setSections] = useState([]);\n\n\n    const [questionStatus, setQuestionStatus] = useState(\n        Array(questionData.length).fill(\"notAnswered\")\n    );\n\n    const [answeredCount, setAnsweredCount] = useState(0);\n    const [notAnsweredCount, setNotAnsweredCount] = useState(0);\n    const [answeredmarkedForReviewCount, setAnsweredmarkedForReviewCount] =\n        useState(0);\n    const [markedForReviewCount, setMarkedForReviewCount] = useState(0);\n    const [VisitedCount, setVisitedCount] = useState(0);\n\n\n    const updateCounters = () => {\n        let answered = 0;\n        let notAnswered = 0;\n        let marked = 0;\n        let markedForReview = 0;\n        let Visited = 0;\n\n        questionStatus.forEach((status) => {\n            if (status === \"answered\") {\n                answered++;\n            } else if (status === \"notAnswered\") {\n                notAnswered++;\n            } else if (status === \"marked\") {\n                marked++;\n            } else if (status === \"Answered but marked for review\") {\n                markedForReview++;\n            } else if (status === \"notVisited\") {\n                Visited++;\n            }\n        });\n\n        setAnsweredCount(answered);\n        setNotAnsweredCount(notAnswered);\n        setAnsweredmarkedForReviewCount(marked);\n        setMarkedForReviewCount(markedForReview);\n        setVisitedCount(Visited);\n    };\n\n\n    // ---------------------------------Timer code Start--------------------------------\n    const [timer, setTimer] = useState(0);\n    const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\n\n    const formatTime = (seconds) => {\n        const hours = Math.floor(seconds / 3600);\n\n        const minutes = Math.floor((seconds % 3600) / 60);\n\n        const remainingSeconds = seconds % 60;\n\n        return `${hours > 9 ? hours : \"0\" + hours}:${minutes > 9 ? minutes : \"0\" + minutes\n            }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n    };\n\n    useEffect(() => {\n        // Set the timer to the saved value for the current question\n        setTimer(timers[currentQuestionIndex] || 0);\n        let interval;\n        interval = setInterval(() => {\n            setTimer((prevTimer) => prevTimer + 1);\n        }, 1000);\n        // Clear the interval when the component unmounts or when the user moves to the next question\n        return () => {\n            clearInterval(interval);\n        };\n    }, [currentQuestionIndex, timers]);\n    // ------------------------------------Timer code end--------------------------------\n\n\n    useEffect(() => {\n        const fetchSubjects = async () => {\n            try {\n                const response = await fetch(\n                    `http://localhost:4009/subjects/${testCreationTableId}`\n                );\n                const data = await response.json();\n                setSubjects(data);\n            } catch (error) {\n                console.error(error);\n            }\n        };\n\n\n\n\n        const fetchSections = async () => {\n            try {\n                const response = await fetch(\n                    `http://localhost:4009/fetchSections/${testCreationTableId}`\n                );\n                const data = await response.json();\n                setSections(data);\n            } catch (error) {\n                console.error(error);\n            }\n        };\n\n\n\n\n\n\n        const fetchQuestionData = async () => {\n            try {\n                const response = await fetch(\n                    `http://localhost:4009/getPaperData/${testCreationTableId}`\n                );\n                const data = await response.json();\n\n                // Check if the data has both 'questions' and 'options' properties\n                if (data && data.questions && data.options) {\n                    // Assuming both questions and options are arrays, you might want to merge them\n                    const mergedData = data.questions.map((question, index) => ({\n                        ...question,\n                        options: data.options.slice(index * 4, (index + 1) * 4), // Assuming 4 options per question\n                    }));\n\n                    setQuestionData(mergedData);\n                    setQuestionStatus([\n                        \"notAnswered\",\n                        ...Array(mergedData.length - 1).fill(\"notVisited\"),\n                    ]);\n                } else {\n                    console.error(\"API response does not have expected structure:\", data);\n                }\n            } catch (error) {\n                console.error(error);\n            }\n        };\n\n\n        fetchSubjects();\n        fetchSections();\n        fetchQuestionData();\n    }, [testCreationTableId]);\n\n\n    useEffect(() => {\n        // Call the updateCounters function initially when the component mounts\n        updateCounters();\n    }, [questionStatus]);\n\n\n\n    const [selectedAnswers, setSelectedAnswers] = useState(\n        Array(questionData.length).fill(\"\")\n    );\n\n\n\n\n\n\n    const onAnswerSelected = (OptionLetter) => {\n        const updatedSelectedAnswers = [...selectedAnswers];\n        updatedSelectedAnswers[activeQuestion] = OptionLetter;\n        setSelectedAnswers(updatedSelectedAnswers);\n\n        const updatedQuestionStatus = [...questionStatus];\n        updatedQuestionStatus[activeQuestion] = \"answered\";\n        setQuestionStatus(updatedQuestionStatus);\n    };\n\n    const [activeQuestion, setActiveQuestion] = useState(0);\n\n\n    const markForReview = () => {\n        // Update questionStatus for the marked question\n        const updatedQuestionStatus = [...questionStatus];\n        if (selectedAnswers[activeQuestion]) {\n            updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n            if (selectedAnswers[activeQuestion] === \"Answered but marked for review\") {\n                updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n            }\n        } else if (!selectedAnswers[activeQuestion]) {\n            updatedQuestionStatus[activeQuestion] = \"marked\";\n        }\n\n        setQuestionStatus(updatedQuestionStatus);\n    };\n\n\n\n\n\n\n    const clearResponse = () => {\n        const updatedSelectedAnswers = [...selectedAnswers];\n        updatedSelectedAnswers[currentQuestionIndex] = \"\";\n        setSelectedAnswers(updatedSelectedAnswers);\n    };\n\n\n    // const goToPreviousQuestion = () => {\n    //     setCurrentQuestionIndex((prevIndex) => {\n    //         // Save the current timer value for the question\n    //         const updatedTimers = [...timers];\n    //         updatedTimers[prevIndex] = timer;\n    //         setTimers(updatedTimers);\n    //         // Move to the previous question\n    //         return prevIndex > 0 ? prevIndex - 1 : prevIndex;\n    //     });\n\n    //     if (questionData.length > 0) {\n    //         setActiveQuestion((prevActiveQuestion) => prevActiveQuestion > 0 ? prevActiveQuestion - 1 : prevActiveQuestion);\n    //     }\n    // };\n\n\n\n\n    const goToPreviousQuestion = () => {\n        setCurrentQuestionIndex((prevIndex) => {\n            // Save the current timer value for the question\n            const updatedTimers = [...timers];\n            updatedTimers[prevIndex] = timer;\n            setTimers(updatedTimers);\n            // Move to the previous question\n            return prevIndex - 1;\n        });\n\n        setActiveQuestion((prevActiveQuestion) => prevActiveQuestion - 1);\n    };\n\n\n    const handleNextClick = () => {\n\n\n        setCurrentQuestionIndex((prevIndex) => {\n            // Save the current timer value for the question\n\n            const updatedTimers = [...timers];\n\n            updatedTimers[prevIndex] = timer;\n\n            setTimers(updatedTimers);\n            return prevIndex + 1;\n        });\n\n        const updatedQuestionStatus = [...questionStatus];\n\n        if (activeQuestion < questionData.length - 1) {\n            // Check the status of the next question\n            const nextQuestionStatus = questionStatus[activeQuestion + 1];\n\n            if (nextQuestionStatus === \"answered\") {\n                updatedQuestionStatus[activeQuestion + 1] = \"answered\";\n            } else if (nextQuestionStatus === \"notAnswered\") {\n                updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n            } else if (!markForReview() === false) {\n                markForReview();\n            }\n\n            setActiveQuestion((prevActiveQuestion) => prevActiveQuestion + 1);\n        }\n\n        updateCounters();\n\n        // Set status of the next question (if any) to \"notAnswered\"\n\n        if (activeQuestion < questionData.length - 1) {\n            const updatedQuestionStatus = [...questionStatus];\n            const nextQuestionStatus = questionStatus[activeQuestion + 1];\n\n            if (nextQuestionStatus === \"notVisited\") {\n                updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n            }\n\n            if (selectedAnswers[activeQuestion] === \"answered\") {\n                updatedQuestionStatus[activeQuestion] = \"answered\";\n            } else if (markForReview() === true) {\n                updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n            } else if (markForReview() === false) {\n                updatedQuestionStatus[activeQuestion] = \"marked\";\n            }\n\n            if (nextQuestionStatus === \"notAnswered\") {\n                updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n            }\n\n            setQuestionStatus(updatedQuestionStatus);\n        }\n\n\n    };\n\n    const [showResult, setShowResult] = useState(false);\n    const calculateQuestionCounts = () => {\n        let answered = 0;\n        let notAnswered = 0;\n        let markedForReview = 0;\n        let answeredButMarkedForReview = 0;\n        let notVisited = 0;\n\n        questionStatus.forEach((status, index) => {\n            if (status === \"answered\") {\n                answered++;\n            } else if (status === \"notAnswered\") {\n                notAnswered++;\n            } else if (status === \"marked\") {\n                markedForReview++;\n            } else if (status === \"Answered but marked for review\") {\n                answeredButMarkedForReview++;\n            } else if (status === \"notVisited\") {\n                notVisited++;\n            }\n        });\n\n        return {\n            answered,\n            notAnswered,\n            markedForReview,\n            answeredButMarkedForReview,\n            notVisited,\n        };\n    };\n\n\n\n\n    const handleSubmit = () => {\n        // Call the function to get question counts\n        const {\n          answered,\n          notAnswered,\n          markedForReview,\n          answeredmarkedForReviewCount,\n          VisitedCount,\n        } = calculateQuestionCounts();\n    \n        // Update state with the counts\n        setAnsweredCount(answered);\n        setNotAnsweredCount(notAnswered);\n        setMarkedForReviewCount(markedForReview);\n        setAnsweredmarkedForReviewCount(answeredmarkedForReviewCount);\n        setVisitedCount(VisitedCount);\n    \n        // Now you can use these state variables in your UI\n        setShowResult(true);\n         // Close the current window\n    window.close();\n\n    // Open a new window with the results page\n    const resultsWindow = window.open('./TestResultsPage', '_blank');\n\n    // Optionally, you can focus on the new window\n    resultsWindow.focus();\n\n        // Open the result page in the current window\n        window.location.href = './TestResultsPage';\n\n      };\n\n\n\n    const handleQuestionSelect = (questionNumber) => {\n        setCurrentQuestionIndex(questionNumber - 1);\n        setActiveQuestion(questionNumber - 1);\n    };\n\n\n\n\n\n\n\n    return (\n\n        <div className=\"Main-Page\">\n            <div>\n                <div>\n                    <PaperHeader />\n                </div>\n                <div className=\"subjects\">\n                    {Subjects.map((subjectTitle, index) => (\n                        <li key={index}>\n                            <Link ><button className=\"subject-btn\" onClick={() => handleSubjectSelect(subjectTitle.subjectName)}>{subjectTitle.subjectName}</button></Link>\n                            {/* <button className=\"subject-btn\">{subjectTitle.subjectName}</button> */}\n                        </li>\n                    ))}\n\n                </div>\n                <div className=\"second-header\">\n                    <div className=\"single-select-question\">\n                        {sections.map((sectionTitle, index) => (\n                            <li key={index}>\n                                <p>{sectionTitle.sectionName}</p>\n\n                            </li>\n                        ))}\n                        {/* Single Select Question */}\n                    </div>\n                    <div className=\"right-header\">\n                        <div className=\"marks\">\n                            Marks: <div className=\"plus-mark\">+1</div>\n                            <div className=\"minus-mark\">-1</div>\n                        </div>\n                        <div>Timer: {formatTime(timer)}</div>\n                    </div>\n                </div>\n                <div>\n                    <p>  Question No. {currentQuestionIndex + 1}  of {questionData.length}</p>\n                </div>\n\n                {questionData.length > 0 && (\n                    <div>\n                        <h4>\n                            {/* {currentQuestionIndex + 1}. */}\n\n                            <img\n                                src={`data:image/png;base64,${questionData[currentQuestionIndex].question_img}`}\n                                alt={`Question ${currentQuestionIndex + 1}`}\n                            />\n                        </h4>\n\n                        {questionData[currentQuestionIndex].options.map(\n                            (OptionImage, optionIndex) => (\n                                <li key={optionIndex}>\n                                    <input\n                                        type=\"radio\"\n                                        name={`question-${currentQuestionIndex}-option`}\n                                        value={optionIndex}\n                                        checked={\n                                            selectedAnswers[currentQuestionIndex] === optionIndex\n                                        }\n                                        onChange={() => onAnswerSelected(optionIndex)}\n                                    />\n                                    {OptionImage && OptionImage.option_img && (\n                                        <img\n                                            key={OptionImage.question_id}\n                                            src={`data:image/png;base64,${OptionImage.option_img}`}\n                                            alt={`Option ${optionIndex + 1}`}\n                                        />\n                                    )}\n                                </li>\n                            )\n                        )}\n                        <div className=\"flex-right\">\n                            <button className=\"clear-btn\" onClick={markForReview}>\n                                Mark for Review & Next\n                            </button>\n                            <button className=\"clear-btn\" onClick={clearResponse}>\n                                Clear Response\n                            </button>\n                            <button\n                                className=\"previous-btn\"\n                                onClick={goToPreviousQuestion}\n                                disabled={currentQuestionIndex === 0}\n                            >\n                                <i className=\"fa-solid fa-angles-left\"></i> Previous\n                            </button>\n                            <button className=\"save-btn\" onClick={handleNextClick}>\n                                Next <i className=\"fa-solid fa-angles-right\"></i>\n                            </button>\n                        </div>\n                    </div>\n                )}\n\n            </div>\n\n\n            <div className=\"rightsidebar\">\n                <ButtonsFunctionality\n                    onQuestionSelect={handleQuestionSelect}\n                    questionStatus={questionStatus}\n                    setQuestionStatus={setQuestionStatus}\n                    answeredCount={answeredCount}\n                    notAnsweredCount={notAnsweredCount}\n                    answeredmarkedForReviewCount={answeredmarkedForReviewCount}\n                    markedForReviewCount={markedForReviewCount}\n                    VisitedCount={VisitedCount}\n                    selectedSubject={selectedSubject}\n                    questionData={questionData}\n                />\n                 {showResult ? (\n            <TestResultsPage\n                answeredCount={answeredCount}\n                notAnsweredCount={notAnsweredCount}\n                markedForReviewCount={markedForReviewCount}\n                answeredmarkedForReviewCount={answeredmarkedForReviewCount}\n                VisitedCount={VisitedCount}\n            />\n        ) : (\n            <div>\n                {/* ... (existing code for the test-taking interface) */}\n                <button onClick={handleSubmit} id=\"resume_btn\">\n                    Submit\n                </button>\n            </div>\n        )}\n            </div>\n        </div>\n    )\n}\n\nexport default QuestionsFunctionality"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}