[{"/home/user/Documents/egate_Quiz_project/src/index.js":"1","/home/user/Documents/egate_Quiz_project/src/App.js":"2","/home/user/Documents/egate_Quiz_project/src/Pages/QuizHome/QuizHome.jsx":"3","/home/user/Documents/egate_Quiz_project/src/Pages/HomeLandingPage/CoursePage.jsx":"4","/home/user/Documents/egate_Quiz_project/src/Pages/SubjectTest/SubjectTest.jsx":"5","/home/user/Documents/egate_Quiz_project/src/Pages/HomeLandingPage/HomeLandingPage.jsx":"6","/home/user/Documents/egate_Quiz_project/src/Pages/Paper/Paper1.jsx":"7","/home/user/Documents/egate_Quiz_project/src/Pages/Paper/Document_ImageInfo.jsx":"8","/home/user/Documents/egate_Quiz_project/src/Pages/General_intructions_page/General_intructions_page.jsx":"9","/home/user/Documents/egate_Quiz_project/src/Pages/Instructions/Instructions.jsx":"10","/home/user/Documents/egate_Quiz_project/src/Pages/FullTest/FullTest.jsx":"11","/home/user/Documents/egate_Quiz_project/src/Pages/Payment/Payment.jsx":"12","/home/user/Documents/egate_Quiz_project/src/Pages/DownloadQuizPage/DownloadQuizPage.jsx":"13","/home/user/Documents/egate_Quiz_project/src/Data/Introduction_page_DATA.js":"14","/home/user/Documents/egate_Quiz_project/src/Pages/HomeLandingPage/Data/HomeLandingPage.js":"15","/home/user/Documents/egate_Quiz_project/src/Pages/Paper/Paper.jsx":"16","/home/user/Documents/egate_Quiz_project/src/Components/LeftSidebar/LeftSidebar.jsx":"17","/home/user/Documents/egate_Quiz_project/src/Components/PaperHeader/PaperHeader.jsx":"18","/home/user/Documents/egate_Quiz_project/src/Pages/RightSidebar/RightSidebar.jsx":"19","/home/user/Documents/egate_Quiz_project/src/Pages/MainQuizFunctionality/QuestionsFunctionality.jsx":"20","/home/user/Documents/egate_Quiz_project/src/Pages/MainQuizFunctionality/ButtonsFunctionality.jsx":"21","/home/user/Documents/egate_Quiz_project/src/Pages/MainQuizFunctionality/TestResultsPage.jsx":"22","/home/user/Documents/egate_Quiz_project/src/Pages/Paper/Radius.jsx":"23"},{"size":256,"mtime":1702026299916,"results":"24","hashOfConfig":"25"},{"size":2583,"mtime":1702640867702,"results":"26","hashOfConfig":"25"},{"size":310,"mtime":1702026357030,"results":"27","hashOfConfig":"25"},{"size":6561,"mtime":1702026357014,"results":"28","hashOfConfig":"25"},{"size":22083,"mtime":1702026357030,"results":"29","hashOfConfig":"25"},{"size":28850,"mtime":1702026357014,"results":"30","hashOfConfig":"25"},{"size":49999,"mtime":1702026357030,"results":"31","hashOfConfig":"25"},{"size":2379,"mtime":1702026357030,"results":"32","hashOfConfig":"25"},{"size":10356,"mtime":1702026357014,"results":"33","hashOfConfig":"25"},{"size":13410,"mtime":1702026357030,"results":"34","hashOfConfig":"25"},{"size":64750,"mtime":1702026357014,"results":"35","hashOfConfig":"25"},{"size":289,"mtime":1702026357030,"results":"36","hashOfConfig":"25"},{"size":195,"mtime":1702026357010,"results":"37","hashOfConfig":"25"},{"size":5655,"mtime":1702026299904,"results":"38","hashOfConfig":"25"},{"size":2965,"mtime":1702026357014,"results":"39","hashOfConfig":"25"},{"size":84628,"mtime":1702272287785,"results":"40","hashOfConfig":"25"},{"size":1635,"mtime":1702026357010,"results":"41","hashOfConfig":"25"},{"size":302,"mtime":1702026299904,"results":"42","hashOfConfig":"25"},{"size":10738,"mtime":1702026357010,"results":"43","hashOfConfig":"25"},{"size":43548,"mtime":1702644603015,"results":"44","hashOfConfig":"25"},{"size":8957,"mtime":1702554959870,"results":"45","hashOfConfig":"25"},{"size":1452,"mtime":1702453526615,"results":"46","hashOfConfig":"25"},{"size":1894,"mtime":1702639010896,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"nk883b",{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"51"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"51"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"51"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"51"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"51"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"51"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"51"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"51"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"51"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/user/Documents/egate_Quiz_project/src/index.js",[],[],["127"],"/home/user/Documents/egate_Quiz_project/src/App.js",["128","129","130","131","132"],[],"/home/user/Documents/egate_Quiz_project/src/Pages/QuizHome/QuizHome.jsx",[],[],"/home/user/Documents/egate_Quiz_project/src/Pages/HomeLandingPage/CoursePage.jsx",[],[],"/home/user/Documents/egate_Quiz_project/src/Pages/SubjectTest/SubjectTest.jsx",["133","134"],[],"// import React, { useEffect, useRef, useState } from 'react';\n// import './SubjectTest.css'\n// import { useNavigate } from 'react-router-dom'\n// import HomeHeader from '../../Components/HomeHeader/HomeHeader';\n\n// const SubjectTest = ({ seconds }) => {\n\n//     const [countdown, setCountdown] = useState(seconds);\n//     const timerId = useRef();\n\n//     useEffect(() => {\n//         if (countdown <= 0) {\n//             clearInterval(timerId.current);\n//             alert(\"End\");\n//         }\n//     }, [countdown]);\n//     const navigate = useNavigate();\n//     const startCountdown = () => {\n//         timerId.current = setInterval(() => {\n//             setCountdown((prev) => prev - 1);\n//         }, 1000);\n//         navigate('/Paper');\n\n//     };\n\n//     const myComponentStyle1 = {\n//         color: 'white'\n//     }\n//     const myComponentStyle2 = {\n//         color: 'white'\n//     }\n//     return (\n//         <div className='home-main-page'>\n//             <div>\n//                 <HomeHeader />\n//             </div>\n//             <div className='test-card'>\n//                 <div className='test-card-header'>\n//                     <div className='test-contents1'><h3 className='jee-test-1'>JEE MAIN 2024 TEST-1</h3><span style={myComponentStyle2} class=\"material-symbols-outlined\">\n//                         lock_open\n//                     </span></div>\n//                     <p className='testCard-second-header'>Available Till: 31 May,2024</p>\n//                     <p className='free-title'>FREE</p>\n//                 </div>\n//                 <div>\n//                     <div className='test-contents2'><span style={myComponentStyle1} class=\"material-symbols-outlined\">help</span><p>90 Questions</p></div>\n\n//                     <div className='test-contents2'><span style={myComponentStyle1} class=\"material-symbols-outlined\">\n//                         schedule\n//                     </span><p>180 Minutes</p></div>\n\n//                     <div className='test-contents2'><span style={myComponentStyle1} class=\"material-symbols-outlined\">\n//                         trending_up\n//                     </span><p>300 Marks</p></div>\n\n//                     <div className='test-btn'><button onClick={startCountdown} className='play-btn'><span class=\"material-symbols-outlined\">\n//                         chevron_right\n//                     </span>Start Test</button></div>\n\n//                 </div>\n//             </div>\n//         </div>\n//     )\n// }\n\n// export default SubjectTest\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./SubjectTest.css\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport axios from \"axios\";\nimport logo from \"../../Images/logo.jpg\";\nimport LeftSidebar from \"../../Components/LeftSidebar/LeftSidebar\";\nimport Instructions from \"../Instructions/Instructions\";\nimport PhoneInput from \"react-phone-number-input\";\nimport \"react-phone-number-input/style.css\";\nconst SubjectTest = () => {\n  //{ seconds }\n\n  const [testCard, setTestCard] = useState([]);\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:4009/test_paper/201\")\n      .then((response) => {\n        setTestCard(response.data);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching data:\", error);\n      });\n  }, []);\n\n  // const [countdown, setCountdown] = useState(seconds);\n  // const timerId = useRef();\n\n  // useEffect(() => {\n  //     if (countdown <= 0) {\n  //         clearInterval(timerId.current);\n  //         alert(\"End\");\n  //     }\n  // }, [countdown]);\n  // const navigate = useNavigate();\n  // const startCountdown = () => {\n  //     timerId.current = setInterval(() => {\n  //         setCountdown((prev) => prev - 1);\n  //     }, 1000);\n  //     navigate('/Paper');\n  // };\n\n  const myComponentStyle1 = {\n    // color: 'white'\n  };\n  const myComponentStyle2 = {\n    // color: 'white'\n  };\n  // const [showAlert1, setShowAlert1] = useState(false);\n  // const [showAlert2, setShowAlert2] = useState(false);\n\n  // const openAlert1 = () => {\n  //     setShowAlert1(true);\n  // };\n\n  // const closeAlert1 = () => {\n  //     setShowAlert1(false);\n  // };\n\n  // const openAlert2 = () => {\n  //     setShowAlert2(true);\n  // };\n\n  // const closeAlert2 = () => {\n  //     setShowAlert2(false);\n  // };\n\n  // const countries = [\n  //     { id: \"1\", name: \"INDIA\" },\n  //     { id: \"2\", name: \"USA\" },\n  //     { id: \"3\", name: \"GERMANY\" },\n  //     { id: \"4\", name: \"KOREA\" },\n  //     { id: \"5\", name: \"AFRICA\" },\n  // ];\n\n  // const states = [\n  //     { id: \"1\", countryId: \"1\", name: \"Haryana\" },\n  //     { id: \"2\", countryId: \"1\", name: \"Delhi\" },\n  //     { id: \"3\", countryId: \"1\", name: \"Telangana\" },\n  //     { id: \"4\", countryId: \"1\", name: \"Andhra Pradesh\" },\n  //     { id: \"5\", countryId: \"2\", name: \"Texas\" },\n  //     { id: \"6\", countryId: \"2\", name: \"California\" },\n  // ];\n\n  // const cities = [\n  //     { id: \"1\", stateId: \"1\", name: \"Faridabad\" },\n  //     { id: \"2\", stateId: \"1\", name: \"Palwal\" },\n  //     { id: \"3\", stateId: \"2\", name: \"Mandi House\" },\n  //     { id: \"4\", stateId: \"2\", name: \"kalka Ji\" },\n  //     { id: \"5\", stateId: \"3\", name: \"Hyderabad\" },\n  //     { id: \"6\", stateId: \"3\", name: \"Gachibowli\" },\n\n  //     { id: \"1\", stateId: \"5\", name: \"Houston\" },\n  //     { id: \"2\", stateId: \"5\", name: \"Austin\" },\n  //     { id: \"3\", stateId: \"6\", name: \"Los Angeles\" },\n  //     { id: \"4\", stateId: \"6\", name: \"Son Diego\" },\n  //     { id: \"5\", stateId: \"4\", name: \"Vijyawada\" },\n  //     { id: \"6\", stateId: \"4\", name: \"Thirupati\" },\n  // ];\n\n  // const [country, setCountry] = useState([]);\n  // const [state, setState] = useState([]);\n  // const [city, setCity] = useState([]);\n\n  // useEffect(() => {\n  //     setCountry(countries);\n  // }, []);\n\n  // const handleCountry = (id) => {\n  //     const dt = states.filter((x) => x.countryId === id);\n  //     setState(dt);\n  // };\n\n  // const handleState = (id) => {\n  //     const dt = cities.filter((x) => x.stateId === id);\n  //     setCity(dt);\n  // };\n\n  // const [value, setValue] = useState();\n\n  // var User = null;\n\n  // const [isOpen1, setIsOpen1] = useState(false);\n  // const [isOpen2, setIsOpen2] = useState(false);\n  return (\n    <div className=\"main_conatiner\">\n      {/*******************starting code NAVBAR CONTENT ****************/}\n      <div>\n        <div className=\"navbar-div\">\n          <img src={logo} alt=\"logo\" width=\"250px\" />\n\n          <div className=\"auth-btn\">\n            <div className=\"Login_logOUT\">\n              {/* {!User ? ( */}\n              {/* <div >\n                                    <div><button onClick={openAlert1}>LOGIN</button>\n                                        <button onClick={openAlert2}>SIGNUP</button></div>\n\n\n                                </div> */}\n              {/* // ) : ( */}\n              {/* <>\n                                    <button onClick={() => setIsOpen1(!isOpen1)}>{User}</button>\n                                    {isOpen1 && (\n                                        <div>\n                                            <div>\n                                                <p>Profile</p>\n                                                <p>Log Out</p>\n                                            </div>\n                                        </div>\n\n                                    )}\n                                    <div>\n                                        <button onClick={() => setIsOpen2(!isOpen2)}>Courses</button>\n                                        {isOpen2 && (\n                                            <div>\n                                                <p>IIT</p>\n                                                <p>JEE</p>\n                                            </div>\n                                        )}\n                                    </div>\n                                </> */}\n              {/* )} */}\n            </div>\n            {/* <div>\n              {\n                User = null ?<div><button onClick={openAlert1}>LOGIN</button> \n                  <button onClick={openAlert2}>SIGNUP</button></div>: \n                <>\n                  <button onClick={() => setIsOpen1(!isOpen1)}>{User}</button>\n                  {isOpen1 && (\n                    <div>\n                      <p>Profile</p>\n                      <p>Log Out</p>\n                    </div>\n                  )}\n                  <div>\n                      <button onClick={() => setIsOpen2(!isOpen2)}>Courses</button>\n                      {isOpen2 && (\n                        <div>\n                          <p>Profile</p>\n                          <p>Log Out</p>\n                        </div>\n                      )}\n                  </div>\n                </>\n              }\n            </div> */}\n            {/* <div><button onClick={openAlert1}>LOGIN</button></div> */}\n            {/* <div><button onClick={openAlert2}>SIGNUP</button></div> */}\n            {/* {\n              dropDown && (\n                <div>\n                  <button onClick={() => setIsOpen(!isOpen)}>Toggle Dropdown</button>\n                  {isOpen && (\n                    <div>\n                      <p>Profile</p>\n                      <p>Log Out</p>\n                    </div>\n                  )}\n                </div>\n              )\n            } */}\n          </div>\n        </div>\n      </div>\n      {/*******************end code NAVBAR CONTENT ****************/}\n\n      {/********************* Show alert 1 start code ****************/}\n\n      {/* {showAlert1 && (\n                <div id=\"divContent1\">\n                 \n                    <div>\n                        <div className=\"login_close_container\">\n                            <h4>LOGIN</h4>\n                            <p>\n                                <span\n                                    id=\"close-icon\"\n                                    class=\"material-symbols-outlined\"\n                                    onClick={closeAlert1}\n                                >\n                                    close\n                                </span>\n                            </p>\n                        </div>\n                        <form action=\"\" id=\"form\">\n                            <p>\n                                <h5>Mobile Number or Email :</h5>\n                                <input\n                                    type=\"text\"\n                                    placeholder=\"Enter your Mobile Number or Email\"\n                                />\n                            </p>\n                            <p>\n                                <h5>Password :</h5>\n                                <input type=\"text\" placeholder=\"Enter your Password\" />\n                            </p>\n                            <p>\n                                <Link>Forgot Password?</Link>\n                            </p>\n                        </form>\n                        <div>\n                            <button>Submit</button>\n                            <button onClick={openAlert2}>Don't Have Account? SIGNUP</button>\n                        </div>\n                    </div>\n                </div>\n            )} */}\n\n      {/********************* Show alert 1 end code ****************/}\n\n      {/********************* Show alert 2 start code ****************/}\n      {/* {showAlert2 && (\n                <div id='divContent2'>\n\n                    <div>\n                        <div className='login_close_container'><h4>SIGNUP</h4><p><span id='close-icon' class=\"material-symbols-outlined\" onClick={closeAlert2}>\n                            close\n                        </span></p></div>\n                        ***************** form start code ******************\n                        <form action=\"\" id='form'>\n                            <p>\n                                <h5>Name :</h5>\n                                <input type=\"text\" placeholder=\"Enter your Name\" />\n                            </p>\n                            <p>\n                                <h5>Email Address :</h5>\n                                <input type=\"text\" placeholder=\"Enter your Email Address\" />\n                            </p>\n                            <p>\n                                <PhoneInput\n                                    placeholder=\"Enter phone number\"\n                                    value={value}\n                                    onChange={setValue} />\n                            </p>\n                            <p>\n                                <h5>Password :</h5>\n                                <input type=\"password\" placeholder=\"Enter your password\" />\n                            </p>\n                            <p><select id=\"ddlCountry\" className='form-control select-class' onChange={(e) => handleCountry(e.target.value)}>\n                                <option value=\"0\">Select Country</option>\n                                {\n                                    country &&\n                                        country !== undefined ?\n                                        country.map((ctr, index) => {\n                                            return (\n                                                <option key={index} value={ctr.id}>{ctr.name}</option>\n                                            )\n                                        })\n                                        : \"No Country\"\n\n                                }\n                            </select>\n                            </p>\n                            <br></br>\n                            <p><select id=\"ddlStates\" className='form-control select-class' onChange={(e) => handleState(e.target.value)}>\n                                <option value=\"0\">Select State</option>\n                                {\n                                    state &&\n                                        state !== undefined ?\n                                        state.map((ctr, index) => {\n                                            return (\n                                                <option key={index} value={ctr.id}>{ctr.name}</option>\n                                            )\n                                        })\n                                        : \"No State\"\n\n                                }\n                            </select>\n                            </p>\n                            <br></br>\n                            <p><select id=\"ddlCity\" className='form-control select-class'>\n                                <option value=\"0\">Select City</option>\n                                {\n                                    city &&\n                                        city !== undefined ?\n                                        city.map((ctr, index) => {\n                                            return (\n                                                <option key={index} value={ctr.id}>{ctr.name}</option>\n                                            )\n                                        })\n                                        : \"No City\"\n\n                                }\n                            </select>\n                            </p>\n                        </form>\n                        ***************** form end code ******************\n\n                        <div>\n                            <button>Submit</button>\n                            <button>Login</button>\n                        </div>\n                    </div>\n\n                </div>\n            )} */}\n      {/********************* Show alert 2 end code ****************/}\n\n      <div className=\"ls-bar-exam-page\">\n        {/****************** LeftSidebar Component render *******************/}\n        <div>\n          <LeftSidebar />\n        </div>\n\n        {/********************starting code Exam page Header  *****************/}\n        <div className=\"exam-middle-div\">\n          <div>\n            <h3 className=\"exam-heading\">JEE MAIN Full Test</h3>\n          </div>\n          <div className=\"home-main-page\">\n            {/* <h2>JEE MAIN Full Test</h2> */}\n            <div>\n              <div>\n                <div className=\"header-div1\">\n                  <p className=\"div-heading\">Online Test for JEE Main</p>\n                </div>\n                <div className=\"header-div2\">\n                  <div className=\"header-links\">\n                  <NavLink to='/' activeclassname=\"active\" className=\"content-link\">\n                      Full Test\n                    </NavLink>\n                  <NavLink to='/SubjectTest' activeclassname=\"active\" className=\"content-link\">\n                      Subject Test\n                    </NavLink>\n               \n                    {/* <NavLink activeclassname=\"active\" className=\"content-link\">\n                      Subject Test\n                    </NavLink> */}\n                    <NavLink  to='/ChapterTest'  activeclassname=\"active\" className=\"content-link\">\n                      Chapter Test\n                    </NavLink>\n                    <NavLink  to='/PreviousTest'  activeclassname=\"active\" className=\"content-link\">\n                      Previous Years{\" \"}\n                    </NavLink>\n                  </div>\n                </div>\n              </div>\n            </div>\n            {/********************end code Exam page Header  *****************/}\n\n            {/********************starting testcard code  *****************/}\n            <div className=\"test-card\">\n              <ul>\n                {/* {testData.map((item) => ( */}\n                {/* <li key={item.test_year_id}> */}\n                <li>\n                  <div className=\"test-card-header\">\n                    <div className=\"test-contents1\">\n                      <h3>\n                        JEE MAIN 2024 TEST-1\n                        {/* {item.year}-{item.paper_name} */}\n                      </h3>\n                      <span\n                        style={myComponentStyle2}\n                        class=\"material-symbols-outlined\"\n                      >\n                        lock_open\n                      </span>\n                    </div>\n                    <p className=\"testCard-second-header\">\n                      Available Till: 31 May,2024\n                    </p>\n                    <p className=\"free-title\">FREE</p>\n                  </div>\n                  <div>\n                    <div className=\"test-contents2\">\n                      <span\n                        style={myComponentStyle1}\n                        class=\"material-symbols-outlined\"\n                      >\n                        help\n                      </span>\n                      <p>90 Questions</p>\n                    </div>\n                    <div className=\"test-contents2\">\n                      <span\n                        style={myComponentStyle1}\n                        class=\"material-symbols-outlined\"\n                      >\n                        schedule\n                      </span>\n                      <p>180 Minutes</p>\n                    </div>\n                    <div className=\"test-contents2\">\n                      <span\n                        style={myComponentStyle1}\n                        class=\"material-symbols-outlined\"\n                      >\n                        trending_up\n                      </span>\n                      <p>300 Marks</p>\n                    </div>\n                    <div className=\"test-btn\">\n                      <Link\n                        className=\"play-btn\"\n                        to=\"/Instructions\"\n                        element={<Instructions />}\n                      >\n                        <span class=\"material-symbols-outlined\">\n                          chevron_right\n                        </span>\n                        Start Test\n                      </Link>\n                    </div>\n                  </div>\n                </li>\n                {/* ))} */}\n              </ul>\n            </div>\n            {/********************end testcard code  *****************/}\n          </div>\n        </div>\n      </div>\n\n      {/*       \n      {\n        afterlogin_dashboard &&\n        <div className=\"dashboard\" id=\"dashboard\">\n\n        </div>\n      } */}\n    </div>\n    // <div className='home-main-page'>\n    //     <div>\n    //         <HomeHeader />\n    //     </div>\n    //     <div className='test-card'>\n    //         <div className='test-card-header'>\n    //             <div className='test-contents1'><h3 className='jee-test-1'>JEE MAIN 2024 TEST-1</h3><span style={myComponentStyle2} class=\"material-symbols-outlined\">\n    //                 lock_open\n    //             </span></div>\n    //             <p className='testCard-second-header'>Available Till: 31 May,2024</p>\n    //             <p className='free-title'>FREE</p>\n    //         </div>\n    //         <div>\n    //             <div className='test-contents2'><span style={myComponentStyle1} class=\"material-symbols-outlined\">help</span><p>90 Questions</p></div>\n\n    //             <div className='test-contents2'><span style={myComponentStyle1} class=\"material-symbols-outlined\">\n    //                 schedule\n    //             </span><p>180 Minutes</p></div>\n\n    //             <div className='test-contents2'><span style={myComponentStyle1} class=\"material-symbols-outlined\">\n    //                 trending_up\n    //             </span><p>300 Marks</p></div>\n\n    //             {/* <div className='test-btn'><button onClick={startCountdown} className='play-btn'><span class=\"material-symbols-outlined\">\n    //                 chevron_right\n    //             </span>Start Test</button></div> */}\n    //             <div className='test-btn'>\n    //                 <Link className='play-btn' to='/Instructions' element={<Instructions />}><span class=\"material-symbols-outlined\">\n    //                     chevron_right\n    //                 </span>Start Test</Link>\n    //             </div>\n\n    //         </div>\n    //     </div>\n    // </div>\n  );\n};\n\nexport default SubjectTest;\n","/home/user/Documents/egate_Quiz_project/src/Pages/HomeLandingPage/HomeLandingPage.jsx",["135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163"],[],"import React, { useEffect, useState } from \"react\";\nimport iitjee from \"../../Images/iit-jee-course.jpg\";\nimport neet from \"../../Images/neet.jpg\";\nimport axios from \"axios\";\n\nimport { Link, useParams } from \"react-router-dom\";\nimport { Carousel } from \"react-responsive-carousel\";\n\n// ------------------------------------------------------------------------- Questions link---------------------------------------------\n\n// import Questions from '../Questions';\n// ------------------------------------------------------------------------- Exams link---------------------------------------------\n\n// import Exams from './Exams';\n// ------------------------------------------------------------------------- data ---------------------------------------------\n\nimport {\n  FooterData,\n  nav,\n  quiz__Home_continer_left,\n  quiz__Home_continer_right,\n} from \"./Data/HomeLandingPage\";\n\n// ------------------------------------------------------------------------- css ---------------------------------------------\n\nimport \"./HomeLandingPage.css\";\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\n\nconst HomeLandingPage = () => {\n  const [courses, setCourses] = useState([]);\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:4009/courses\")\n      .then((res) => {\n        setCourses(res.data);\n        console.log(res.data);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching data:\", error);\n      });\n  }, []);\n\n  // const [questions, setQuestions] = useState([]);\n  // useEffect(() => {\n  //     axios.get('http://localhost:3002/ug_questions')\n  //         .then((res) => {\n  //             setQuestions(res.data);\n  //             console.log(res.data)\n  //         })\n  //         .catch((error) => {\n  //             console.error('Error fetching data:', error);\n  //         });\n  // }, []);\n\n  // const [options, setOptions] = useState([]);\n  // useEffect(() => {\n  //     axios.get('http://localhost:3002/ug_questions/ug_options')\n  //         .then((res) => {\n  //             setOptions(res.data);\n  //             console.log(res.data)\n  //         })\n  //         .catch((error) => {\n  //             console.error('Error fetching data:', error);\n  //         });\n  // }, []);\n\n  return (\n    <>\n      <Header />\n      <Home_section />\n      <Quiz_Courses />\n      <Footer />\n\n      {/* <div>\n                <div className='courses'>\n                    {courses.map((courses, index) => (\n                        <h3 key={index}>\n                            {courses.course_id}.\n                            <Link to='/Questions' element={<Questions />}>\n                                {courses.course_name}\n                            </Link>\n                        </h3>\n                    ))}\n                </div> */}\n\n      {/* <div className='ug_questions'>\n                  {questions.map((questions,index)=> (\n                    <div key={questions.id}>\n                          {index+1}.<img src={questions.questionTitle} alt={`Question ${questions.id}`} />\n                          {options.map((options, index) => (\n                              <div key={options.id}>\n                                  <ul>\n                                      <li>\n                                          <img src={options.optionURL} alt={`Option ${options.id}`} />\n                                      </li>\n                                  </ul>\n                              </div>\n                          ))\n                          }\n                    </div>\n                ))}\n                 \n              </div> */}\n\n      {/* </div> */}\n    </>\n  );\n};\n\nexport default HomeLandingPage;\n\n// ------------------------------------------------------------------------- header start ---------------------------------------------\n\nexport const Header = () => {\n  // const [courses, setCourses] = useState([]);\n  const [examsug, setExamsug] = useState([0]);\n\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:4009/examsug\")\n      .then((res) => {\n        setExamsug(res.data);\n        console.log(res.data);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching data:\", error);\n      });\n  }, []);\n\n  // const [questions, setQuestions] = useState([]);\n  // useEffect(() => {\n  //     axios.get('http://localhost:3002/ug_questions')\n  //         .then((res) => {\n  //             setQuestions(res.data);\n  //             console.log(res.data)\n  //         })\n  //         .catch((error) => {\n  //         });\n  // }, []);\n\n  // const [options, setOptions] = useState([]);\n  // useEffect(() => {\n  //     axios.get('http://localhost:3002/ug_questions/ug_options')\n  //         .then((res) => {\n  //             setOptions(res.data);\n  //             console.log(res.data)\n  //         })\n  //         .catch((error) => {\n  //             console.error('Error fetching data:', error);\n  //         });\n  // }, []);\n  const [coursesBtnContainerVisible, setCoursesBtnContainerVisible] =\n    useState(false);\n  const toggleCoursesBtnContainer = () => {\n    setCoursesBtnContainerVisible(!coursesBtnContainerVisible);\n  };\n  const [showQuizmobilemenu, setShowQuizmobilemenu] = useState(false);\n\n  const QuiZ_menu = () => {\n    setShowQuizmobilemenu(!showQuizmobilemenu);\n  };\n  return (\n    <>\n      <div className=\"Quiz_main_page_header\">\n        {nav.map((nav, index) => {\n          return (\n            <div key={index} className=\"Quiz_main_page_navbar\">\n              <div className=\"logo\">\n                <img src={nav.logo} alt=\"\" />\n              </div>\n              {/* <li  className={showcardactive1?\"showcardactive\":\"showcardactivenone\"}> */}\n\n              <div\n                className={\n                  !showQuizmobilemenu\n                    ? \"Quiz_main_page_navbar_SUBpart Quiz_main_page_navbar_SUBpart_mobile\"\n                    : \"Quiz_main_page_navbar_SUBpart_mobile\"\n                }\n              >\n                <ul>\n                  <li>\n                    <a href=\"#home\" className=\"Quiz__home\">\n                      Home\n                    </a>\n                  </li>\n                  <li className=\"courses_btn_continer\">\n                    <button\n                      className=\"courses_btn\"\n                      onClick={toggleCoursesBtnContainer}\n                    >\n                      {\" \"}\n                      <h3>courses</h3>\n                    </button>\n                    {coursesBtnContainerVisible ? (\n                      <div className=\"courses\">\n                        {examsug.map((e) => {\n                          return (\n                            <div key={examsug.exam_id}>\n                              <a href=\"\">{e.exam_name} </a>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    ) : null}\n                  </li>\n                </ul>\n                <div className=\"Quiz_main_page_login_signUp_btn\">\n                  <button>\n                    {\" \"}\n                    <h3>Login</h3>\n                  </button>\n                  <button className=\"quiz_sign_UP\">\n                    {\" \"}\n                    <h3>Sign up</h3>\n                  </button>\n                </div>\n              </div>\n              <div className=\"quz_menu\" onClick={QuiZ_menu}>\n                <div className=\"lines\"></div>\n                <div className=\"lines\"></div>\n                <div className=\"lines\"></div>\n              </div>\n            </div>\n          );\n        })}\n\n        {/* <div className='ug_questions'>\n                  {questions.map((questions,index)=> (\n                    <div key={questions.id}>\n                          {index+1}.<img src={questions.questionTitle} alt={`Question ${questions.id}`} />\n                          {options.map((options, index) => (\n                              <div key={options.id}>\n                                  <ul>\n                                      <li>\n                                          <img src={options.optionURL} alt={`Option ${options.id}`} />\n                                      </li>\n                                  </ul>\n                              </div>\n                          ))\n                          }\n                    </div>\n                ))}\n                 \n              </div> */}\n      </div>\n    </>\n  );\n};\n\n// ------------------------------------------------------------------------- header end ---------------------------------------------\n\n// ------------------------------------------------------------------------- home section ---------------------------------------------\n\nexport const Home_section = () => {\n  return (\n    <>\n      <div className=\"quiz__Home_continer\" id=\"home\">\n        <div>\n          <div className=\"quiz__Home_continer_left\">\n            {quiz__Home_continer_left.map((home, index) => {\n              return (\n                <div key={index} className=\"quiz__Home_continer_left_subpart\">\n                  <h3>{home.home_title}</h3>\n                  <div className=\"home_highlight_btns\">\n                    {/* <button>{home.course1}</button> */}\n                    {/* <button>{home.course2}</button>\n                                        <button>{home.course3}</button>\n                                        <button>{home.course4}</button> */}\n                  </div>\n                  <div className=\"home_para_start\">\n                    <p>{home.our_info}</p>\n                    <button>\n                      {\" \"}\n                      <a href=\"#ugcoures\">{home.get_started} </a>\n                    </button>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n          <div className=\"quiz__Home_continer_right\">\n            {quiz__Home_continer_right.map((homer, index) => {\n              return (\n                <div key={index}>\n                  <Carousel\n                    autoPlay\n                    infiniteLoop\n                    interval={5000}\n                    showArrows={false}\n                    showStatus={false}\n                    showThumbs={false}\n                  >\n                    <div>\n                      <img src={homer.carousel1} alt=\"\" />\n                    </div>\n                    <div>\n                      <img src={homer.carousel2} alt=\"\" />\n                    </div>\n                    <div>\n                      <img src={homer.carousel3} alt=\"\" />\n                    </div>\n                    <div>\n                      <img src={homer.carousel4} alt=\"\" />\n                    </div>\n                  </Carousel>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\n//  export const Home_cards=()=>{\n//     return(\n//         <>\n//          {/* <Courses/> */}\n//             {/* <Dropdown /> */}\n//         </>\n//     )\n//  }\n\nexport const Quiz_Courses = () => {\n  const [coursesug, setCoursesug] = useState([]);\n  const [coursespg, setCoursespg] = useState([]);\n  const [coursesmba, setCoursesmba] = useState([]);\n  const [coursesca, setCoursesca] = useState([]);\n\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:4009/coursesug\")\n      .then((res) => {\n        setCoursesug(res.data);\n        console.log(coursesug);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching data:\", error);\n      });\n  }, []);\n\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:4009/coursespg\")\n      .then((res) => {\n        setCoursespg(res.data);\n        console.log(coursesug);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching data:\", error);\n      });\n  }, []);\n\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:4009/coursesmba\")\n      .then((res) => {\n        setCoursesmba(res.data);\n        console.log(coursesug);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching data:\", error);\n      });\n  }, []);\n\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:4009/coursesca\")\n      .then((res) => {\n        setCoursesca(res.data);\n        console.log(coursesug);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching data:\", error);\n      });\n  }, []);\n\n  const [examsug, setExamsug] = useState([0]);\n  const [examspg, setExamspg] = useState([0]);\n  const [examsmba, setExamsmba] = useState([0]);\n  const [examsca, setExamsca] = useState([0]);\n\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:4009/examsug\")\n      .then((res) => {\n        setExamsug(res.data);\n        console.log(setExamsug);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching data:\", error);\n      });\n  }, []);\n\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:4009/examspg\")\n      .then((res) => {\n        setExamspg(res.data);\n        console.log(setExamspg);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching data:\", error);\n      });\n  }, []);\n\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:4009/examsmba\")\n      .then((res) => {\n        setExamsmba(res.data);\n        console.log(setExamsmba);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching data:\", error);\n      });\n  }, []);\n  useEffect(() => {\n    axios\n      .get(\"http://localhost:4009/examsca\")\n      .then((res) => {\n        setExamsca(res.data);\n        console.log(setExamsca);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching data:\", error);\n      });\n  }, []);\n  const [showcard1, setshowcard1] = useState(true);\n  const [showcard2, setshowcard2] = useState(false);\n  const [showcard3, setshowcard3] = useState(false);\n  const [showcard4, setshowcard4] = useState(false);\n  const [showcardactive1, setshowcardactive1] = useState(true);\n  const [showcardactive2, setshowcardactive2] = useState(false);\n  const [showcardactive3, setshowcardactive3] = useState(false);\n  const [showcardactive4, setshowcardactive4] = useState(false);\n\n  const displayexamsug = () => {\n    setshowcard1(true);\n    setshowcard2(false);\n    setshowcard3(false);\n    setshowcard4(false);\n    setshowcardactive1(true);\n    setshowcardactive2(false);\n    setshowcardactive3(false);\n    setshowcardactive4(false);\n  };\n\n  const displayexamspg = () => {\n    setshowcard1(false);\n    setshowcard2(true);\n    setshowcard3(false);\n    setshowcard4(false);\n    setshowcardactive1(false);\n    setshowcardactive2(true);\n    setshowcardactive3(false);\n    setshowcardactive4(false);\n  };\n  const displayexamsmba = (e) => {\n    setshowcard1(false);\n    setshowcard2(false);\n    setshowcard3(true);\n    setshowcard4(false);\n    setshowcardactive1(false);\n    setshowcardactive2(false);\n    setshowcardactive3(true);\n    setshowcardactive4(false);\n  };\n  const displayexamsca = (e) => {\n    setshowcard1(false);\n    setshowcard2(false);\n    setshowcard3(false);\n    setshowcard4(true);\n    setshowcardactive1(false);\n    setshowcardactive2(false);\n    setshowcardactive3(false);\n    setshowcardactive4(true);\n  };\n\n  // ------------------------exam cards fetching code------------------------------------------\n\n  const [examCardName, setExamCardName] = useState([]);\n\n  useEffect(() => {\n    axios\n      .get(`http://localhost:4009/examData`)\n      .then((response) => {\n        setExamCardName(response.data);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching data:\", error);\n      });\n  }, []);\n\n\n  // const [examCardDetails, setExamCardDetails] = useState([]);\n  // const examId = useParams();\n  // useEffect(() => {\n  //   axios\n  //     .get(`http://localhost:4009/feachingcourse/${examId}`)\n  //     .then((response) => {\n  //       setExamCardDetails(response.data);\n  //     })\n  //     .catch((error) => {\n  //       console.error(\"Error fetching data:\", error);\n  //     });\n  // }, [examId]);\n  // ------------------------exam cards fetching code------------------------------------------\n  return (\n    <>\n      <div>\n        {/* // className=\"Quiz_cards_page\" id=\"ugcoures\" */}\n        <div>\n          {/* // className=\"Quiz_cards_page_titles\" */}\n          {/* ------------------------ ug cards----------------------------- */}\n\n          {/* <div onClick={displayexamsug}>\n            {coursesug.map((e, i) => {\n              return (\n                <div key={i}>\n                  <li\n                    className={\n                      showcardactive1 ? \"showcardactive\" : \"showcardactivenone\"\n                    }\n                  >\n                    {e.course_name}\n                  </li>\n                </div>\n              );\n            })}\n          </div> */}\n          {/* ------------------------ pg cards----------------------------- */}\n          {/* <div onClick={displayexamspg}>\n            {coursespg.map((e, i) => {\n              return (\n                <div key={i}>\n                  <li\n                    className={\n                      showcardactive2 ? \"showcardactive\" : \"showcardactivenone\"\n                    }\n                  >\n                    {e.course_name}\n                  </li>\n                </div>\n              );\n            })}\n          </div> */}\n          {/* ------------------------ mba cards----------------------------- */}\n\n          {/* <div onClick={displayexamsmba}>\n            {coursesmba.map((e, i) => {\n              return (\n                <div key={i}>\n                  <li\n                    className={\n                      showcardactive3 ? \"showcardactive\" : \"showcardactivenone\"\n                    }\n                  >\n                    {e.course_name}\n                  </li>\n                </div>\n              );\n            })}\n          </div> */}\n\n          {/* ------------------------ ca cards----------------------------- */}\n\n          {/* <div onClick={displayexamsca}>\n        {coursesca.map((e,i)=>{\n            return(\n                <div key={i}>\n                    <li className={showcardactive4?\"showcardactive\":\"showcardactivenone\"}>{e.course_name}</li>\n                </div>\n            )\n        })\n        }\n</div> */}\n        </div>\n\n        {/* <div> */}\n          {/* ------------------------ ug cards----------------------------- */}\n\n          {/* {showcard1 ? (\n            <div className=\"Quiz_cards_cantainer_contain\">\n              {examsug.map((e) => {\n                return (\n                  <div key={examsug.exam_id}>\n                    <Link to=\"/home\">\n                      <h1>{e.exam_name}</h1>{\" \"}\n                    </Link>\n                  </div>\n                );\n              })}\n            </div>\n          ) : null} */}\n          {/* ------------------------ pg cards----------------------------- */}\n\n          {/* {showcard2 ? (\n            <div className=\"Quiz_cards_cantainer_contain\">\n              {examspg.map((e) => {\n                return (\n                  <div key={examspg.exam_id}>\n                    <h1>{e.exam_name}</h1>\n                  </div>\n                );\n              })}\n            </div>\n          ) : null} */}\n\n          {/* ------------------------ mba cards----------------------------- */}\n\n          {/* {showcard3 ? (\n            <div className=\"Quiz_cards_cantainer_contain\">\n              {examsmba.map((e) => {\n                return (\n                  <div key={examsmba.exam_id}>\n                    <h1>{e.exam_name}</h1>\n                  </div>\n                );\n              })}\n            </div>\n          ) : null} */}\n\n          {/* ------------------------ ca cards----------------------------- */}\n\n          {/* {showcard4 ? (\n            <div className=\"Quiz_cards_cantainer_contain\">\n              {examsca.map((e) => {\n                return (\n                  <div key={examsca.exam_id}>\n                    <h1>{e.exam_name}</h1>\n                  </div>\n                );\n              })}\n            </div>\n          ) : null} */}\n        {/* </div> */}\n      </div>\n      <div className=\"CurrentCourses_div\">\n        <h1>Current Exams</h1>\n\n        <div className=\"card_container\">\n          {/* --------------practice-------------------- */}\n\n          <div className=\"first_card\">\n            {/* <div className=\"card\">\n              <div className=\"container\">\n                <ul className=\"card_container_ul\">\n                  {examCardDetails.map((cardDetails) => (\n                    <li key={cardDetails.courseCreationId}>\n                      <div>\n                        {examCardName.map((cardItem) => (\n                          <li className=\"card_name\" key={cardItem.examId}>\n                            <h4>{cardItem.examName}</h4>\n                           \n                          </li>\n                        ))}\n                      </div>\n                      <div className=\"card_container_li\">\n                        <img src={iitjee} alt=\"card\" width={350} />\n                        <h4>\n                          <b>{cardDetails.courseName}</b>\n                        </h4>\n                        <br />\n                        <p>\n                          Validity: ({cardDetails.courseStartDate}) to (\n                          {cardDetails.courseEndDate})\n                        </p>\n                        <br />\n                        <div className=\"start_now\">\n                          <Link to={`/FullTest/${cardDetails.courseCreationId}`}>Start Now</Link>\n                        </div>\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </div> */}\n            <div className=\"card\">\n              <div className=\"container\">\n                {\" \"}\n                <ul className=\"card_container_ul\">\n                  {examCardName.map((cardItem) => (\n                    <React.Fragment key={cardItem.examId}>\n                      <div className=\"card_container_li\">\n                        <img src={iitjee} alt=\"card\" width={350} />\n                        <h3>{cardItem.examName}</h3>\n                        <li>\n                          {\" \"}\n                          Validity: ({cardItem.startDate}) to (\n                          {cardItem.endDate})\n                        </li><li><br />\n                      <div className=\"start_now\">\n                          {/* <Link to={`/CoursePage/${cardItem.examId}`}>Start Now </Link */}\n                          <Link to={`/feachingcourse/${cardItem.examId}`}>Start Now </Link>\n                          {/* to={`/CoursePage/${cardItem.examId}`} */}\n                        </div>\n                        {/* <Link to={`/feachingcourse/${cardItem.examId}`}>\n                          View Courses for {cardItem.examName}\n                        </Link> */}\n                      </li>\n                      </div>\n\n                      \n                    </React.Fragment>\n                  ))}\n                </ul>\n              </div>\n            </div>\n\n            {/* </ul> */}\n          </div>\n\n          {/* --------------practice-------------------- */}\n        </div>\n      </div>\n    </>\n  );\n};\n\n// ------------------------------------------------------------------------- Footer ---------------------------------------------\n\nexport const Footer = () => {\n  return (\n    <div className=\"footer-container footerBg\">\n      <footer className=\"footer\">\n        {FooterData.map((footerItem, footerIndex) => {\n          return (\n            <div key={footerIndex} className={footerItem.footerCLass}>\n              <h4 className={footerItem.footerCs}>{footerItem.fotterTitles}</h4>\n              <p>{footerItem.text}</p>\n\n              <ul className=\"Footer_Ul_links\">\n                <Link to={footerItem.PrivacyPolicy}>\n                  <li>{footerItem.home}</li>\n                </Link>\n\n                <Link to={footerItem.TermsAndConditions}>\n                  <li>{footerItem.about}</li>\n                </Link>\n\n                <Link to={footerItem.RefundPolicy}>\n                  <li>\n                    {footerItem.career}\n                    {footerItem.icon}\n                  </li>\n                </Link>\n              </ul>\n\n              <div className=\"icontsFooter\">\n                <i id=\"footerIcons\" className={footerItem.fb}></i>\n                <i id=\"footerIcons\" className={footerItem.insta}></i>\n                <i id=\"footerIcons\" className={footerItem.linkedin}></i>\n                <i id=\"footerIcons\" className={footerItem.youtube}></i>\n              </div>\n            </div>\n          );\n        })}\n      </footer>\n      <div\n        className=\" footer-linkss\"\n        style={{\n          textAlign: \"center\",\n          borderTop: \"1px solid #fff\",\n          paddingTop: \"10px\",\n          paddingBottom: \"10px\",\n          color: \"#fff\",\n        }}\n      >\n        {\" \"}\n        <p style={{ margin: \"0 auto\" }}>\n          Copyright © 2023 eGradTutor All rights reserved\n        </p>\n        {/* <div className='linkIcons' style={{display: 'flex', }}>\n            <div className='bgIconLink'>\n            <i class=\"fa-brands fa-facebook\"></i>\n            </div>\n   \n            <div className='bgIconLink'>\n            <i class=\"fa-brands fa-instagram\"></i>          \n            </div>\n   \n            <div className='bgIconLink'>\n            <i class=\"fa-brands fa-linkedin\"></i>\n            </div>\n   \n            <div className='bgIconLink'>\n            <i class=\"fa-brands fa-youtube\"></i>          \n            </div>\n          </div>  */}\n      </div>\n    </div>\n  );\n};\n\n//  export const Courses = () => {\n\n//     const [courses, setCourses] = useState([]);\n\n//     useEffect(() => {\n//       axios.get('http://localhost:4009/courses')\n//         .then((res) => {\n//           setCourses(res.data);\n//           console.log(res.data)\n//         })\n//         .catch((error) => {\n//           console.error('Error fetching data:', error);\n//         });\n//     }, []);\n\n//     const [selectedCategory, setSelectedCategory] = useState('UG'); // Default to 'UG'\n//     const selectCategory = (category) => {\n//         setSelectedCategory(category);\n//       };\n//   return (\n//     <>\n//        <div className='Quiz_courses'>\n//          <div className='cou-container'>\n//           <ul className='course-unorderlist'>\n//             {courses.map((courses, index) => (\n//               <p className=\"courselist\" key={index}>\n\n//                <Dropdown Coureses_Name={courses.course_name} Coureses_Id={courses.course_id} />\n//               {/* <Link  className='link' to={`/quiz_coureses/${courses.Coureses_Id}`}>\n//                 {courses.course_name}\n//                 </Link> */}\n//               </p>\n//             ))}\n//           </ul>\n\n//         </div>\n//       </div>\n//     </>\n//   )\n// }\n\n// export const Dropdown = ({ Coureses_Name, Coureses_Id }) => {\n//     const [exams, setExams] = useState([]);\n//     const[examdefault,setExamdefault]=useState([0])\n//     useEffect(() => {\n//         axios.get('http://localhost:4009/examsdefult')\n//           .then((res) => {\n//             setExamdefault(res.data);\n//             console.log(examdefault)\n//           })\n//           .catch((error) => {\n//             console.error('Error fetching data:', error);\n//           });\n//       }, []);\n//     const displayexams = (e) => {\n//         setshowcard(!showcard)\n//       console.log(e.target.value)\n//       axios.get(`http://localhost:4009/exams/` + e.target.value)\n//         .then((res) => {\n//           setExams(res.data);\n//           console.log(res)\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching data:\", error);\n//         });\n//     }\n//     // const toggleCoursesBtnContainer = () => {\n//     //     //     setCoursesBtnContainerVisible(!coursesBtnContainerVisible);\n//     //     // };\n\n//     const[showcard, setshowcard] = useState(0);\n//     return (\n//       <div>\n// {\n//     examdefault.map((e)=>{\n//         return(\n//             <div key={examdefault.exam_id}>\n//         <h1>{e.exam_name}</h1>\n//             </div>\n//         )\n//     })\n// }\n\n//         <li className='buttonli' key={Coureses_Id}>\n\n//           <button className='button' value={Coureses_Id} onClick={displayexams}>\n//             {Coureses_Name}\n//             <p>\n//             </p>\n//           </button>\n\n//           <ul className={showcard ? \"exam\" :\"exam_none \"}>\n\n//             {exams.map((exam) => (\n//               <li className=\"exams-name\" key={exam.exam_id}>\n//                 {/* <Link className=\"examslink\" to={`/quiz_subjects/${exam.exam_id}`}>\n//                   {exam.exam_name}\n//                 </Link> */}\n//                 <Link className=\"examslink\" to='/test' >\n//                   {exam.exam_name}\n//                 </Link>\n\n//               </li>\n//             ))}\n\n//           </ul>\n\n//         </li>\n\n//       </div>\n//     )\n//   }\n","/home/user/Documents/egate_Quiz_project/src/Pages/Paper/Paper1.jsx",["164","165"],[],"// import React, { useEffect, useState } from \"react\";\n// // import { useParams } from \"react-router-dom\";\n\n// const Paper1 = () => {\n//   // const { subi_id } = useParams();\n//   //     const [quizData, setQuizData] = useState([]);\n\n//   // console.log(quizData)\n//   // useEffect(() => {\n//   //   // Fetch data from the endpoint\n//   //   fetch(`http://localhost:10000/quiz_all/`+subi_id)\n\n//   //     .then((response) => response.json())\n//   //     .then((data) => setQuizData(data))\n//   //     .catch((error) => console.error('Error fetching data:', error));\n//   // }, [subi_id]);\n\n//   const [subjectNames, setSubjectNames] = useState([]);\n\n//   useEffect(() => {\n//     fetch(`http://localhost:4009/quiz_all/1`)\n//       .then((response) => response.json())\n//       .then((data) => {\n//         console.log(data); // Log the data received from the API\n//         setSubjectNames(data);\n//       })\n//       .catch((error) => console.error(\"Error fetching data:\", error));\n//   }, []);\n\n//   // const [answer, setAnswer] = useState([]);\n//   // useEffect(() => {\n//   //   // Fetch data from the endpoint\n//   //   fetch(`http://localhost:4009/answers/`)\n//   //     .then((response) => response.json())\n//   //     .then((data) => setAnswer(data))\n//   //     .catch((error) => console.error(\"Error fetching data:\", error));\n//   // }, []);\n\n//   return (\n//     <div>\n//       <h1>hii</h1>\n\n//       <div>\n//         {Array.isArray(subjectNames) && subjectNames.length > 0 ? (\n//           <div>\n//             {subjectNames.map((subjects) => (\n//               <li key={subjects.subi_id}>\n//                 <p>{subjects.subject_name}</p>\n//               </li>\n//             ))}\n//           </div>\n//         ) : (\n//           <p>No subjects available.</p>\n//         )}\n//         {/* <ul>\n//            {subjectNames.map((item) => (\n//           <li key={item.subi_id}>\n//             <p>{item.subject_name}</p>\n//           </li>\n//         ))}\n//         </ul> */}\n\n//         {/* <button>Mathematics</button>\n//                 <button>Physics</button>\n//                 <button>Chemistry</button> */}\n//       </div>\n\n//       {/* answers display */}\n//       {/* <div>\n//       {answer.map((ans) => (\n//           <li key={ans.subi_id}>\n//             <p>{ans.answer}</p>\n//           </li>\n//         ))}\n//       </div> */}\n\n//       {/* <h1>Quiz Questions</h1> */}\n//       <div>\n//         {/* {quizData.map((question) => (\n//           <div key={question.question_id}>\n//             <h3>Question {question.question_id}</h3>\n//             <img\n//               src={`data:image/png;base64,${question.question_img}`}\n//               alt={`Question ${question.question_id}`}\n//             />\n//             <ul>\n//               {question.options.map((option) => (\n//                 <li key={option.option_id}>\n//                   <img\n//                     src={`data:image/png;base64,${option.option_img}`}\n//                     alt={`Option ${option.option_id}`}\n//                   />\n//                 </li>\n//               ))}\n//             </ul>\n//           </div>\n//         ))} */}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Paper1;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Link, useParams } from \"react-router-dom\";\n// import PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\n// import \"./Paper.css\";\n// const Paper1 = () => {\n//   const [questionData, setQuestionData] = useState([]);\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//   const [Subjects, setSubjects] = useState([]);\n//   const { testCreationTableId, subjectId } = useParams();\n//   const [sections, setSections] = useState([]);\n\n//   useEffect(() => {\n//     const fetchSubjects = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/subjects/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setSubjects(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchSubjects();\n//   }, [testCreationTableId]);\n\n//   useEffect(() => {\n//     const fetchSections = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/fetchSections/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setSections(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchSections();\n//   }, [testCreationTableId]);\n\n//   useEffect(() => {\n//     const fetchQuestionData = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/getPaperData/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setQuestionData(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchQuestionData();\n//   }, [testCreationTableId]);\n\n//   const [selectedAnswers, setSelectedAnswers] = useState(\n//     Array(questionData.length).fill(\"\")\n//   );\n\n//   const handleNextClick = () => {\n//     // Update the current question index to move to the next question\n//     setCurrentQuestionIndex((prevIndex) =>\n//       prevIndex < questionData.length - 1 ? prevIndex + 1 : prevIndex\n//     );\n//   };\n\n//   const onAnswerSelected = (optionIndex) => {\n//     const updatedSelectedAnswers = [...selectedAnswers];\n//     updatedSelectedAnswers[currentQuestionIndex] = optionIndex;\n//     setSelectedAnswers(updatedSelectedAnswers);\n//   };\n\n//   const [activeQuestion, setActiveQuestion] = useState(0);\n//   const clearResponse = () => {\n//     const updatedSelectedAnswers = [...selectedAnswers];\n//     updatedSelectedAnswers[activeQuestion] = \"\";\n//     setSelectedAnswers(updatedSelectedAnswers);\n//   };\n\n//   const goToPreviousQuestion = () => {\n//     setCurrentQuestionIndex((prevIndex) => {\n//       // Save the current timer value for the question\n\n//       const updatedTimers = [...timers];\n\n//       updatedTimers[prevIndex] = timer;\n\n//       setTimers(updatedTimers);\n\n//       // Move to the previous question\n\n//       return prevIndex - 1;\n//     });\n\n//     if (questionData > 0) {\n//       setActiveQuestion(questionData - 1);\n//     }\n//   };\n\n//   // ---------------------------------Timer code Start--------------------------------\n//   const [timer, setTimer] = useState(0);\n//   const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\n\n//   const formatTime = (seconds) => {\n//     const hours = Math.floor(seconds / 3600);\n\n//     const minutes = Math.floor((seconds % 3600) / 60);\n\n//     const remainingSeconds = seconds % 60;\n\n//     return `${hours > 9 ? hours : \"0\" + hours}:${\n//       minutes > 9 ? minutes : \"0\" + minutes\n//     }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n//   };\n\n//   useEffect(() => {\n//     // Set the timer to the saved value for the current question\n//     setTimer(timers[currentQuestionIndex] || 0);\n//     let interval;\n//     interval = setInterval(() => {\n//       setTimer((prevTimer) => prevTimer + 1);\n//     }, 1000);\n//     // Clear the interval when the component unmounts or when the user moves to the next question\n//     return () => {\n//       clearInterval(interval);\n//     };\n//   }, [currentQuestionIndex, timers]);\n//   // ------------------------------------Timer code end--------------------------------\n\n//   return (\n//     <div>\n//       <div>\n//         <PaperHeader />\n//       </div>\n//       <div className=\"subjects\">\n//         {Subjects.map((subjectTitle, index) => (\n//           <li key={index}>\n//             <button className=\"subject-btn\">{subjectTitle.subjectName}</button>\n//           </li>\n//         ))}\n//       </div>\n//       <div className=\"second-header\">\n//         <div className=\"single-select-question\">\n//           {sections.map((sectionTitle,index)=>(\n//             <li key={index}>\n//               <p>{sectionTitle.sectionName}</p>\n//             </li>\n//           ))}\n//           {/* Single Select Question */}\n//         </div>\n//         <div className=\"right-header\">\n//           <div className=\"marks\">\n//             Marks: <div className=\"plus-mark\">+1</div>\n//             <div className=\"minus-mark\">-1</div>\n//           </div>\n//           <div>Timer: {formatTime(timer)}</div>\n//         </div>\n//       </div>\n//       {questionData.length > 0 && (\n//         <div>\n//           <h4>\n//             {currentQuestionIndex + 1}.\n//             <img\n//               src={questionData[currentQuestionIndex].question_img}\n//               alt={`Question ${currentQuestionIndex + 1}`}\n//             />\n//           </h4>\n\n//           {questionData[currentQuestionIndex].optionImages.map(\n//             (OptionImage, optionIndex) => (\n//               <li key={optionIndex}>\n//                 <input\n//                   type=\"radio\"\n//                   name={`question-${currentQuestionIndex}-option`}\n//                   value={optionIndex}\n//                   checked={\n//                     selectedAnswers[currentQuestionIndex] === optionIndex\n//                   }\n//                   onChange={() => onAnswerSelected(optionIndex)}\n//                 />\n//                 <img\n//                   key={optionIndex}\n//                   src={OptionImage.option_img}\n//                   alt={`Option ${optionIndex + 1}`}\n//                 />\n//               </li>\n//             )\n//           )}\n//           <div className=\"flex-right\">\n//             <button className=\"clear-btn\" onClick={clearResponse}>\n//               Clear Response\n//             </button>\n//             <button\n//               className=\"previous-btn\"\n//               onClick={goToPreviousQuestion}\n//               disabled={questionData === 0}\n//             >\n//               <i className=\"fa-solid fa-angles-left\"></i> Previous\n//             </button>\n//             <button className=\"save-btn\" onClick={handleNextClick}>\n//               Next <i className=\"fa-solid fa-angles-right\"></i>\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Paper1;\n\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const Paper1 = () => {\n//   const [sections, setSections] = useState([]);\n//   const { testCreationTableId } = useParams();\n\n//   useEffect(() => {\n//     const fetchSections = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:4009/quiz_all/${testCreationTableId}`);\n\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! Status: ${response.status}`);\n//         }\n\n//         const data = await response.json();\n//         console.log('Received data:', data);\n//         setSections(data);\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//       }\n//     };\n\n//     fetchSections();\n//   }, [testCreationTableId]); // Use testCreationTableId as a dependency to trigger fetch when it changes\n\n//   return (\n//     <div>\n//       {Object.values(sections).map((section) => (\n//         <div key={section.sectionId}>\n//           <h2>{section.sectionName}</h2>\n//           {section.questions.map((question) => (\n//             <div key={question.qustion_id}>\n//               {/* Display question image */}\n//               <img src={`data:image/png;base64,${question.question_img}`} alt={`Question ${question.qustion_id}`} />\n\n//               {/* Display option images */}\n//               <ul>\n//                 {question.option_img.map((option, index) => (\n//                   <li key={index}>\n//                     <img src={`data:image/png;base64,${option.option_img}`} alt={`Option ${option.Option_Index}`} />\n//                   </li>\n//                 ))}\n//               </ul>\n//             </div>\n//           ))}\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default Paper1;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Link, useParams } from \"react-router-dom\";\n// import PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\n// import \"./Paper.css\";\n// const Paper1 = () => {\n//   const [questionData, setQuestionData] = useState([]);\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//   const [Subjects, setSubjects] = useState([]);\n//   const { testCreationTableId, subjectId } = useParams();\n//   const [sections, setSections] = useState([]);\n\n//   useEffect(() => {\n//     const fetchSubjects = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/subjects/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setSubjects(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchSubjects();\n//   }, [testCreationTableId]);\n\n//   useEffect(() => {\n//     const fetchSections = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/fetchSections/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setSections(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchSections();\n//   }, [testCreationTableId]);\n\n//   useEffect(() => {\n//     const fetchQuestionData = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/getPaperData/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setQuestionData(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchQuestionData();\n//   }, [testCreationTableId]);\n\n//   const [selectedAnswers, setSelectedAnswers] = useState(\n//     Array(questionData.length).fill(\"\")\n//   );\n\n//   const handleNextClick = () => {\n//     // Update the current question index to move to the next question\n//     setCurrentQuestionIndex((prevIndex) =>\n//       prevIndex < questionData.length - 1 ? prevIndex + 1 : prevIndex\n//     );\n//   };\n\n//   const onAnswerSelected = (optionIndex) => {\n//     const updatedSelectedAnswers = [...selectedAnswers];\n//     updatedSelectedAnswers[currentQuestionIndex] = optionIndex;\n//     setSelectedAnswers(updatedSelectedAnswers);\n//   };\n\n//   const [activeQuestion, setActiveQuestion] = useState(0);\n//   const clearResponse = () => {\n//     const updatedSelectedAnswers = [...selectedAnswers];\n//     updatedSelectedAnswers[activeQuestion] = \"\";\n//     setSelectedAnswers(updatedSelectedAnswers);\n//   };\n\n//   const goToPreviousQuestion = () => {\n//     setCurrentQuestionIndex((prevIndex) => {\n//       // Save the current timer value for the question\n\n//       const updatedTimers = [...timers];\n\n//       updatedTimers[prevIndex] = timer;\n\n//       setTimers(updatedTimers);\n\n//       // Move to the previous question\n\n//       return prevIndex - 1;\n//     });\n\n//     if (questionData > 0) {\n//       setActiveQuestion(questionData - 1);\n//     }\n//   };\n\n//   // ---------------------------------Timer code Start--------------------------------\n//   const [timer, setTimer] = useState(0);\n//   const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\n\n//   const formatTime = (seconds) => {\n//     const hours = Math.floor(seconds / 3600);\n\n//     const minutes = Math.floor((seconds % 3600) / 60);\n\n//     const remainingSeconds = seconds % 60;\n\n//     return `${hours > 9 ? hours : \"0\" + hours}:${\n//       minutes > 9 ? minutes : \"0\" + minutes\n//     }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n//   };\n\n//   useEffect(() => {\n//     // Set the timer to the saved value for the current question\n//     setTimer(timers[currentQuestionIndex] || 0);\n//     let interval;\n//     interval = setInterval(() => {\n//       setTimer((prevTimer) => prevTimer + 1);\n//     }, 1000);\n//     // Clear the interval when the component unmounts or when the user moves to the next question\n//     return () => {\n//       clearInterval(interval);\n//     };\n//   }, [currentQuestionIndex, timers]);\n//   // ------------------------------------Timer code end--------------------------------\n\n//   return (\n//     <div>\n//       <div>\n//         <PaperHeader />\n//       </div>\n//       <div className=\"subjects\">\n//         {Subjects.map((subjectTitle, index) => (\n//           <li key={index}>\n//             <button className=\"subject-btn\">{subjectTitle.subjectName}</button>\n//           </li>\n//         ))}\n//       </div>\n//       <div className=\"second-header\">\n//         <div className=\"single-select-question\">\n//           {sections.map((sectionTitle,index)=>(\n//             <li key={index}>\n//               <p>{sectionTitle.sectionName}</p>\n//             </li>\n//           ))}\n//           {/* Single Select Question */}\n//         </div>\n//         <div className=\"right-header\">\n//           <div className=\"marks\">\n//             Marks: <div className=\"plus-mark\">+1</div>\n//             <div className=\"minus-mark\">-1</div>\n//           </div>\n//           <div>Timer: {formatTime(timer)}</div>\n//         </div>\n//       </div>\n//       {questionData.length > 0 && (\n//         <div>\n//           <h4>\n//             {currentQuestionIndex + 1}.\n//             <img\n//               src={questionData[currentQuestionIndex].question_img}\n//               alt={`Question ${currentQuestionIndex + 1}`}\n//             />\n//           </h4>\n\n//           {questionData[currentQuestionIndex].optionImages.map(\n//             (OptionImage, optionIndex) => (\n//               <li key={optionIndex}>\n//                 <input\n//                   type=\"radio\"\n//                   name={`question-${currentQuestionIndex}-option`}\n//                   value={optionIndex}\n//                   checked={\n//                     selectedAnswers[currentQuestionIndex] === optionIndex\n//                   }\n//                   onChange={() => onAnswerSelected(optionIndex)}\n//                 />\n//                 <img\n//                   key={optionIndex}\n//                   src={OptionImage.option_img}\n//                   alt={`Option ${optionIndex + 1}`}\n//                 />\n//               </li>\n//             )\n//           )}\n//           <div className=\"flex-right\">\n//             <button className=\"clear-btn\" onClick={clearResponse}>\n//               Clear Response\n//             </button>\n//             <button\n//               className=\"previous-btn\"\n//               onClick={goToPreviousQuestion}\n//               disabled={questionData === 0}\n//             >\n//               <i className=\"fa-solid fa-angles-left\"></i> Previous\n//             </button>\n//             <button className=\"save-btn\" onClick={handleNextClick}>\n//               Next <i className=\"fa-solid fa-angles-right\"></i>\n//             </button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Paper1;\n\n// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const Paper1 = () => {\n//   const [sections, setSections] = useState([]);\n//   const { testCreationTableId } = useParams();\n\n//   useEffect(() => {\n//     const fetchSections = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:4009/quiz_all/${testCreationTableId}`);\n\n//         if (!response.ok) {\n//           throw new Error(`HTTP error! Status: ${response.status}`);\n//         }\n\n//         const data = await response.json();\n//         console.log('Received data:', data);\n//         setSections(data);\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//       }\n//     };\n\n//     fetchSections();\n//   }, [testCreationTableId]); // Use testCreationTableId as a dependency to trigger fetch when it changes\n\n//   return (\n//     <div>\n//       {Object.values(sections).map((section) => (\n//         <div key={section.sectionId}>\n//           <h2>{section.sectionName}</h2>\n//           {section.questions.map((question) => (\n//             <div key={question.qustion_id}>\n//               {/* Display question image */}\n//               <img src={`data:image/png;base64,${question.question_img}`} alt={`Question ${question.qustion_id}`} />\n\n//               {/* Display option images */}\n//               <ul>\n//                 {question.option_img.map((option, index) => (\n//                   <li key={index}>\n//                     <img src={`data:image/png;base64,${option.option_img}`} alt={`Option ${option.Option_Index}`} />\n//                   </li>\n//                 ))}\n//               </ul>\n//             </div>\n//           ))}\n//         </div>\n//       ))}\n//     </div>\n//   );\n// };\n\n// export default Paper1;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n\n// function Paper1() {\n\n//   const [questionData, setQuestionData] = useState([]);\n//   const {testCreationTableId} = useParams();\n\n//   useEffect(() => {\n//     const fetchQuestionData = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/getPaperData/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setQuestionData(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchQuestionData();\n//   }, [testCreationTableId]);\n\n//   return (\n//     <div>\n//       {/* Access data as needed, for example: */}\n\n//       {/* Map over questions and render them */}\n//       <div\n//         className=\"q1s\"\n//         style={{\n//           display: \"flex\",\n//           gap: \"4rem\",\n//           flexDirection: \"column\",\n//           width: \"85vw\",\n//           margin: \"2rem\",\n//         }}\n//       >\n//         {questionData.map((question, index) => (\n//           <div\n//             className=\"outColor\"\n//             style={{ background: \"#e5e5e5\", padding: \"2rem 2rem\" }}\n//           >\n//             <div key={question.question_id}>\n//               <div className=\"question\" key={index}>\n//                 <h3>{index + 1}</h3>\n//                 <img\n//                   src={`data:image/png;base64,${question.question_img}`}\n//                   alt=\"Question\"\n//                 />\n//               </div>\n\n//               {/* Map over options and render them */}\n//               {questionData\n//                 .filter((opt) => opt.question_id === question.question_id)\n//                 .map((option) => (\n\n//                     <img\n//                       key={option.question_id}\n//                       src={`data:image/png;base64,${option.option_img}`}\n//                       alt=\"Option\"\n//                     />\n\n//                 ))}\n\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Paper1;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n\n// function Paper1() {\n//   const [questionData, setQuestionData] = useState([]);\n\n//   const { testCreationTableId } = useParams();\n\n//   useEffect(() => {\n//     const fetchQuestionData = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/getPaperData/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n\n//         // Check if the data has both 'questions' and 'options' properties\n//         if (data && data.questions && data.options) {\n//           // Assuming both questions and options are arrays, you might want to merge them\n//           const mergedData = data.questions.map((question, index) => ({\n//             ...question,\n//             options: data.options.slice(index * 4, (index + 1) * 4), // Assuming 4 options per question\n//           }));\n\n//           setQuestionData(mergedData);\n//         } else {\n//           console.error(\"API response does not have expected structure:\", data);\n//         }\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchQuestionData();\n//   }, [testCreationTableId]);\n\n//   // useEffect(() => {\n//   //   const fetchQuestionData = async () => {\n//   //     try {\n//   //       const response = await fetch(\n//   //         `http://localhost:4009/getPaperData/${testCreationTableId}`\n//   //       );\n//   //       const data = await response.json();\n\n//   //       // Check if the data is an array before setting state\n//   //       if (Array.isArray(data)) {\n//   //         setQuestionData(data);\n//   //       } else {\n//   //         console.error(\"API response is not an array:\", data);\n//   //       }\n//   //     } catch (error) {\n//   //       console.error(error);\n//   //     }\n//   //   };\n\n//   //   fetchQuestionData();\n//   // }, [testCreationTableId]);\n\n//   return (\n//     <div>\n//       <div\n\n//       >\n//         {questionData.map((question, index) => (\n//           <div\n\n//             key={question.question_id}\n//           >\n//             <div className=\"question\" key={index}>\n//               <h3>{index + 1}</h3>\n//               <img\n//                 src={`data:image/png;base64,${question.question_img}`}\n//                 alt=\"Question\"\n//               />\n//             </div>\n\n//             {questionData\n//               .filter((opt) => opt.question_id === question.question_id)\n//               .map((option) => (\n//                 <img\n//                   key={option.question_id}\n//                   src={`data:image/png;base64,${option.option_img}`}\n//                   alt=\"Option\"\n//                 />\n//               ))}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Paper1;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\n// function Paper1() {\n//   const [questionData, setQuestionData] = useState([]);\n//   const { testCreationTableId } = useParams();\n\n//   useEffect(() => {\n//     const fetchQuestionData = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/getPaperData/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n\n//         // Check if the data has both 'questions' and 'options' properties\n//         if (data && data.questions && data.options) {\n//           // Assuming both questions and options are arrays, you might want to merge them\n//           const mergedData = data.questions.map((question, index) => ({\n//             ...question,\n//             options: data.options.slice(index * 4, (index + 1) * 4), // Assuming 4 options per question\n//           }));\n\n//           setQuestionData(mergedData);\n//         } else {\n//           console.error(\"API response does not have expected structure:\", data);\n//         }\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchQuestionData();\n//   }, [testCreationTableId]);\n\n//   const [Subjects, setSubjects] = useState([]);\n//   // const { testCreationTableId, subjectId } = useParams();\n//   const [sections, setSections] = useState([]);\n\n//   useEffect(() => {\n//     const fetchSubjects = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/subjects/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setSubjects(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchSubjects();\n//   }, [testCreationTableId]);\n\n//   useEffect(() => {\n//     const fetchSections = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/fetchSections/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setSections(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchSections();\n//   }, [testCreationTableId]);\n\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//   const [selectedAnswers, setSelectedAnswers] = useState(\n//     Array(questionData.length).fill(\"\")\n//   );\n\n//   const handleNextClick = () => {\n//     // Update the current question index to move to the next question\n//     setCurrentQuestionIndex((prevIndex) =>\n//       prevIndex < questionData.length - 1 ? prevIndex + 1 : prevIndex\n//     );\n//   };\n\n//   const onAnswerSelected = (optionIndex) => {\n//     const updatedSelectedAnswers = [...selectedAnswers];\n//     updatedSelectedAnswers[currentQuestionIndex] = optionIndex;\n//     setSelectedAnswers(updatedSelectedAnswers);\n//   };\n\n//   const [activeQuestion, setActiveQuestion] = useState(0);\n//   const clearResponse = () => {\n//     const updatedSelectedAnswers = [...selectedAnswers];\n//     updatedSelectedAnswers[activeQuestion] = \"\";\n//     setSelectedAnswers(updatedSelectedAnswers);\n//   };\n\n//   const goToPreviousQuestion = () => {\n//     setCurrentQuestionIndex((prevIndex) => {\n//       // Save the current timer value for the question\n\n//       const updatedTimers = [...timers];\n\n//       updatedTimers[prevIndex] = timer;\n\n//       setTimers(updatedTimers);\n\n//       // Move to the previous question\n\n//       return prevIndex - 1;\n//     });\n\n//     if (questionData > 0) {\n//       setActiveQuestion(questionData - 1);\n//     }\n//   };\n\n//   const [timer, setTimer] = useState(0);\n//   const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\n\n//   const formatTime = (seconds) => {\n//     const hours = Math.floor(seconds / 3600);\n\n//     const minutes = Math.floor((seconds % 3600) / 60);\n\n//     const remainingSeconds = seconds % 60;\n\n//     return `${hours > 9 ? hours : \"0\" + hours}:${\n//       minutes > 9 ? minutes : \"0\" + minutes\n//     }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n//   };\n\n//   useEffect(() => {\n//     // Set the timer to the saved value for the current question\n//     setTimer(timers[currentQuestionIndex] || 0);\n//     let interval;\n//     interval = setInterval(() => {\n//       setTimer((prevTimer) => prevTimer + 1);\n//     }, 1000);\n//     // Clear the interval when the component unmounts or when the user moves to the next question\n//     return () => {\n//       clearInterval(interval);\n//     };\n//   }, [currentQuestionIndex, timers]);\n\n//   return (\n//     <div>\n//       <div>\n//         <PaperHeader />\n//       </div>\n//       <div className=\"subjects\">\n//         {Subjects.map((subjectTitle, index) => (\n//           <li key={index}>\n//             <button className=\"subject-btn\">{subjectTitle.subjectName}</button>\n//           </li>\n//         ))}\n//       </div>\n//       <div className=\"second-header\">\n//         <div className=\"single-select-question\">\n//           {sections.map((sectionTitle, index) => (\n//             <li key={index}>\n//               <p>{sectionTitle.sectionName}</p>\n//             </li>\n//           ))}\n//           {/* Single Select Question */}\n//         </div>\n//         <div className=\"right-header\">\n//           <div className=\"marks\">\n//             Marks: <div className=\"plus-mark\">+1</div>\n//             <div className=\"minus-mark\">-1</div>\n//           </div>\n//           <div>Timer: {formatTime(timer)}</div>\n//         </div>\n//       </div>\n\n//           <div>\n//           {questionData.map((question, index) => (\n//             <>\n//               <div key={question.question_id}>\n//                 <div className=\"question\" key={index}>\n//                   <h3>{index + 1}</h3>\n//                   {question.question_img ? (\n//                     <img\n//                       src={`data:image/png;base64,${question.question_img}`}\n//                       alt=\"Question\"\n//                     />\n//                   ) : (\n//                     <p>No question image available</p>\n//                   )}\n//                 </div>\n\n//                 {question.options &&\n//                   question.options.map((option, optionIndex) => (\n//                     <div key={option.question_id}>\n//                       {option.option_img ? (\n//                         <li key={optionIndex}>\n//                           <input\n//                             type=\"radio\"\n//                             name={`question-${currentQuestionIndex}-option`}\n//                             value={optionIndex}\n//                             checked={\n//                               selectedAnswers[currentQuestionIndex] ===\n//                               optionIndex\n//                             }\n//                             onChange={() => onAnswerSelected(optionIndex)}\n//                           />\n//                           <img\n//                             src={`data:image/png;base64,${option.option_img}`}\n//                             alt=\"Option\"\n//                           />\n//                         </li>\n//                       ) : (\n//                         <p>No option image available</p>\n//                       )}\n//                     </div>\n//                   ))}\n//               </div>\n//               {/* <div className=\"flex-right\">\n//                 <button className=\"clear-btn\" onClick={clearResponse}>\n//                   Clear Response\n//                 </button>\n//                 <button\n//                   className=\"previous-btn\"\n//                   onClick={goToPreviousQuestion}\n//                   disabled={questionData === 0}\n//                 >\n//                   <i className=\"fa-solid fa-angles-left\"></i> Previous\n//                 </button>\n//                 <button className=\"save-btn\" onClick={handleNextClick}>\n//                   Next <i className=\"fa-solid fa-angles-right\"></i>\n//                 </button>\n//               </div> */}\n//             </>\n//           ))}\n//         </div>\n\n//     </div>\n//   );\n// }\n\n// export default Paper1;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\n// function Paper1() {\n//   const [questionData, setQuestionData] = useState([]);\n//   const { testCreationTableId } = useParams();\n\n//   useEffect(() => {\n//     const fetchQuestionData = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/getPaperData/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n\n//         // Check if the data has both 'questions' and 'options' properties\n//         if (data && data.questions && data.options) {\n//           // Assuming both questions and options are arrays, you might want to merge them\n//           const mergedData = data.questions.map((question, index) => ({\n//             ...question,\n//             options: data.options.slice(index * 4, (index + 1) * 4), // Assuming 4 options per question\n//           }));\n\n//           setQuestionData(mergedData);\n//         } else {\n//           console.error(\"API response does not have expected structure:\", data);\n//         }\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchQuestionData();\n//   }, [testCreationTableId]);\n\n//   const [Subjects, setSubjects] = useState([]);\n//   // const { testCreationTableId, subjectId } = useParams();\n//   const [sections, setSections] = useState([]);\n\n//   useEffect(() => {\n//     const fetchSubjects = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/subjects/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setSubjects(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchSubjects();\n//   }, [testCreationTableId]);\n\n//   useEffect(() => {\n//     const fetchSections = async () => {\n//       try {\n//         const response = await fetch(\n//           `http://localhost:4009/fetchSections/${testCreationTableId}`\n//         );\n//         const data = await response.json();\n//         setSections(data);\n//       } catch (error) {\n//         console.error(error);\n//       }\n//     };\n\n//     fetchSections();\n//   }, [testCreationTableId]);\n\n//   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//   const [selectedAnswers, setSelectedAnswers] = useState(\n//     Array(questionData.length).fill(\"\")\n//   );\n\n//   const handleNextClick = () => {\n//     // Update the current question index to move to the next question\n//     setCurrentQuestionIndex((prevIndex) =>\n//       prevIndex < questionData.length - 1 ? prevIndex + 1 : prevIndex\n//     );\n//   };\n\n//   const onAnswerSelected = (optionIndex) => {\n//     const updatedSelectedAnswers = [...selectedAnswers];\n//     updatedSelectedAnswers[currentQuestionIndex] = optionIndex;\n//     setSelectedAnswers(updatedSelectedAnswers);\n//   };\n\n//   const [activeQuestion, setActiveQuestion] = useState(0);\n//   const clearResponse = () => {\n//     const updatedSelectedAnswers = [...selectedAnswers];\n//     updatedSelectedAnswers[activeQuestion] = \"\";\n//     setSelectedAnswers(updatedSelectedAnswers);\n//   };\n\n//   const goToPreviousQuestion = () => {\n//     setCurrentQuestionIndex((prevIndex) => {\n//       // Save the current timer value for the question\n\n//       const updatedTimers = [...timers];\n\n//       updatedTimers[prevIndex] = timer;\n\n//       setTimers(updatedTimers);\n\n//       // Move to the previous question\n\n//       return prevIndex - 1;\n//     });\n\n//     if (questionData > 0) {\n//       setActiveQuestion(questionData - 1);\n//     }\n//   };\n\n//   const [timer, setTimer] = useState(0);\n//   const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\n\n//   const formatTime = (seconds) => {\n//     const hours = Math.floor(seconds / 3600);\n\n//     const minutes = Math.floor((seconds % 3600) / 60);\n\n//     const remainingSeconds = seconds % 60;\n\n//     return `${hours > 9 ? hours : \"0\" + hours}:${\n//       minutes > 9 ? minutes : \"0\" + minutes\n//     }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n//   };\n\n//   useEffect(() => {\n//     // Set the timer to the saved value for the current question\n//     setTimer(timers[currentQuestionIndex] || 0);\n//     let interval;\n//     interval = setInterval(() => {\n//       setTimer((prevTimer) => prevTimer + 1);\n//     }, 1000);\n//     // Clear the interval when the component unmounts or when the user moves to the next question\n//     return () => {\n//       clearInterval(interval);\n//     };\n//   }, [currentQuestionIndex, timers]);\n\n//   return (\n//     <div>\n//       <div>\n//         <PaperHeader />\n//       </div>\n//       <div className=\"subjects\">\n//         {Subjects.map((subjectTitle, index) => (\n//           <li key={index}>\n//             <button className=\"subject-btn\">{subjectTitle.subjectName}</button>\n//           </li>\n//         ))}\n//       </div>\n//       <div className=\"second-header\">\n//         <div className=\"single-select-question\">\n//           {sections.map((sectionTitle, index) => (\n//             <li key={index}>\n//               <p>{sectionTitle.sectionName}</p>\n//             </li>\n//           ))}\n//           {/* Single Select Question */}\n//         </div>\n//         <div className=\"right-header\">\n//           <div className=\"marks\">\n//             Marks: <div className=\"plus-mark\">+1</div>\n//             <div className=\"minus-mark\">-1</div>\n//           </div>\n//           <div>Timer: {formatTime(timer)}</div>\n//         </div>\n//       </div>\n//       {questionData.length > 0 && (\n//         <div>\n//           {questionData.map((question, index) => (\n//             <>\n//               <div key={question.question_id}>\n//                 <div className=\"question\" key={index}>\n//                   <h4>\n//                     {currentQuestionIndex + 1}.\n//                     <img\n//                       src={`data:image/png;base64,${questionData[currentQuestionIndex].question_img}`}\n//                       alt={`Question ${currentQuestionIndex + 1}`}\n//                     />\n//                   </h4>\n//                 </div>\n\n//                 {questionData[currentQuestionIndex].optionImages.map(\n//                   (OptionImage, optionIndex) => (\n//                     <li key={optionIndex}>\n//                       <input\n//                         type=\"radio\"\n//                         name={`question-${currentQuestionIndex}-option`}\n//                         value={optionIndex}\n//                         checked={\n//                           selectedAnswers[currentQuestionIndex] === optionIndex\n//                         }\n//                         onChange={() => onAnswerSelected(optionIndex)}\n//                       />\n//                       <img\n//                         key={optionIndex}\n//                         src={`data:image/png;base64,${OptionImage.option_img}`}\n//                         alt={`Option ${optionIndex + 1}`}\n//                       />\n//                     </li>\n//                   )\n//                 )}\n\n//               </div>\n//               <div className=\"flex-right\">\n//                 <button className=\"clear-btn\" onClick={clearResponse}>\n//                   Clear Response\n//                 </button>\n//                 <button\n//                   className=\"previous-btn\"\n//                   onClick={goToPreviousQuestion}\n//                   disabled={questionData === 0}\n//                 >\n//                   <i className=\"fa-solid fa-angles-left\"></i> Previous\n//                 </button>\n//                 <button className=\"save-btn\" onClick={handleNextClick}>\n//                   Next <i className=\"fa-solid fa-angles-right\"></i>\n//                 </button>\n//               </div>\n//             </>\n//            ))}\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default Paper1;\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\nimport \"./Paper.css\";\nconst Paper1 = () => {\n  const [questionData, setQuestionData] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [Subjects, setSubjects] = useState([]);\n  const { testCreationTableId, subjectId } = useParams();\n  const [sections, setSections] = useState([]);\n\n  useEffect(() => {\n    const fetchSubjects = async () => {\n      try {\n        const response = await fetch(\n          `http://localhost:4009/subjects/${testCreationTableId}`\n        );\n        const data = await response.json();\n        setSubjects(data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchSubjects();\n  }, [testCreationTableId]);\n\n  useEffect(() => {\n    const fetchSections = async () => {\n      try {\n        const response = await fetch(\n          `http://localhost:4009/fetchSections/${testCreationTableId}`\n        );\n        const data = await response.json();\n        setSections(data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchSections();\n  }, [testCreationTableId]);\n\n  useEffect(() => {\n    const fetchQuestionData = async () => {\n      try {\n        const response = await fetch(\n          `http://localhost:4009/getPaperData/${testCreationTableId}`\n        );\n        const data = await response.json();\n\n        // Check if the data has both 'questions' and 'options' properties\n        if (data && data.questions && data.options) {\n          // Assuming both questions and options are arrays, you might want to merge them\n          const mergedData = data.questions.map((question, index) => ({\n            ...question,\n            options: data.options.slice(index * 4, (index + 1) * 4), // Assuming 4 options per question\n          }));\n\n          setQuestionData(mergedData);\n        } else {\n          console.error(\"API response does not have expected structure:\", data);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchQuestionData();\n  }, [testCreationTableId]);\n\n  const [selectedAnswers, setSelectedAnswers] = useState(\n    Array(questionData.length).fill(\"\")\n  );\n\n  const handleNextClick = () => {\n    // Update the current question index to move to the next question\n    setCurrentQuestionIndex((prevIndex) =>\n      prevIndex < questionData.length - 1 ? prevIndex + 1 : prevIndex\n    );\n  };\n\n  const onAnswerSelected = (optionIndex) => {\n    const updatedSelectedAnswers = [...selectedAnswers];\n    updatedSelectedAnswers[currentQuestionIndex] = optionIndex;\n    setSelectedAnswers(updatedSelectedAnswers);\n  };\n\n  const [activeQuestion, setActiveQuestion] = useState(0);\n  // const clearResponse = () => {\n  //   const updatedSelectedAnswers = [...selectedAnswers];\n  //   updatedSelectedAnswers[activeQuestion] = \"\";\n  //   setSelectedAnswers(updatedSelectedAnswers);\n  // };\n  const clearResponse = () => {\n    const updatedSelectedAnswers = [...selectedAnswers];\n    updatedSelectedAnswers[currentQuestionIndex] = \"\";\n    setSelectedAnswers(updatedSelectedAnswers);\n  };\n  \n\n  const goToPreviousQuestion = () => {\n    setCurrentQuestionIndex((prevIndex) => {\n      // Save the current timer value for the question\n      const updatedTimers = [...timers];\n      updatedTimers[prevIndex] = timer;\n      setTimers(updatedTimers);\n      // Move to the previous question\n      return prevIndex - 1;\n    });\n\n    if (questionData > 0) {\n      setActiveQuestion(questionData - 1);\n    }\n  };\n\n  // ---------------------------------Timer code Start--------------------------------\n  const [timer, setTimer] = useState(0);\n  const [timers, setTimers] = useState(new Array(questionData.length).fill(0));\n\n  const formatTime = (seconds) => {\n    const hours = Math.floor(seconds / 3600);\n\n    const minutes = Math.floor((seconds % 3600) / 60);\n\n    const remainingSeconds = seconds % 60;\n\n    return `${hours > 9 ? hours : \"0\" + hours}:${\n      minutes > 9 ? minutes : \"0\" + minutes\n    }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n  };\n\n  useEffect(() => {\n    // Set the timer to the saved value for the current question\n    setTimer(timers[currentQuestionIndex] || 0);\n    let interval;\n    interval = setInterval(() => {\n      setTimer((prevTimer) => prevTimer + 1);\n    }, 1000);\n    // Clear the interval when the component unmounts or when the user moves to the next question\n    return () => {\n      clearInterval(interval);\n    };\n  }, [currentQuestionIndex, timers]);\n  // ------------------------------------Timer code end--------------------------------\n\n  return (\n    <div>\n      <div>\n        <PaperHeader />\n      </div>\n      <div className=\"subjects\">\n        {Subjects.map((subjectTitle, index) => (\n          <li key={index}>\n            <Link ><button className=\"subject-btn\">{subjectTitle.subjectName}</button></Link>\n            {/* <button className=\"subject-btn\">{subjectTitle.subjectName}</button> */}\n          </li>\n        ))}\n    \n      </div>\n      <div className=\"second-header\">\n        <div className=\"single-select-question\">\n          {sections.map((sectionTitle, index) => (\n            <li key={index}>\n              <p>{sectionTitle.sectionName}</p>\n              \n            </li>\n          ))}\n          {/* Single Select Question */}\n        </div>\n        <div className=\"right-header\">\n          <div className=\"marks\">\n            Marks: <div className=\"plus-mark\">+1</div>\n            <div className=\"minus-mark\">-1</div>\n          </div>\n          <div>Timer: {formatTime(timer)}</div>\n        </div>\n      </div>\n      <div>\n        <p>  Question No. {currentQuestionIndex + 1}  of {questionData.length}</p>\n      </div>\n\n      {questionData.length > 0 && (\n        <div>\n          <h4>\n            {/* {currentQuestionIndex + 1}. */}\n          \n            <img\n              src={`data:image/png;base64,${questionData[currentQuestionIndex].question_img}`}\n              alt={`Question ${currentQuestionIndex + 1}`}\n            />\n          </h4>\n\n          {questionData[currentQuestionIndex].options.map(\n            (OptionImage, optionIndex) => (\n              <li key={optionIndex}>\n                <input\n                  type=\"radio\"\n                  name={`question-${currentQuestionIndex}-option`}\n                  value={optionIndex}\n                  checked={\n                    selectedAnswers[currentQuestionIndex] === optionIndex\n                  }\n                  onChange={() => onAnswerSelected(optionIndex)}\n                />\n                {OptionImage && OptionImage.option_img && (\n                  <img\n                    key={OptionImage.question_id}\n                    src={`data:image/png;base64,${OptionImage.option_img}`}\n                    alt={`Option ${optionIndex + 1}`}\n                  />\n                )}\n              </li>\n            )\n          )}\n          <div className=\"flex-right\">\n            <button className=\"clear-btn\" onClick={clearResponse}>\n              Clear Response\n            </button>\n            <button\n              className=\"previous-btn\"\n              onClick={goToPreviousQuestion}\n              disabled={questionData === 0}\n            >\n              <i className=\"fa-solid fa-angles-left\"></i> Previous\n            </button>\n            <button className=\"save-btn\" onClick={handleNextClick}>\n              Next <i className=\"fa-solid fa-angles-right\"></i>\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Paper1;\n","/home/user/Documents/egate_Quiz_project/src/Pages/Paper/Document_ImageInfo.jsx",["166"],[],"import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n \nfunction Document_ImageInfo() {\n  const [data, setData] = useState(null);\nconst {subjectId, testCreationTableId} = useParams();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`http://localhost:4009/getSubjectData/${subjectId}/${testCreationTableId}`);\n        const result = await response.json();\n        setData(result);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n \n    fetchData();\n  }, []); // The empty dependency array ensures that this effect runs once when the component mounts.\n \n  if (!data) {\n    return <div>Loading...</div>;\n  }\n \n  // Render your component using the fetched data\n  return (\n    <div>\n      {/* Access data as needed, for example: */}\n      <h1>{data.document.documen_name} {data.document.subjectId}{data.document.testCreationTableId}</h1>\n      {/* Map over questions and render them */}\n      <div className='q1s' style={{display:'flex',gap:'4rem',flexDirection:'column',width:'85vw',margin:'2rem'}}>\n      {data.questions.map((question, index) => (\n     \n        <div className='outColor' style={{background:'#e5e5e5',padding:'2rem 2rem'}}>\n         <div key={question.question_id} >\n         <div className='question' key={index}>\n          <h3>{index+1}</h3>\n         <img src={`data:image/png;base64,${question.question_img}`} alt=\"Question\" />\n         </div>\n         \n          {/* Map over options and render them */}\n          {data.options\n            .filter((opt) => opt.question_id === question.question_id)\n            .map((option) => (\n             <div className='option'>\n                 <img key={option.question_id} src={`data:image/png;base64,${option.option_img}`} alt=\"Option\" />\n             </div>\n            ))}\n         \n          {/* Render solutions similarly */}\n          {data.solutions\n            .filter((sol) => sol.question_id === question.question_id)\n            .map((solution) => (\n              <div className='solution'>\n                <img key={solution.question_id} src={`data:image/png;base64,${solution.solution_img}`} alt=\"Solution\" />\n              </div>\n            ))}\n        </div>\n       </div>\n     \n      ))}\n       </div>\n    </div>\n  );\n}\n \nexport default Document_ImageInfo;\n ","/home/user/Documents/egate_Quiz_project/src/Pages/General_intructions_page/General_intructions_page.jsx",["167","168","169","170","171","172","173","174"],[],"import React, { useEffect, useRef, useState } from 'react';\nimport {\n    General_intructions_page_content,\n    Navbar,\n} from \"../../Data/Introduction_page_DATA\"\nimport { Link, useNavigate , useParams} from \"react-router-dom\";\nimport axios from \"axios\";\nimport { AiOutlineArrowRight } from \"react-icons/ai\";\nimport Paper from '../Paper/Paper';\n\n// import Paper1 from '../Paper/Paper1'\n// import Paper1 from '../Paper/Paper1';\n\nconst General_intructions_page = () => {\n    return (\n        <>\n            <General_intructions_page_header />\n            <General_intructions_page_container  seconds={600}/>\n        </>\n    );\n};\n\nexport default General_intructions_page;\n\nexport const General_intructions_page_header = () => {\n    return (\n        <>\n            {Navbar.map((nav, index) => {\n                return (\n                    <div className=\"Quiz_General_header\" key={index}>\n                        <h1>{nav.Q_page_title}</h1>\n                        <div className=\"Q_title\">\n                            {/* <p>{nav.time_limt}</p> */}\n                        </div>\n                    </div>\n                );\n            })}\n        </>\n    );\n};\n\nexport const General_intructions_page_container = ({seconds}) => {\n\n    \n\n     const [countdown, setCountdown] = useState(seconds);\n        const timerId = useRef();\n\n        useEffect(() => {\n            if (countdown <= 0) {\n                clearInterval(timerId.current);\n                alert(\"End\");\n            }\n        }, [countdown]);\n        const navigate = useNavigate();\n        const startCountdown = () => {\n            timerId.current = setInterval(() => {\n                setCountdown((prev) => prev - 1);\n            }, 1000);\n            navigate('/Paper1');\n        };\n        const [isChecked, setIsChecked] = useState(false);\n \n        const handleCheckboxChange = (e) => {\n          setIsChecked(e.target.checked);\n        };\n\n\n        const [instructionsData, setInstructionsData] = useState([]);\n        const { testCreationTableId } = useParams();\n      \n        useEffect(() => {\n          const fetchInstructions = async () => {\n            try {\n              const response = await fetch(`http://localhost:4009/fetchinstructions/${testCreationTableId}`);\n              const data = await response.json();\n              setInstructionsData(data);\n            } catch (error) {\n              console.error(error);\n            }\n          };\n      \n          fetchInstructions();\n        }, [testCreationTableId]);\n\n       \nconst [subjectId, setSubjectId] = useState([]);\n        const handlePaperData = async (typeOfTestId) => {\n          console.log(\"working\")\n          try {\n            // Fetch tests based on typeOfTestId\n            const response = await fetch(`http://localhost:4009/feachingtestbytype/${typeOfTestId}`);\n            const testData = await response.json();\n            setSubjectId(testData);\n          } catch (error) {\n            console.error(error);\n          }\n        };\n\n\n    return (\n        <>\n\n<div>\n      <h2>General Instructions</h2>\n      <ul>\n        {instructionsData.map((instruction, index) => (\n          <React.Fragment key={instruction.id}>\n            {index === 0 && (\n              <li>\n                {instruction.instructionHeading}\n              </li>\n            )}\n            <li>\n              {instruction.points}\n            </li>\n      \n          </React.Fragment>\n          \n        ))}\n      </ul>\n      {/* <Link to={`/quiz_all/${testCreationTableId}`}>Start Test</Link> */}\n    </div>\n            {/* {General_intructions_page_content.map((gipc, index) => {\n                return (\n                    <div key={index} className=\"Q_container g_container\">\n                        <h3>{gipc.gnheading}</h3>\n\n                        <div className=\"Gn_table\">\n                            <table>\n                                <tr>\n                                    <th>{gipc.gn_table_heading1}</th>\n                                    <th>{gipc.gn_table_heading2}</th>\n                                    <th>{gipc.gn_table_heading3}</th>\n                                </tr>\n\n                                <tr>\n                                    <th>{gipc.m}</th>\n                                    <td>{gipc.mq}</td>\n                                    <td>{gipc.mm}</td>\n                                </tr>\n                                <tr>\n                                    <th>{gipc.p}</th>\n                                    <td>{gipc.pq}</td>\n                                    <td>{gipc.pm}</td>\n                                </tr>\n                                <tr>\n                                    <th>{gipc.c}</th>\n                                    <td>{gipc.cq}</td>\n                                    <td>{gipc.cm}</td>\n                                </tr>\n                                <tr>\n                                    <td>{gipc.t}</td>\n                                    <th>{gipc.tq}</th>\n                                    <th>{gipc.tm}</th>\n                                </tr>\n                            </table>\n                        </div>\n                        < ul className=\"gn_points\">\n                            <li>\n                                This test contains\n                                <strong>\n                                    90&nbsp;questions (need to answer 75 questions).\n                                </strong>\n                                &nbsp;\n                            </li>\n\n                            <li>\n                                Total duration of the test is <strong>180&nbsp;minutes.</strong>\n                            </li>\n\n                            <li>\n                                There are <strong>3 sections</strong> in the question paper\n                                consisting of{\" \"}\n                                <strong>Physics, Chemistry and Mathematics</strong> having{\" \"}\n                                <strong>30&nbsp;questions</strong> in each section (\n                                <strong>20 MCQs + 10 Numeric Value</strong> Answer Based\n                                Questions).\n                            </li>\n\n\n                            <li>\n                                <strong>Single Choice Type questions</strong>&nbsp;are\n                                allotted <strong>4 (Four)</strong> marks for each question\n                                answered correctly and <strong>1 (One) mark</strong> will be\n                                deducted for <strong>indicating incorrect </strong>response.\n                            </li>\n\n                            <li><strong>Numerical</strong> <strong>Value</strong> &nbsp;Type questions are allotted <strong>4 (Four)</strong> marks for each question answered correctly and<strong>&nbsp;1&nbsp;(one) marks</strong> will be deducted for <strong>indicating incorrect</strong> response.</li>\n\n                            <li>\n                                In each section in{\" \"}\n                                <strong>\n                                    Numerical Value Type Questions, 5 Questions out of 10 can be\n                                    attempted.\n                                </strong>\n                            </li>\n\n                            <li>In each section in <strong>Numerical Value Type Questions, 5 Questions out of 10 can be attempted.</strong></li>\n                            <li>\n                                In all the sections, <strong>No deduction</strong> from the\n                                total score will be made if <strong>no response</strong> is\n                                indicated.\n                            </li>\n\n\n                            <li>\n                                The countdown timer at the top right corner of screen will\n                                display the remaining time available for you to complete the\n                                examination. When the timer reaches zero, the examination will\n                                end by itself.\n                            </li>\n\n\n                            <li>Use a scribble pad for any rough work.</li>\n\n\n                            <li>You are not allowed to use a calculator.</li>\n\n                        </ul>\n                    </div>\n                );\n            })} */}\n\n            {/* {\n                Instructions.map((InstructionsData,index)=>(\n                    <React.Fragment key={InstructionsData.id}>\n                    {index === 0 && (\n                      <li>\n                        {InstructionsData.instructionHeading}\n                      </li>\n                    )}\n                    <li>\n                      {InstructionsData.points}\n                    </li>\n                  </React.Fragment>\n                ))\n            } */}\n\n            {/* <div className=\"gn_next_btn_container\">\n        <Link to='/' className=\"intro_next_btn\">NEXT <AiOutlineArrowRight/></Link>\n      </div> */}\n      <div>\n      {/* <input type=\"checkbox\" onClick={checkbox}/> */}\n     \n      <div className=\"gn_checkbox\">\n      <input type=\"checkbox\" onChange={handleCheckboxChange} className=\"checkbox\" />\n      <p> I agree to these <b> Terms and Conditions.</b></p>\n      </div>\n    </div>\n   \n <div className=\"gn_next_btn_container\">\n        {isChecked ? (\n            //  to=\"/Paper1\" {`/quiz_all/${testCreationTableId}`}\n          // <Link to={`/getPaperData/${testCreationTableId}/${subjectId}`}  className=\"gn_next_btn\">\n          // <Link to={`/getPaperData/${testCreationTableId}`} onClick={handlePaperData} className=\"gn_next_btn\">\n          // {/* <Link to={`/quiz_all/${testCreationTableId}`}  className=\"gn_next_btn\"> */}\n          //  {/* <Link to={`/quiz_all/${testCreationTableId}`}  className=\"gn_next_btn\"> */}\n          //   I am ready to begin <AiOutlineArrowRight />\n          // </Link>\n          \n          <Link \n          \n          to={`/getPaperData/${testCreationTableId}`} \n          className=\"gn_next_btn\">\n               I am ready to begin <AiOutlineArrowRight />\n          </Link>\n        ) : (\n          <span className=\"disabled-link gn_next_btn_bull \">\n            I am ready to begin <AiOutlineArrowRight />\n          </span>\n        )}\n      </div>\n        </>\n\n    );\n};\n","/home/user/Documents/egate_Quiz_project/src/Pages/Instructions/Instructions.jsx",["175"],[],"// // import React from 'react'\n// import React, { useEffect, useRef, useState } from 'react';\n// import './Instructions.scss'\n// import { useNavigate } from \"react-router-dom\";\n\n// const Instructions = ({ seconds }) => {\n\n//     const [countdown, setCountdown] = useState(seconds);\n//     const timerId = useRef();\n\n//     useEffect(() => {\n//         if (countdown <= 0) {\n//             clearInterval(timerId.current);\n//             alert(\"End\");\n//         }\n//     }, [countdown]);\n//     const navigate = useNavigate();\n//     const startCountdown = () => {\n//         timerId.current = setInterval(() => {\n//             setCountdown((prev) => prev - 1);\n//         }, 1000);\n//         navigate('/Paper');\n//     };\n\n\n\n//     return (\n//         <div>\n//             <div id=\"ins1Text\" className=\"contentClass\">\n//                 <div className=\"insDiv\">\n\n//                     <p align=\"center\">\n//                         <strong>Please read the following instructions carefully.</strong>\n//                     </p>\n\n//                     <p>\n//                         <strong>General Instructions:</strong>\n//                     </p>\n\n//                     <p>\n//                         &nbsp;&nbsp;&nbsp;&nbsp;1. Total time available for this test will be displayed on the next. <br />\n//                         &nbsp;&nbsp;&nbsp;&nbsp;2. The clock has been set at the server and the countdown timer at the top right corner of your screen will display the time remaining for you to complete the exam. When the clock runs out the exam ends by default - you are not required to end or submit your. <br />\n//                         &nbsp;&nbsp;&nbsp;&nbsp;3. The question palette at the right of screen shows one of the following statuses of each of the questions numbered: <br />\n//                     </p>\n\n//                     <p>&nbsp;</p>\n\n//                     <div>&nbsp;</div>\n\n//                     <div>\n//                         <div className=\"grayDiv\">1.</div>\n//                         <div >You have not visited the question yet.</div>\n//                     </div>\n\n//                     <div>&nbsp;</div>\n//                     <div>&nbsp;</div>\n//                     <div>\n//                         <div className=\"orangeDiv\">3</div>\n//                         <div >You have not answered the question.</div>\n//                     </div>\n\n//                     <div >&nbsp;</div>\n//                     <div >&nbsp;</div>\n//                     <div >\n//                         <div className=\"greenDiv\">5</div>\n//                         <div >You have answered the question.</div>\n//                     </div>\n\n//                     <div >&nbsp;</div>\n//                     <div >&nbsp;</div>\n//                     <div >\n//                         <div className=\"purpleDiv\">7</div>\n//                         <div >You have NOT answered the question but have marked the question for review.</div>\n//                     </div>\n\n//                     <div>&nbsp;</div>\n//                     <div >&nbsp;</div>\n//                     <div >\n//                         <div className=\"purpleTickDiv\">9</div>\n//                         <div>You have answered the question but marked it for review.</div>\n//                     </div>\n\n//                     <div >&nbsp;</div>\n//                     <p>&nbsp;</p>\n//                     <p>The Marked for Review status simply acts as a reminder that you have set to look at the question again. If an answer is selected for a question that is Marked for Review, the answer will be considered in the final evaluation.</p>\n\n//                     <p ><strong>Navigating to a question:</strong></p>\n\n//                     <p>&nbsp;&nbsp;&nbsp;&nbsp;4. To select a question to answer, you can do one of the following: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a. Click on the question number on the question palette at the right of your screen to go to that numbered question directly. Note that using this option does NOT save your answer to the current question.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b. Click on Save and Next to save answer to current question and to go to the next question in sequence. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c. Click on Mark for Review and Next to save answer to current question, mark it for review, and to go to the next question in sequence.</p>\n\n//                     <p>&nbsp;&nbsp;&nbsp;&nbsp;5. You can view the entire paper by clicking on the <strong>Question Paper</strong> button.</p>\n\n//                     <p ><strong>Answering questions:</strong></p>\n\n//                     <p>&nbsp;&nbsp;&nbsp;&nbsp;6. For multiple choice type question :&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a. To select your answer, click on one of the option buttons &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b. To change your answer, click the another desired option button &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c. To save your answer, you MUST click on <strong>Save &amp; Next</strong> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d. To deselect a chosen answer, click on the chosen option again or click on the <strong>Clear Response</strong> button. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e. To mark a question for review click on Mark for Review &amp; Next. If an answer is selected for a question that is Marked for Review, the answer will be considered in the final evaluation.</p>\n\n//                     <p>&nbsp;&nbsp;&nbsp;&nbsp;7. To change an answer to a question, first select the question and then click on the new answer option followed by a click on the <strong>Save &amp; Next</strong> button.</p>\n\n//                     <p>&nbsp;&nbsp;&nbsp;&nbsp;8. Questions that are saved or marked for review after answering will ONLY be considered for evaluation.</p>\n\n//                     <p><strong>Navigating through sections:</strong></p>\n\n//                     <p>&nbsp;&nbsp;&nbsp;&nbsp;9. Sections in this question paper are displayed on the top bar of the screen. Questions in a section can be viewed by clicking on the section name. The section you are currently viewing is highlighted.</p>\n\n//                     <p>&nbsp;&nbsp;&nbsp;&nbsp;10. After clicking the Save &amp; Next button on the last question for a section, you will automatically be taken to the first question of the next section.</p>\n\n//                     <p>&nbsp;&nbsp;&nbsp;&nbsp;11. You can move the mouse cursor over the section names to view the status of the questions for that section.</p>\n\n//                     <p>&nbsp;&nbsp;&nbsp;&nbsp;12. You can shuffle between sections and questions anytime during the examination as per your convenience.</p>\n//                 </div>\n//                 <div className='test-btn'>\n//                     <button onClick={startCountdown} className='play-btn'>\n//                         Next<span class=\"material-symbols-outlined\">\n//                             double_arrow\n//                         </span>\n//                     </button>\n//                 </div>\n//             </div>\n//         </div>\n\n//     )\n// }\n\n// export default Instructions\n\n\n\n\n\n\n\n\n\n\n\nimport React from \"react\";\nimport { AiOutlineArrowRight } from \"react-icons/ai\"\nimport { Link,useParams } from \"react-router-dom\";\nimport './Instructions.scss'\n// =============================== nav-data ===============================\nimport { Navbar, Intro_content } from \"../../Data/Introduction_page_DATA\";\n\n// =============================== css ===============================\n// import \"./styles/introducationpage.css\";\nconst Introduction_page = () => {\n    return (\n        <>\n            <Header />\n            <Intro_container />\n        </>\n    );\n};\n\nexport default Introduction_page;\n\nexport const Header = () => {\n\n    \n    return (\n        <>\n            {Navbar.map((nav, index) => {\n                return (\n                    <div className=\"Quiz_header\" key={index}>\n                        <div className=\"Q_logo\">\n                            <img src={nav.Q_logo} alt=\"\" />\n                        </div>\n                        <div className=\"Q_title\">\n                            <h1>{nav.Q_page_title}</h1>\n                        </div>\n                    </div>\n                );\n            })}\n        </>\n    );\n};\nexport const Intro_container = () => {\n    const { testCreationTableId } = useParams();\n    return (\n        <>\n            {Intro_content.map((Intro_content, index) => {\n                return (\n\n                    <div key={index} className=\"Q_container\">\n                        <h2>{Intro_content.Intro_content_text_center}</h2>\n                        <h3>{Intro_content.Intro_content_text_subheading_1}</h3>\n                        <ol>\n                            <li>{Intro_content.Intro_content_points_1}</li>\n                            <li>{Intro_content.Intro_content_points_2}</li>\n                            <li>{Intro_content.Intro_content_points_3}</li>\n                            <div className=\"img_container\">\n                                <p>\n\n                                    <div className=\" intro_img intro_img1\">1</div>{\" \"}\n                                    {Intro_content.Intro_content_points_p1}\n                                </p>\n                                <p>\n\n                                    <div className=\" intro_img intro_img2\">3</div>\n                                    {Intro_content.Intro_content_points_p2}\n                                </p>\n                                <p>\n\n                                    <div className=\"  intro_img intro_img3\">5</div>\n                                    {Intro_content.Intro_content_points_p3}\n                                </p>\n                                <p>\n\n                                    <div className=\" intro_img intro_img4\">7</div>\n                                    {Intro_content.Intro_content_points_p4}\n                                </p>\n                                <p>\n\n                                    <div className=\" intro_img intro_img5\">9</div>\n                                    {Intro_content.Intro_content_points_p5}\n                                </p>\n                            </div>\n                            <p>{Intro_content.Intro_content_points_p}</p>\n                            <h3>{Intro_content.Intro_content_text_subheading_2}</h3>\n                            <li>\n                                {Intro_content.Intro_content_points_4}\n\n                                <ol>\n                                    <li>{Intro_content.Intro_content_points_4_a}</li>\n                                    <li>{Intro_content.Intro_content_points_4_b}</li>\n                                    <li>{Intro_content.Intro_content_points_4_c}</li>\n                                </ol>\n                            </li>\n\n                            <li>\n                                {Intro_content.Intro_content_points_5}{\" \"}\n                                <span> {Intro_content.span_1}</span>\n                                {Intro_content.Intro_content_points_5__}\n                            </li>\n                            <h3>{Intro_content.Intro_content_text_subheading_3}</h3>\n                            <li>\n                                {Intro_content.Intro_content_points_6}\n                                <ol>\n                                    <li>{Intro_content.Intro_content_points_6_a}</li>\n                                    <li>{Intro_content.Intro_content_points_6_b}</li>\n                                    <li>\n                                        {Intro_content.Intro_content_points_6_c}\n                                        <span> {Intro_content.span_2}</span>\n                                    </li>\n                                    <li>\n                                        {Intro_content.Intro_content_points_6_d}\n                                        <span> {Intro_content.span_3}</span>{\" \"}\n                                        {Intro_content.Intro_content_points_6_d__}\n                                    </li>\n                                    <li>{Intro_content.Intro_content_points_6_e}</li>\n                                </ol>\n                            </li>\n                            <li>\n                                {Intro_content.Intro_content_points_7}\n                                <span> {Intro_content.span_4}</span>{\" \"}\n                                {Intro_content.Intro_content_points_7__}\n                            </li>\n                            <li>{Intro_content.Intro_content_points_8}</li>\n                            <h3>{Intro_content.Intro_content_text_subheading_4}</h3>\n                            <li>{Intro_content.Intro_content_points_9}</li>\n                            <li>{Intro_content.Intro_content_points_10}</li>\n                            <li>{Intro_content.Intro_content_points_11}</li>\n                            <li>{Intro_content.Intro_content_points_12}</li>\n                        </ol>\n                    </div>\n                );\n            })}\n            <div className=\"intro_next_btn_container\">\n                <Link to={`/General_intructions_page/${testCreationTableId}`}className=\"intro_next_btn\">NEXT <AiOutlineArrowRight /></Link>\n            </div>\n        </>\n    );\n};\n","/home/user/Documents/egate_Quiz_project/src/Pages/FullTest/FullTest.jsx",[],[],"/home/user/Documents/egate_Quiz_project/src/Pages/Payment/Payment.jsx",[],[],"/home/user/Documents/egate_Quiz_project/src/Pages/DownloadQuizPage/DownloadQuizPage.jsx",[],[],"/home/user/Documents/egate_Quiz_project/src/Data/Introduction_page_DATA.js",[],[],"/home/user/Documents/egate_Quiz_project/src/Pages/HomeLandingPage/Data/HomeLandingPage.js",[],[],"/home/user/Documents/egate_Quiz_project/src/Pages/Paper/Paper.jsx",["176","177"],[],"// test commit\n\n// import React, { useEffect, useState } from 'react';\n// import quiz from '../../Data/quesAns'\n// import './Paper.css'\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader'\n\n// // Defining Timer code\n// const formatTime = (time) => {\n//     let minutes = Math.floor(time / 60);\n//     let seconds = Math.floor(time - minutes * 60);\n\n//     if (minutes < 10) minutes = '0' + minutes;\n//     if (seconds < 10) seconds = '0' + seconds;\n//     return minutes + ':' + seconds;\n// }; // End of Defining Timer code\n\n// const Paper = ({ seconds, answeredQuestions }) => {\n\n//     const [activeQuestion, setActiveQuestion] = useState(0);\n//     const handleQuestionSelect = (questionNumber) => {\n//         setActiveQuestion(questionNumber - 1);\n//     }\n\n//     // const [questionStatus, setQuestionStatus] = useState(Array(30).fill('notAnswered'))\n//     // const [activeQuestion, setActiveQuestion] = useState(0)\n//     // const [selectedAnswer, setSelectedAnswer] = useState('')\n\n//     const [selectedAnswers, setSelectedAnswers] = useState(new Array(quiz.questions.length).fill(''));\n//     const [showResult, setShowResult] = useState(false)\n//     const [result, setResult] = useState({\n//         score: 0,\n//         correctAnswers: 0,\n//         wrongAnswers: 0,\n//     })\n\n//     const { questions } = quiz\n//     const { question, choices, correctAnswer } = questions[activeQuestion]\n//     const onClickNext = () => {\n//         setResult((prev) =>\n//             selectedAnswers[activeQuestion] === correctAnswer\n//                 ? {\n//                     ...prev,\n//                     score: prev.score + 5,\n//                     correctAnswers: prev.correctAnswers + 1,\n//                 }\n//                 : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\n//         );\n//         if (activeQuestion !== questions.length - 1) {\n//             setActiveQuestion((prev) => prev + 1);\n//         } else {\n//             // setActiveQuestion(0);\n//             setShowResult(true);\n//             calculateResult();//new added code\n//         }\n//     };\n\n//     const onAnswerSelected = (OptionLetter) => {\n//         // Update the selected answer for the current question\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//         setSelectedAnswers(updatedSelectedAnswers);\n//         // setSelectedAnswers(updatedSelectedAnswers, OptionLetter);\n\n//     };\n\n//     const clearResponse = () => {\n//         // Clear the response for the current question\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = '';\n//         setSelectedAnswers(updatedSelectedAnswers);\n//     };\n\n//     const goToPreviousQuestion = () => {\n//         // Move to the previous question\n//         if (activeQuestion > 0) {\n//             setActiveQuestion((prev) => prev - 1);\n//         }\n//     };\n\n//     const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n//     const [countdown, setCountDown] = useState(seconds);\n//     useEffect(() => {\n//         const timerId = setInterval(() => {\n//             setCountDown((prevCountDown) =>\n//                 prevCountDown - 1\n//             );\n//         }, 1000)\n//         return () => {\n//             clearInterval(timerId);\n//         };\n//     }, [])\n\n//     useEffect(() => {\n//         if (countdown <= 0) {\n//             setShowResult(true);\n//             // clearInterval(timerId.current);\n//             // alert(\"End\");\n//         }\n//     }, [countdown]);\n\n//    // NEW ADDED CODE\n\n//     // const [showResult, setShowResult] = useState(false);\n//     const [accuracy, setAccuracy] = useState(0);\n//     const [averageScore, setAverageScore] = useState(0);\n//     const [topScore, setTopScore] = useState(0);\n//     const [liveRank, setLiveRank] = useState(0);\n\n//     const calculateResult = () => {\n//         // Calculate accuracy\n//         const totalAttempted = answeredQuestions.length;\n//         const totalCorrect = result.correctAnswers;\n//         const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\n//         setAccuracy(calculatedAccuracy.toFixed(2));\n\n//         // Calculate average score\n//         const calculatedAverageScore = result.score / totalAttempted;\n//         setAverageScore(calculatedAverageScore.toFixed(2));\n\n//         // Placeholder for live ranking data - Replace this with actual data\n//         const calculatedTopScore = 100;\n//         const calculatedLiveRank = 1;\n\n//         setTopScore(calculatedTopScore);\n//         setLiveRank(calculatedLiveRank);\n//     };\n\n//     // const onClickSubmit = () => {\n//     //     calculateResult();\n//     //     setShowResult(true);\n//     // };\n\n//     return (\n\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     {!showResult ? (\n//                         <div>\n//                             <div className='subjects'>\n//                                 <button className='subject-btn'>Mathematics</button>\n//                                 <button className='subject-btn'>Physics</button>\n//                                 <button className='subject-btn'>Chemistry</button>\n//                             </div>\n//                             <div className='second-header'>\n//                                 <div className='single-select-question'>\n//                                     Single Select Question\n//                                 </div>\n//                                 <div className='right-header'>\n//                                     <div className='marks'>\n//                                         Marks: <div className='plus-mark'>+1</div>\n//                                         <div className='minus-mark'>-1</div>\n//                                     </div>\n//                                     <div className='timer'>\n//                                         <h3>Time Left: {formatTime(countdown)}</h3>\n//                                     </div>\n//                                 </div>\n//                             </div>\n//                             <div className='question-no'>\n//                                 <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\n//                                 <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\n//                             </div>\n\n//                             <h2 className='question'><img src={question} alt=\"question\" /></h2>\n\n//                             <ul className='options-container'>\n//                                 {choices.map((answer, index) => (\n//                                     <li key={answer}>\n//                                         <input type=\"radio\"\n//                                             // id={answer}\n//                                             id={`option-${index}`}\n//                                             name='answer'\n//                                             value={answer}\n//                                             checked={selectedAnswers[activeQuestion] === answer}\n//                                             onChange={() => onAnswerSelected(answer)} />\n\n//                                         <label className='alpha-index' htmlFor={`option-${index}`}>\n//                                             {/* htmlFor={answer} */}\n//                                             {String.fromCharCode(65 + index)}.\n//                                             <img src={answer} alt=\"answer\" />\n//                                         </label>\n//                                     </li>\n//                                 ))}\n//                             </ul>\n\n//                             <div className=\"flex-right\">\n//                                 <button className='clear-btn'>Mark for Review & Next</button>\n//                                 <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\n//                                 <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                                     <i class=\"fa-solid fa-angles-left\"></i>\n//                                     Previous\n//                                 </button>\n//                                 <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                                     {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\n//                                 </button>\n\n//                             </div>\n//                         </div>\n//                     ) : (\n//                         <div className=\"result\">\n//                             <h3>Result</h3>\n//                             <p>\n//                                 Total Questions: <span>{questions.length}</span>\n//                             </p>\n//                             <p>\n//                                 Total Score:<span> {result.score}</span>\n//                             </p>\n//                             <p>\n//                                 Correct Answers:<span> {result.correctAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Wrong Answers:<span> {result.wrongAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Accuracy:<span> {accuracy}%</span>\n//                             </p>\n//                             <p>\n//                                 Average Score:<span> {averageScore}</span>\n//                             </p>\n//                             <p>\n//                                 Top Score:<span> {topScore}</span>\n//                             </p>\n//                             <p>\n//                                 Live Rank:<span> {liveRank}</span>\n//                             </p>\n//                         </div>\n//                     )}\n//                 </div>\n//             </div>\n//             <div className='rightsidebar'><RightSidebar onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} /></div>\n//         </div>\n\n//     )\n// }\n\n// export default Paper\n\n// import React, { useEffect, useState } from 'react';\n// // import quiz from '../../Data/quesAns'\n// import './Paper.css'\n// // import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader'\n\n// // Defining Timer code\n// // const formatTime = (time) => {\n// //     let minutes = Math.floor(time / 60);\n// //     let seconds = Math.floor(time - minutes * 60);\n\n// //     if (minutes < 10) minutes = '0' + minutes;\n// //     if (seconds < 10) seconds = '0' + seconds;\n// //     return minutes + ':' + seconds;\n// // }; // End of Defining Timer code\n\n// const Paper = () => {\n\n//     // const [activeQuestion, setActiveQuestion] = useState(0);\n//     // const handleQuestionSelect = (questionNumber) => {\n//     //     setActiveQuestion(questionNumber - 1);\n//     // }\n\n//     // const [questionStatus, setQuestionStatus] = useState(Array(30).fill('notAnswered'))\n//     // const [activeQuestion, setActiveQuestion] = useState(0)\n//     // const [selectedAnswer, setSelectedAnswer] = useState('')\n\n//     // const [selectedAnswers, setSelectedAnswers] = useState(new Array(quiz.questions.length).fill(''));\n//     // const [showResult, setShowResult] = useState(false)\n//     // const [result, setResult] = useState({\n//     //     score: 0,\n//     //     correctAnswers: 0,\n//     //     wrongAnswers: 0,\n//     // })\n\n//     // const { questions } = quiz\n//     // const { Qimages, OPTimages, correctAnswer } = [activeQuestion]\n//     // const onClickNext = () => {\n//     //     setResult((prev) =>\n//     //         selectedAnswers[activeQuestion] === correctAnswer\n//     //             ? {\n//     //                 ...prev,\n//     //                 score: prev.score + 5,\n//     //                 correctAnswers: prev.correctAnswers + 1,\n//     //             }\n//     //             : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\n//     //     );\n//     //     if (activeQuestion !== questions.length - 1) {\n//     //         setActiveQuestion((prev) => prev + 1);\n//     //     } else {\n//     //         // setActiveQuestion(0);\n//     //         setShowResult(true);\n//     //         calculateResult();//new added code\n//     //     }\n//     // };\n\n//     // const onAnswerSelected = (OptionLetter) => {\n//     //     // Update the selected answer for the current question\n//     //     const updatedSelectedAnswers = [...selectedAnswers];\n//     //     updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//     //     setSelectedAnswers(updatedSelectedAnswers);\n//     //     // setSelectedAnswers(updatedSelectedAnswers, OptionLetter);\n\n//     // };\n\n//     // const clearResponse = () => {\n//     //     // Clear the response for the current question\n//     //     const updatedSelectedAnswers = [...selectedAnswers];\n//     //     updatedSelectedAnswers[activeQuestion] = '';\n//     //     setSelectedAnswers(updatedSelectedAnswers);\n//     // };\n\n//     // const goToPreviousQuestion = () => {\n//     //     // Move to the previous question\n//     //     if (activeQuestion > 0) {\n//     //         setActiveQuestion((prev) => prev - 1);\n//     //     }\n//     // };\n\n//     // const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n//     // const [countdown, setCountDown] = useState(seconds);\n//     // useEffect(() => {\n//     //     const timerId = setInterval(() => {\n//     //         setCountDown((prevCountDown) =>\n//     //             prevCountDown - 1\n//     //         );\n//     //     }, 1000)\n//     //     return () => {\n//     //         clearInterval(timerId);\n//     //     };\n//     // }, [])\n\n//     // useEffect(() => {\n//     //     if (countdown <= 0) {\n//     //         setShowResult(true);\n//     //         // clearInterval(timerId.current);\n//     //         // alert(\"End\");\n//     //     }\n//     // }, [countdown]);\n\n//     // NEW ADDED CODE\n\n//     // const [showResult, setShowResult] = useState(false);\n//     // const [accuracy, setAccuracy] = useState(0);\n//     // const [averageScore, setAverageScore] = useState(0);\n//     // const [topScore, setTopScore] = useState(0);\n//     // const [liveRank, setLiveRank] = useState(0);\n\n//     // const calculateResult = () => {\n//     //     // Calculate accuracy\n//     //     const totalAttempted = answeredQuestions.length;\n//     //     const totalCorrect = result.correctAnswers;\n//     //     const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\n//     //     setAccuracy(calculatedAccuracy.toFixed(2));\n\n//     //     // Calculate average score\n//     //     const calculatedAverageScore = result.score / totalAttempted;\n//     //     setAverageScore(calculatedAverageScore.toFixed(2));\n\n//     //     // Placeholder for live ranking data - Replace this with actual data\n//     //     const calculatedTopScore = 100;\n//     //     const calculatedLiveRank = 1;\n\n//     //     setTopScore(calculatedTopScore);\n//     //     setLiveRank(calculatedLiveRank);\n//     // };\n\n//     // const onClickSubmit = () => {\n//     //     calculateResult();\n//     //     setShowResult(true);\n//     // };\n\n//     const [Qimages,setQImages] = useState([]);\n//     const [OPTimages,setOPTImages] = useState([]);\n\n//     useEffect(() => {\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//         const fetchQImages = async () => {\n//             let fetchedQImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     const response = await fetch(`http://localhost:7000/images/${i}`);\n//                     const data = await response.json();\n//                     if (data.length > 0) {\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching Qimages:', error);\n//                 }\n//             }\n\n//             setQImages(fetchedQImages);\n//         };\n\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//         const fetchOPTImages = async () => {\n//             let fetchedOPTImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     for (let j = i + 1; j <= i + 4; j++) {\n//                         const response = await fetch(`http://localhost:7000/images/${j}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                         }\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching OPTimages:', error);\n//                 }\n//             }\n\n//             setOPTImages(fetchedOPTImages);\n//         };\n\n//         fetchQImages();\n//         fetchOPTImages();\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     return (\n\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     {/* {!showResult ? ( */}\n//                         <div>\n//                             <div className='subjects'>\n//                                 <button className='subject-btn'>Mathematics</button>\n//                                 <button className='subject-btn'>Physics</button>\n//                                 <button className='subject-btn'>Chemistry</button>\n//                             </div>\n//                             <div className='second-header'>\n//                                 <div className='single-select-question'>\n//                                     Single Select Question\n//                                 </div>\n//                                 {/* <div className='right-header'>\n//                                     <div className='marks'>\n//                                         Marks: <div className='plus-mark'>+1</div>\n//                                         <div className='minus-mark'>-1</div>\n//                                     </div>\n//                                     <div className='timer'>\n//                                         <h3>Time Left: {formatTime(countdown)}</h3>\n//                                     </div>\n//                                 </div> */}\n//                             </div>\n//                             {/* <div className='question-no'>\n//                                 <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\n//                                 <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\n//                             </div> */}\n\n//                             {Qimages.map((qImage, index) => (\n//                                 <div key={index}>\n//                                     {/* <h2>QImage {index + 1}</h2> */}\n//                                     {/* <div className='question-no'>\n//                                         <span className=\"active-question-no\">Question No. {addLeadingZero(activeQuestion + 1)}</span>\n//                                         <span className=\"total-question\"> of {addLeadingZero(questions.length)}</span>\n//                                     </div> */}\n//                                     <h2 className='question'> <img\n//                                         src={`data:image/png;base64,${qImage.image_data}`}\n//                                         alt={`QImage ${index + 1}`}\n//                                     /></h2>\n\n//                                     <ul className='options-container'>\n//                                         {OPTimages.slice(index * 4, index * 4 + 4).map((optImage, optIndex) => (\n//                                             <li>\n//                                                 <input type=\"radio\"\n//                                                 // // id={answer}\n//                                                 //     id={`option-${index}`}\n//                                                 //     name='answer'\n//                                                 //     value={optImage}\n//                                                 //     checked={selectedAnswers[activeQuestion] === optImage}\n//                                                 //     onChange={() => onAnswerSelected(optImage)}\n//                                                 />\n\n//                                                 <label className='alpha-index' >\n//                                                     <img\n//                                                         key={optIndex}\n//                                                         src={`data:image/png;base64,${optImage.image_data}`}\n//                                                         alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                                     />\n//                                                 </label>\n//                                             </li>\n//                                         ))}\n//                                     </ul>\n//                                 </div>\n//                             ))}\n\n//                             {/* <div className=\"flex-right\">\n//                                 <button className='clear-btn'>Mark for Review & Next</button>\n//                                 <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\n//                                 <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                                     <i class=\"fa-solid fa-angles-left\"></i>\n//                                     Previous\n//                                 </button>\n//                                 <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                                     {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\n//                                 </button>\n\n//                             </div> */}\n//                         </div>\n//                     {/* ) : ( */}\n//                         {/* <div className=\"result\"> */}\n//                             {/* <h3>Result</h3>\n//                             <p>\n//                                 Total Questions: <span>{questions.length}</span>\n//                             </p>\n//                             <p>\n//                                 Total Score:<span> {result.score}</span>\n//                             </p>\n//                             <p>\n//                                 Correct Answers:<span> {result.correctAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Wrong Answers:<span> {result.wrongAnswers}</span>\n//                             </p>\n//                             <p>\n//                                 Accuracy:<span> {accuracy}%</span>\n//                             </p>\n//                             <p>\n//                                 Average Score:<span> {averageScore}</span>\n//                             </p>\n//                             <p>\n//                                 Top Score:<span> {topScore}</span>\n//                             </p>\n//                             <p>\n//                                 Live Rank:<span> {liveRank}</span>\n//                             </p> */}\n//                         {/* </div> */}\n//                     {/* )} */}\n//                 </div>\n//             </div>\n//             {/* <div className='rightsidebar'><RightSidebar onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} /></div> */}\n//         </div>\n\n//     )\n// }\n\n// export default Paper\n\n// import React, { useEffect, useState } from 'react';\n// import './Paper.css';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\n\n// const Paper = () => {\n//     const [Qimages, setQImages] = useState([]);\n//     const [OPTimages, setOPTImages] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n//         useEffect(() => {\n//             // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//             const fetchQImages = async () => {\n//                 let fetchedQImages = [];\n\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                     try {\n//                         const response = await fetch(`http://localhost:7000/images/${i}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedQImages.push(data[0]); // Add only the first image from each set\n//                         }\n//                     } catch (error) {\n//                         console.error('Error fetching Qimages:', error);\n//                     }\n//                 }\n\n//                 setQImages(fetchedQImages);\n//             };\n\n//             // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//             const fetchOPTImages = async () => {\n//                 let fetchedOPTImages = [];\n\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                     try {\n//                         for (let j = i + 1; j <= i + 4; j++) {\n//                             const response = await fetch(`http://localhost:7000/images/${j}`);\n//                             const data = await response.json();\n//                             if (data.length > 0) {\n//                                 fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                             }\n//                         }\n//                     } catch (error) {\n//                         console.error('Error fetching OPTimages:', error);\n//                     }\n//                 }\n\n//                 setOPTImages(fetchedOPTImages);\n//             };\n\n//             fetchQImages();\n//             fetchOPTImages();\n//         }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     const handleNextClick = () => {\n//         // Move to the next question when the \"Next\" button is clicked\n//         setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n//     };\n\n//     return (\n//         <div className='main'>\n//             {/* ... */}\n//             <div><PaperHeader /></div>\n//             <div className='options-container'>\n//                 {/* Display only the current question and its options */}\n//                 <h2 className='question'>\n//                     <img\n//                         src={`data:image/png;base64,${Qimages[currentQuestionIndex].image_data}`}\n//                         alt={`QImage ${currentQuestionIndex + 1}`}\n//                     />\n//                 </h2>\n//                 <ul className='options-container'>\n//                     {OPTimages\n//                         .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                         .map((optImage, optIndex) => (\n//                             <li key={optIndex}>\n//                                 <input type=\"radio\" />\n//                                 <label className='alpha-index'>\n//                                     <img\n//                                         src={`data:image/png;base64,${optImage.image_data}`}\n//                                         alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                     />\n//                                 </label>\n//                             </li>\n//                         ))}\n//                 </ul>\n//                 <button onClick={handleNextClick}>Next</button>\n//             </div>\n//             {/* ... */}\n//         </div>\n//     );\n// };\n\n// export default Paper;\n\n// import React, { useEffect, useState } from 'react';\n// import './Paper.css';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\n// // import { Waveform } from '@uiball/loaders'\n\n// const Paper = () => {\n\n//     const [Qimages, setQImages] = useState([]);\n//     const [OPTimages, setOPTImages] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n//     useEffect(() => {\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//         const fetchQImages = async () => {\n//             let fetchedQImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     const response = await fetch(`http://localhost:7001/images/${i}`);\n//                     const data = await response.json();\n//                     if (data.length > 0) {\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching Qimages:', error);\n//                 }\n//             }\n\n//             setQImages(fetchedQImages);\n//         };\n\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//         const fetchOPTImages = async () => {\n//             let fetchedOPTImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     for (let j = i + 1; j <= i + 4; j++) {\n//                         const response = await fetch(`http://localhost:7001/images/${j}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                         }\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching OPTimages:', error);\n//                 }\n//             }\n\n//             setOPTImages(fetchedOPTImages);\n//         };\n\n//         fetchQImages();\n//         fetchOPTImages();\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     const handleNextClick = () => {\n//         // Move to the next question when the \"Next\" button is clicked\n//         setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n//     };\n\n//     // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\n//     const currentQuestion = Qimages[currentQuestionIndex];\n//     const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\n\n//     return (\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     <div className='options-container'>\n//                         <h2 className='question'>\n//                             {currentQuestion ? (\n//                                 <img\n//                                     src={questionImageSrc}\n//                                     alt={`QImage ${currentQuestionIndex + 1}`}\n//                                 />\n//                             ) : (\n//                                 <p>Loading question...</p>\n\n//                             // <Waveform\n//                             //     size={40}\n//                             //     lineWeight={3.5}\n//                             //     speed={1}\n//                             //     color=\"black\"\n//                             // />\n//                             )}\n//                         </h2>\n//                         <ul className='options-container'>\n//                             {/* ... (options rendering logic) */}\n//                             {OPTimages\n//                                 .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                                 .map((optImage, optIndex) => (\n\n//                                     <li key={optIndex}>\n//                                         <input type=\"radio\" />\n//                                         <label className='alpha-index'>\n//                                             <img\n//                                                 src={`data:image/png;base64,${optImage.image_data}`}\n//                                                 alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                             />\n//                                         </label>\n//                                     </li>\n//                                 ))}\n//                         </ul>\n//                         <button onClick={handleNextClick}>Next</button>\n//                     </div>\n\n//                 </div>\n//             </div>\n\n//             {/* ... */}\n//         </div>\n//     );\n// };\n\n// export default Paper;\n\n// import React, { useEffect, useState } from 'react';\n// import './Paper.css';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\n\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import { DotSpinner } from '@uiball/loaders'\n\n// const Paper = () => {\n\n//     const [Qimages, setQImages] = useState([]);\n//     const [OPTimages, setOPTImages] = useState([]);\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n//     useEffect(() => {\n//         // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//         const fetchQImages = async () => {\n//             let fetchedQImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     const response = await fetch(`http://localhost:7002/images/${i}`);\n//                     const data = await response.json();\n//                     if (data.length > 0) {\n//                         fetchedQImages.push(data[0]); // Add only the first image from each set\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching Qimages:', error);\n//                 }\n//             }\n\n//             setQImages(fetchedQImages);\n//         };\n\n//         // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//         const fetchOPTImages = async () => {\n//             let fetchedOPTImages = [];\n\n//             for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                 try {\n//                     for (let j = i + 1; j <= i + 4; j++) {\n//                         const response = await fetch(`http://localhost:7002/images/${j}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                         }\n//                     }\n//                 } catch (error) {\n//                     console.error('Error fetching OPTimages:', error);\n//                 }\n//             }\n\n//             setOPTImages(fetchedOPTImages);\n//         };\n\n//         fetchQImages();\n//         fetchOPTImages();\n//     }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     // const handleNextClick = () => {\n//     //     // Move to the next question when the \"Next\" button is clicked\n//     //     setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n\n//     // };\n\n//     // const handlepreClick=()=>{\n//     //     setCurrentQuestionIndex(prevIndex => prevIndex - 1);\n//     //     // setTimer(timer)\n\n//     // }\n\n// // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\n// const currentQuestion = Qimages[currentQuestionIndex];\n// const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\n\n// const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n\n//     return (\n//         <div className='main'>\n//             <div className='sub-main'>\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     <div>\n//                         <div className='subjects'>\n//                             <button className='subject-btn'>Mathematics</button>\n//                             <button className='subject-btn'>Physics</button>\n//                             <button className='subject-btn'>Chemistry</button>\n\n//                         </div>\n//                         <div className='second-header'>\n//                             <div className='single-select-question'>\n//                                 Single Select Question\n//                             </div>\n//                             <div className='right-header'>\n//                                 <div className='marks'>\n//                                     Marks: <div className='plus-mark'>+1</div>\n//                                     <div className='minus-mark'>-1</div>\n//                                 </div>\n//                                 {/* <div className='timer'>\n//                                     <h3>Time Left: {formatTime(countdown)}</h3>\n//                                 </div> */}\n//                             </div>\n//                         </div>\n//                         <div className='question-no'>\n//                             <span className=\"active-question-no\">Question No. {addLeadingZero(currentQuestionIndex + 1)}</span>\n//                             <span className=\"total-question\"> of {addLeadingZero(Qimages.length)}</span>\n//                         </div>\n\n//                         <div className='options-container'>\n\n//                             <h2 className='question'>\n//                                 {currentQuestion ? (\n//                                  <div>\n//                                         <img\n//                                             src={questionImageSrc}\n//                                             alt={`QImage ${currentQuestionIndex + 1}`}\n//                                         />\n//                                         <ul className='options-container'>\n//                                             {/* ... (options rendering logic) */}\n//                                             {OPTimages\n//                                                 .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                                                 .map((optImage, optIndex) => (\n\n//                                                     <li key={optImage}>\n//                                                         <input\n//                                                         name='index'\n//                                                             type=\"radio\"\n//                                                           />\n//                                                         <label className='alpha-index'>\n//                                                             <img\n//                                                                 src={`data:image/png;base64,${optImage.image_data}`}\n//                                                                 alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                                             />\n//                                                         </label>\n//                                                     </li>\n//                                                 ))}\n//                                         </ul>\n//                                  </div>\n//                                 ) : (\n//                                     // <p>Loading question...</p>\n\n//                                  <div className='loading-gif'>\n//                                             <DotSpinner\n//                                                 size={90}\n//                                                 speed={0.9}\n//                                                 color=\"black\"\n\n//                                             />\n//                                  </div>\n//                                 )}\n\n//                             </h2>\n//                             {/* <ul className='options-container'>\n//                                 ... (options rendering logic)\n//                                 {OPTimages\n//                                     .slice(currentQuestionIndex * 4, currentQuestionIndex * 4 + 4)\n//                                     .map((optImage, optIndex) => (\n\n//                                         <li key={optIndex}>\n//                                             <input type=\"radio\" />\n//                                             <label className='alpha-index'>\n//                                                 <img\n//                                                     src={`data:image/png;base64,${optImage.image_data}`}\n//                                                     alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                                 />\n//                                             </label>\n//                                         </li>\n//                                     ))}\n//                             </ul> */}\n//                             {/* <button onClick={handleNextClick}>Next</button> */}\n//                         </div>\n//                         {/* a */}\n\n//                         <div className=\"flex-right\">\n//                             {/* <button className='clear-btn'>Mark for Review & Next</button>\n//                             <button className='clear-btn' onClick={clearResponse}>Clear Response</button>\n//                             <button className='previous-btn' onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                                 <i class=\"fa-solid fa-angles-left\"></i>\n//                                 Previous\n//                             </button>\n//                             <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                                 {activeQuestion === questions.length - 1 ? 'Submit' : 'Save & Next'}<i class=\"fa-solid fa-angles-right\"></i>\n//                             </button> */}\n// {/*\n//                             <button onClick={handlepreClick}>Previous</button>\n\n//                             <button onClick={handleNextClick}>Save&Next</button> */}\n\n//                         </div>\n//                     </div>\n\n//                 </div>\n//             </div>\n\n//             <div className='rightsidebar'><RightSidebar /></div>\n//             {/* onQuestionSelect={handleQuestionSelect} answeredQuestions={answeredQuestions} */}\n\n//         </div>\n//     );\n// };\n\n// export default Paper;\n\n// import React, { useEffect, useState } from 'react';\n// import './Paper.css';\n// import PaperHeader from '../../Components/PaperHeader/PaperHeader';\n// import RightSidebar from '../../Components/RightSidebar/RightSidebar';\n// import { DotSpinner } from '@uiball/loaders';\n\n// const Paper = () => {\n//     const [Qimages, setQImages] = useState([]);\n//     const [OPTimages, setOPTImages] = useState([]);\n//     const [activeQuestion, setActiveQuestion] = useState(0);\n//     const [selectedAnswers, setSelectedAnswers] = useState(Array(Qimages.length).fill(''));\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n//     const [showResult, setShowResult] = useState(false);\n//     const [result, setResult] = useState({\n//         score: 0,\n//         correctAnswers: 0,\n//         wrongAnswers: 0,\n//     });\n//     const [timers, setTimers] = useState(new Array(Qimages.length).fill(0));\n//     const [timer, setTimer] = useState(0);\n\n//     useEffect(() => {\n//             // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n//             const fetchQImages = async () => {\n//                 let fetchedQImages = [];\n\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                     try {\n//                         const response = await fetch(`http://localhost:7002/images/${i}`);\n//                         const data = await response.json();\n//                         if (data.length > 0) {\n//                             fetchedQImages.push(data[0]); // Add only the first image from each set\n//                         }\n//                     } catch (error) {\n//                         console.error('Error fetching Qimages:', error);\n//                     }\n//                 }\n\n//                 setQImages(fetchedQImages);\n//             };\n\n//             // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n//             const fetchOPTImages = async () => {\n//                 let fetchedOPTImages = [];\n\n//                 for (let i = 1; i <= 1000; i += 6) { // Assuming there are 100 sets of images\n//                     try {\n//                         for (let j = i + 1; j <= i + 4; j++) {\n//                             const response = await fetch(`http://localhost:7002/images/${j}`);\n//                             const data = await response.json();\n//                             if (data.length > 0) {\n//                                 fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n//                             }\n//                         }\n//                     } catch (error) {\n//                         console.error('Error fetching OPTimages:', error);\n//                     }\n//                 }\n\n//                 setOPTImages(fetchedOPTImages);\n//             };\n\n//             fetchQImages();\n//             fetchOPTImages();\n//         }, []); // Empty dependency array to fetch data only once when the component mounts\n\n//     const onAnswerSelected = (OptionLetter) => {\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = OptionLetter;\n//         setSelectedAnswers(updatedSelectedAnswers);\n//     };\n\n//     const clearResponse = () => {\n//         const updatedSelectedAnswers = [...selectedAnswers];\n//         updatedSelectedAnswers[activeQuestion] = '';\n//         setSelectedAnswers(updatedSelectedAnswers);\n//     };\n\n//     const goToPreviousQuestion = () => {\n//         setCurrentQuestionIndex(prevIndex => {\n\n//             // Save the current timer value for the question\n\n//             const updatedTimers = [...timers];\n\n//             updatedTimers[prevIndex] = timer;\n\n//             setTimers(updatedTimers);\n\n//             // Move to the previous question\n\n//             return prevIndex - 1;\n\n//         });\n//         if (activeQuestion > 0) {\n//             setActiveQuestion(activeQuestion - 1);\n//         }\n//     };\n\n//     const onClickNext = () => {\n//         setCurrentQuestionIndex(prevIndex => {\n\n//             // Save the current timer value for the question\n\n//             const updatedTimers = [...timers];\n\n//             updatedTimers[prevIndex] = timer;\n\n//             setTimers(updatedTimers);\n\n//             // Move to the next question\n\n//             return prevIndex + 1;\n\n//         });\n//         const correctAnswer = Qimages[activeQuestion].correct_answer; // Replace 'correct_answer' with the actual property name\n//         const selectedAnswer = selectedAnswers[activeQuestion];\n\n//         if (selectedAnswer === correctAnswer) {\n//             setResult(prevResult => ({\n//                 ...prevResult,\n//                 score: prevResult.score + 5,\n//                 correctAnswers: prevResult.correctAnswers + 1\n//             }));\n//         } else {\n//             setResult(prevResult => ({\n//                 ...prevResult,\n//                 wrongAnswers: prevResult.wrongAnswers + 1\n//             }));\n//         }\n\n//         if (activeQuestion < Qimages.length - 1) {\n//             setActiveQuestion(prevActiveQuestion => prevActiveQuestion + 1);\n//         } else {\n//             setShowResult(true);\n//             calculateResult(); // Implement this function for additional result calculations\n//         }\n//     };\n\n//     const formatTime = (seconds) => {\n\n//         const hours = Math.floor(seconds / 3600);\n\n//         const minutes = Math.floor((seconds % 3600) / 60);\n\n//         const remainingSeconds = seconds % 60;\n\n//         return `${hours > 9 ? hours : '0' + hours}:${minutes > 9 ? minutes : '0' + minutes}:${remainingSeconds > 9 ? remainingSeconds : '0' + remainingSeconds}`;\n\n//     };\n\n//     // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\n//     const currentQuestion = Qimages[currentQuestionIndex];\n//     const questionImageSrc = currentQuestion ? `data:image/png;base64,${currentQuestion.image_data}` : '';\n//     const addLeadingZero = (number) => (number > 9 ? number : `0${number}`)\n\n//     const calculateResult = () => {\n//         // Implement additional result calculations here if needed\n//         // Example: Accuracy, Average Score, Top Score, Live Rank, etc.\n//     };\n\n//     return (\n//         <div className='main'>\n\n//             <div className='sub-main'>\n\n//                 <div><PaperHeader /></div>\n//                 <div className=\"quiz-container\">\n//                     <div>\n//                         <div className='subjects'>\n//                             <button className='subject-btn'>Mathematics</button>\n//                             <button className='subject-btn'>Physics</button>\n//                             <button className='subject-btn'>Chemistry</button>\n\n//                         </div>\n//                         <div className='second-header'>\n//                             <div className='single-select-question'>\n//                                 Single Select Question\n//                             </div>\n//                             <div className='right-header'>\n//                                 <div className='marks'>\n//                                     Marks: <div className='plus-mark'>+1</div>\n//                                     <div className='minus-mark'>-1</div>\n//                                 </div>\n//                                 <div>Timer: {formatTime(timer)}</div>\n//                             </div>\n//                         </div>\n//                         <div className='question-no'>\n//                             <span className=\"active-question-no\">Question No. {addLeadingZero(currentQuestionIndex + 1)}</span>\n//                             <span className=\"total-question\"> of {addLeadingZero(Qimages.length)}</span>\n//                         </div>\n\n//                         <div className='options-container'>\n\n//                             <h2 className='question'>\n//                                 {Qimages && Qimages.length > 0 && Qimages[activeQuestion] ? (\n\n//                                     <div>\n//                                         <img src={`data:image/png;base64,${Qimages[activeQuestion].image_data}`} alt={`QImage ${activeQuestion + 1}`} />\n//                                         <ul className='options-container'>\n//                                             {OPTimages.slice(activeQuestion * 4, activeQuestion * 4 + 4).map((optImage, optIndex) => (\n//                                                 <li key={optIndex}>\n//                                                     <input\n//                                                         type='radio'\n//                                                         name='index'\n//                                                         checked={selectedAnswers[activeQuestion] === String.fromCharCode(65 + optIndex)}\n//                                                         onChange={() => onAnswerSelected(String.fromCharCode(65 + optIndex))}\n//                                                     />\n//                                                     <label className='alpha-index'>\n//                                                         <img\n//                                                             src={`data:image/png;base64,${optImage.image_data}`}\n//                                                             alt={`OPTImage ${optIndex + 2}-${optIndex + 5}`}\n//                                                         />\n//                                                     </label>\n//                                                 </li>\n//                                             ))}\n//                                         </ul>\n//                                     </div>\n\n//                                 ) : (\n\n//                                     <div className='loading-gif'>\n//                                         <DotSpinner\n//                                             size={90}\n//                                             speed={0.9}\n//                                             color=\"black\"\n//                                         />\n//                                     </div>\n//                                 )}\n//                             </h2>\n\n//                         </div>\n\n//                         <div className=\"flex-right\">\n\n//                         </div>\n//                     </div>\n\n//                 </div>\n\n//                 <div className='flex-right'>\n//                     <button className='clear-btn'>Mark for Review & Next</button>\n//                     <button className='clear-btn' onClick={clearResponse}>\n//                         Clear Response\n//                     </button>\n//                     <button className='previous-btn'  onClick={goToPreviousQuestion} disabled={activeQuestion === 0}>\n//                         <i className='fa-solid fa-angles-left'></i> Previous\n//                     </button>\n//                     <button className='save-btn' onClick={onClickNext} disabled={!selectedAnswers[activeQuestion]}>\n//                         {activeQuestion === Qimages.length - 1 ? 'Submit' : 'Save & Next'}\n//                         <i className='fa-solid fa-angles-right'></i>\n//                     </button>\n//                 </div>\n//             </div>\n//             <div className='rightsidebar'>\n//                 <RightSidebar />\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Paper;\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./Paper.css\";\nimport PaperHeader from \"../../Components/PaperHeader/PaperHeader\";\n// import RightSidebar from \"../../Components/RightSidebar/RightSidebar\";\n// import \"../../Components/RightSidebar/RightSidebar.css\";\nimport { DotSpinner } from \"@uiball/loaders\";\nimport { Link } from \"react-router-dom\";\nimport QuizHome from \"../QuizHome/QuizHome\";\nimport DownloadQuizPage from \"../DownloadQuizPage/DownloadQuizPage\";\nimport RightSidebar from \"../RightSidebar/RightSidebar\";\n\nconst Paper = ({ answeredQuestions }) => {\n  const [Qimages, setQImages] = useState([]);\n  const [questionStatus, setQuestionStatus] = useState([\n    \"notAnswered\",\n    ...Array(29).fill(\"notVisited\"),\n  ]);\n  const [answeredCount, setAnsweredCount] = useState(0);\n  const [notAnsweredCount, setNotAnsweredCount] = useState(0);\n  const [answeredmarkedForReviewCount, setAnsweredmarkedForReviewCount] =\n    useState(0);\n  const [markedForReviewCount, setMarkedForReviewCount] = useState(0);\n  const [VisitedCount, setVisitedCount] = useState(0);\n  const updateCounters = () => {\n    let answered = 0;\n    let notAnswered = 0;\n    let marked = 0;\n    let markedForReview = 0;\n    let Visited = 0;\n\n    questionStatus.forEach((status) => {\n      if (status === \"answered\") {\n        answered++;\n      } else if (status === \"notAnswered\") {\n        notAnswered++;\n      } else if (status === \"marked\") {\n        marked++;\n      } else if (status === \"Answered but marked for review\") {\n        markedForReview++;\n      } else if (status === \"notVisited\") {\n        Visited++;\n      }\n    });\n\n    setAnsweredCount(answered);\n    setNotAnsweredCount(notAnswered);\n    setAnsweredmarkedForReviewCount(marked);\n    setMarkedForReviewCount(markedForReview);\n    setVisitedCount(Visited);\n  };\n\n  // const [Qimages, setQImages] = useState([]);\n  const [OPTimages, setOPTImages] = useState([]);\n  const [activeQuestion, setActiveQuestion] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState(\n    Array(Qimages.length).fill(\"\")\n  );\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [showResult, setShowResult] = useState(false);\n  const [result, setResult] = useState({\n    score: 0,\n    correctAnswers: 0,\n    wrongAnswers: 0,\n  });\n\n  useEffect(() => {\n    // Fetch data for Qimages (first image from each set of IDs 1-6, 7-12, ...)\n    const fetchQImages = async () => {\n      let fetchedQImages = [];\n\n      for (let i = 1; i <= 1000; i += 6) {\n        // Assuming there are 100 sets of images\n        try {\n          const response = await fetch(`http://localhost:4009/images/${i}`);\n          const data = await response.json();\n          if (data.length > 0) {\n            fetchedQImages.push(data[0]); // Add only the first image from each set\n          }\n        } catch (error) {\n          console.error(\"Error fetching Qimages:\", error);\n        }\n      }\n\n      setQImages(fetchedQImages);\n    };\n\n    // Fetch data for OPTimages (images 2 to 5 from each set of IDs 1-6, 7-12, ...)\n    const fetchOPTImages = async () => {\n      let fetchedOPTImages = [];\n\n      for (let i = 1; i <= 1000; i += 6) {\n        // Assuming there are 100 sets of images\n        try {\n          for (let j = i + 1; j <= i + 4; j++) {\n            const response = await fetch(`http://localhost:4009/images/${j}`);\n            const data = await response.json();\n            if (data.length > 0) {\n              fetchedOPTImages.push(data[0]); // Add the second to fifth images from each set\n            }\n          }\n        } catch (error) {\n          console.error(\"Error fetching OPTimages:\", error);\n        }\n      }\n\n      setOPTImages(fetchedOPTImages);\n    };\n\n    fetchQImages();\n    fetchOPTImages();\n\n    updateCounters();\n  }, [questionStatus]); // Empty dependency array to fetch data only once when the component mounts\n\n  const [timers, setTimers] = useState(new Array(Qimages.length).fill(0));\n  const [timer, setTimer] = useState(0);\n\n  const onAnswerSelected = (OptionLetter) => {\n    const updatedSelectedAnswers = [...selectedAnswers];\n    updatedSelectedAnswers[activeQuestion] = OptionLetter;\n    setSelectedAnswers(updatedSelectedAnswers);\n\n    const updatedQuestionStatus = [...questionStatus];\n    updatedQuestionStatus[activeQuestion] = \"answered\";\n    setQuestionStatus(updatedQuestionStatus);\n  };\n\n  const clearResponse = () => {\n    const updatedSelectedAnswers = [...selectedAnswers];\n    updatedSelectedAnswers[activeQuestion] = \"\";\n    setSelectedAnswers(updatedSelectedAnswers);\n  };\n\n  const goToPreviousQuestion = () => {\n    setCurrentQuestionIndex((prevIndex) => {\n      // Save the current timer value for the question\n\n      const updatedTimers = [...timers];\n\n      updatedTimers[prevIndex] = timer;\n\n      setTimers(updatedTimers);\n\n      // Move to the previous question\n\n      return prevIndex - 1;\n    });\n    if (activeQuestion > 0) {\n      setActiveQuestion(activeQuestion - 1);\n    }\n  };\n\n  const [accuracy, setAccuracy] = useState(0);\n  const [averageScore, setAverageScore] = useState(0);\n  const [topScore, setTopScore] = useState(0);\n  const [liveRank, setLiveRank] = useState(0);\n\n  // const calculateResult = () => {\n  //     // Calculate accuracy\n  //     const totalAttempted = answeredQuestions.length;\n  //     const totalCorrect = result.correctAnswers;\n  //     const calculatedAccuracy = (totalCorrect / totalAttempted) * 100;\n  //     setAccuracy(calculatedAccuracy.toFixed(2));\n\n  //     // Calculate average score\n  //     const calculatedAverageScore = result.score / totalAttempted;\n  //     setAverageScore(calculatedAverageScore.toFixed(2));\n\n  //     // Placeholder for live ranking data - Replace this with actual data\n  //     const calculatedTopScore = 100;\n  //     const calculatedLiveRank = 1;\n\n  //     setTopScore(calculatedTopScore);\n  //     setLiveRank(calculatedLiveRank);\n  // };\n\n  const calculateResult = () => {\n    // Make sure answeredQuestions is defined before accessing its length\n    const totalAttempted = answeredQuestions ? answeredQuestions.length : 0;\n    const totalCorrect = result.correctAnswers;\n    const calculatedAccuracy =\n      totalAttempted > 0 ? (totalCorrect / totalAttempted) * 100 : 0;\n    setAccuracy(calculatedAccuracy.toFixed(2));\n\n    const calculatedAverageScore =\n      totalAttempted > 0 ? result.score / totalAttempted : 0;\n    setAverageScore(calculatedAverageScore.toFixed(2));\n\n    // Placeholder for live ranking data - Replace this with actual data\n    const calculatedTopScore = 0;\n    const calculatedLiveRank = 0;\n\n    setTopScore(calculatedTopScore);\n    setLiveRank(calculatedLiveRank);\n  };\n\n  const handleSubmit = () => {\n    window.alert(\"Your Test has been Submitted!! Click Ok to See Result.\");\n    setShowResult(true);\n    calculateResult();\n\n    //starting result page code\n\n    // const correctAnswer = Qimages[activeQuestion].correct_answer;\n    // setResult((prev) =>\n    //   selectedAnswers[activeQuestion] === correctAnswer\n    //     ? {\n    //         ...prev,\n    //         score: prev.score + 5,\n    //         correctAnswers: prev.correctAnswers + 1,\n    //       }\n    //     : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\n    // );\n    // if (activeQuestion !== Qimages.length - 1) {\n    //   setActiveQuestion((prev) => prev + 1);\n    // } else {\n    //   window.alert(\"Your Test has been Submitted!! Click Ok to See Result.\");\n    //   // setActiveQuestion(0);\n    //   setShowResult(true);\n    //   calculateResult(); //new added code\n    // }\n    //end result page code\n  };\n\n  const onClickNext = () => {\n    // //starting result page code\n\n    // const correctAnswer = Qimages[activeQuestion].correct_answer;\n    // setResult((prev) =>\n    //   selectedAnswers[activeQuestion] === correctAnswer\n    //     ? {\n    //         ...prev,\n    //         score: prev.score + 5,\n    //         correctAnswers: prev.correctAnswers + 1,\n    //       }\n    //     : { ...prev, wrongAnswers: prev.wrongAnswers + 1 }\n    // );\n    // if (activeQuestion !== Qimages.length - 1) {\n    //   setActiveQuestion((prev) => prev + 1);\n    // } else {\n    //   window.alert(\"Your Test has been Submitted!! Click Ok to See Result.\");\n    //   // setActiveQuestion(0);\n    //   setShowResult(true);\n    //   calculateResult(); //new added code\n    // }\n    // //end result page code\n\n    setCurrentQuestionIndex((prevIndex) => {\n      // Save the current timer value for the question\n\n      const updatedTimers = [...timers];\n\n      updatedTimers[prevIndex] = timer;\n\n      setTimers(updatedTimers);\n      return prevIndex + 1;\n    });\n\n    const updatedQuestionStatus = [...questionStatus];\n    // updatedQuestionStatus[activeQuestion] = \"notAnswered\";\n\n    // Set status of the next question (if any) to \"notAnswered\"\n    if (activeQuestion < Qimages.length - 1) {\n      updatedQuestionStatus[activeQuestion + 1] = \"notAnswered\";\n    } else if (!selectedAnswers[activeQuestion] === \"answered\") {\n      updatedQuestionStatus[activeQuestion] = \"notAnswered\";\n    } else if (!markForReview() === true) {\n      markForReview();\n    } else if (selectedAnswers[activeQuestion]) {\n      updatedQuestionStatus[activeQuestion] = \"answered\";\n    } else if (!markForReview() === false) {\n      markForReview();\n    }\n\n    setQuestionStatus(updatedQuestionStatus);\n\n    const correctAnswer = Qimages[activeQuestion].correct_answer; // Replace 'correct_answer' with the actual property name\n    const selectedAnswer = selectedAnswers[activeQuestion];\n\n    if (selectedAnswer === correctAnswer) {\n      setResult((prevResult) => ({\n        ...prevResult,\n        score: prevResult.score + 5,\n        correctAnswers: prevResult.correctAnswers + 1,\n      }));\n    } else {\n      setResult((prevResult) => ({\n        ...prevResult,\n        wrongAnswers: prevResult.wrongAnswers + 1,\n      }));\n    }\n\n    if (activeQuestion < Qimages.length - 1) {\n      setActiveQuestion((prevActiveQuestion) => prevActiveQuestion + 1);\n    } else {\n      // setShowResult(true);\n      calculateResult();\n    }\n  };\n\n  const markForReview = () => {\n    // Update questionStatus for the marked question\n    const updatedQuestionStatus = [...questionStatus];\n    if (selectedAnswers[activeQuestion]) {\n      updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n      // if(selectedAnswers[activeQuestion] === \"Answered but marked for review\"){\n      //   updatedQuestionStatus[activeQuestion] = \"Answered but marked for review\";\n      // }\n    } else if (!selectedAnswers[activeQuestion]) {\n      updatedQuestionStatus[activeQuestion] = \"marked\";\n    }\n\n    setQuestionStatus(updatedQuestionStatus);\n  };\n\n  const formatTime = (seconds) => {\n    const hours = Math.floor(seconds / 3600);\n\n    const minutes = Math.floor((seconds % 3600) / 60);\n\n    const remainingSeconds = seconds % 60;\n\n    return `${hours > 9 ? hours : \"0\" + hours}:${\n      minutes > 9 ? minutes : \"0\" + minutes\n    }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n  };\n\n  useEffect(() => {\n    // Set the timer to the saved value for the current question\n\n    setTimer(timers[currentQuestionIndex] || 0);\n\n    let interval;\n\n    interval = setInterval(() => {\n      setTimer((prevTimer) => prevTimer + 1);\n    }, 1000);\n\n    // Clear the interval when the component unmounts or when the user moves to the next question\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [currentQuestionIndex, timers]);\n\n  // Check if Qimages[currentQuestionIndex] is defined before accessing its properties\n  const currentQuestion = Qimages[currentQuestionIndex];\n  const questionImageSrc = currentQuestion\n    ? `data:image/png;base64,${currentQuestion.image_data}`\n    : \"\";\n  const addLeadingZero = (number) => (number > 9 ? number : `0${number}`);\n\n  // const calculateResult = () => {\n  //   // Implement additional result calculations here if needed\n  //   // Example: Accuracy, Average Score, Top Score, Live Rank, etc.\n  // };\n\n  // Timer for whole page\n\n  //   const totalTime = 180 * 60; // 180 minutes in seconds\n  //   const [wtimer, setWTimer] = useState(totalTime);\n\n  //   useEffect(() => {\n  //     const interval = setInterval(() => {\n  //       setWTimer((prevTimer) => prevTimer - 1);\n  //     }, 1000);\n\n  //     // Clear the interval and handle time-up logic when timer reaches 0\n  //     if (timer <= 0) {\n  //       clearInterval(interval);\n  //       // Handle time-up logic here (e.g., navigate to a different component)\n  //     }\n\n  //     // Clean up the interval on component unmount or when navigating away\n  //     return () => {\n  //       clearInterval(interval);\n  //     };\n  //   }, [timer]);\n\n  //   const WformatTime = (seconds) => {\n  //     const hours = Math.floor(seconds / 3600);\n  //     const minutes = Math.floor((seconds % 3600) / 60);\n  //     const remainingSeconds = seconds % 60;\n  //     return `${hours > 9 ? hours : '0' + hours}:${minutes > 9 ? minutes : '0' + minutes}:${remainingSeconds > 9 ? remainingSeconds : '0' + remainingSeconds}`;\n  //   };\n\n  // const [answeredQuestions, setAnsweredQuestions] = useState([]);\n\n  // const handleButtonClick = (questionNumber) => {\n  //   onQuestionSelect(questionNumber);\n  //   setAnsweredQuestions([...answeredQuestions, questionNumber]);\n  // };\n\n\n\n  // const buttons = [\n  //   1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\n  //   22, 23, 24, 25, 26, 27, 28, 29, 30,\n  // ];\n  // const renderList = buttons.map((item, index) => {\n  //   let className = \"quesAns-btn\";\n  //   if (questionStatus && questionStatus[index] === \"answered\") {\n  //     className += \"answered\";\n  //   }\n  //   return (\n  //     <div>\n  //       <button className={className} onClick={() => handleButtonClick(item)}>\n  //         {item}\n  //       </button>\n  //     </div>\n  //   );\n  // });\n\n  const [opensubject_1, setOpensubject_1] = useState(true);\n  const [opensubject_2, setOpensubject_2] = useState(false);\n  const [opensubject_3, setOpensubject_3] = useState(false);\n\n  const openAlertSubject1 = () => {\n    setOpensubject_1(true);\n    setOpensubject_2(false);\n    setOpensubject_3(false);\n  };\n  const openAlertSubject2 = () => {\n    setOpensubject_2(true);\n    setOpensubject_1(false);\n    setOpensubject_3(false);\n  };\n  const openAlertSubject3 = () => {\n    setOpensubject_3(true);\n    setOpensubject_2(false);\n    setOpensubject_1(false);\n  };\n\n  const handleQuestionSelect = (questionNumber) => {\n    setCurrentQuestionIndex(questionNumber - 1);\n    setActiveQuestion(questionNumber - 1);\n  };\n\n  return (\n    <div>\n      {!showResult ? (\n        <div className=\"main\">\n          <div className=\"sub-main\">\n            <div>\n              <PaperHeader />\n            </div>\n            <div className=\"quiz-container\">\n              {/* {!showResult ? ( */}\n              <div>\n                <div className=\"subjects\">\n                  <button className=\"subject-btn\" onClick={openAlertSubject1}>\n                    Mathematics\n                  </button>\n                  <button className=\"subject-btn\" onClick={openAlertSubject2}>\n                    Physics\n                  </button>\n                  <button className=\"subject-btn\" onClick={openAlertSubject3}>\n                    Chemistry\n                  </button>\n                </div>\n                <div className=\"second-header\">\n                  <div className=\"single-select-question\">\n                    Single Select Question\n                  </div>\n                  <div className=\"right-header\">\n                    <div className=\"marks\">\n                      Marks: <div className=\"plus-mark\">+1</div>\n                      <div className=\"minus-mark\">-1</div>\n                    </div>\n                    <div>Timer: {formatTime(timer)}</div>\n                  </div>\n                </div>\n                {/* <div className=\"question-no\">\n               <span className=\"active-question-no\">\n                 Question No. {addLeadingZero(currentQuestionIndex + 1)}\n               </span>\n               <span className=\"total-question\">\n                 {\" \"}\n                 of {addLeadingZero(Qimages.length)}\n               </span>\n             </div> */}\n\n                {opensubject_1 ? (\n                  <div className=\"Subject-Container\">\n                    Mathematics\n                    <div className=\"question-no\">\n                      <span className=\"active-question-no\">\n                        Question No. {addLeadingZero(currentQuestionIndex + 1)}\n                      </span>\n                      <span className=\"total-question\">\n                        {\" \"}\n                        of {addLeadingZero(Qimages.length)}\n                      </span>\n                    </div>\n                    <h2 className=\"question\">\n                      {Qimages &&\n                      Qimages.length > 0 &&\n                      Qimages[activeQuestion] ? (\n                        <div>\n                          <img\n                            src={`data:image/png;base64,${Qimages[activeQuestion].image_data}`}\n                            alt={`QImage ${activeQuestion + 1}`}\n                          />\n                          <ul className=\"options-container\">\n                            {OPTimages.slice(\n                              activeQuestion * 4,\n                              activeQuestion * 4 + 4\n                            ).map((optImage, optIndex) => (\n                              <li key={optIndex}>\n                                <input\n                                  type=\"radio\"\n                                  name=\"index\"\n                                  checked={\n                                    selectedAnswers[activeQuestion] ===\n                                    String.fromCharCode(65 + optIndex)\n                                  }\n                                  onChange={() =>\n                                    onAnswerSelected(\n                                      String.fromCharCode(65 + optIndex)\n                                    )\n                                  }\n                                />\n                                <label className=\"alpha-index\">\n                                  <img\n                                    src={`data:image/png;base64,${optImage.image_data}`}\n                                    alt={`OPTImage ${optIndex + 2}-${\n                                      optIndex + 5\n                                    }`}\n                                  />\n                                </label>\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      ) : (\n                        <div className=\"loading-gif\">\n                          <DotSpinner size={90} speed={0.9} color=\"black\" />\n                        </div>\n                      )}\n                    </h2>\n                  </div>\n                ) : null}\n\n                {opensubject_2 ? (\n                  <div className=\"Subject-Container\">\n                    Physics\n                    <div className=\"question-no\">\n                      <span className=\"active-question-no\">\n                        Question No. {addLeadingZero(currentQuestionIndex + 1)}\n                      </span>\n                      <span className=\"total-question\">\n                        {\" \"}\n                        of {addLeadingZero(Qimages.length)}\n                      </span>\n                    </div>\n                    <h2 className=\"question\">\n                      {Qimages &&\n                      Qimages.length > 0 &&\n                      Qimages[activeQuestion] ? (\n                        <div>\n                          <img\n                            src={`data:image/png;base64,${Qimages[activeQuestion].image_data}`}\n                            alt={`QImage ${activeQuestion + 1}`}\n                          />\n                          <ul className=\"options-container\">\n                            {OPTimages.slice(\n                              activeQuestion * 4,\n                              activeQuestion * 4 + 4\n                            ).map((optImage, optIndex) => (\n                              <li key={optIndex}>\n                                <input\n                                  type=\"radio\"\n                                  name=\"index\"\n                                  checked={\n                                    selectedAnswers[activeQuestion] ===\n                                    String.fromCharCode(65 + optIndex)\n                                  }\n                                  onChange={() =>\n                                    onAnswerSelected(\n                                      String.fromCharCode(65 + optIndex)\n                                    )\n                                  }\n                                />\n                                <label className=\"alpha-index\">\n                                  <img\n                                    src={`data:image/png;base64,${optImage.image_data}`}\n                                    alt={`OPTImage ${optIndex + 2}-${\n                                      optIndex + 5\n                                    }`}\n                                  />\n                                </label>\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      ) : (\n                        <div className=\"loading-gif\">\n                          <DotSpinner size={90} speed={0.9} color=\"black\" />\n                        </div>\n                      )}\n                    </h2>\n                  </div>\n                ) : null}\n\n                {opensubject_3 ? (\n                  <div className=\"Subject-Container\">\n                    Chemistry\n                    <div className=\"question-no\">\n                      <span className=\"active-question-no\">\n                        Question No. {addLeadingZero(currentQuestionIndex + 1)}\n                      </span>\n                      <span className=\"total-question\">\n                        {\" \"}\n                        of {addLeadingZero(Qimages.length)}\n                      </span>\n                    </div>\n                    <h2 className=\"question\">\n                      {Qimages &&\n                      Qimages.length > 0 &&\n                      Qimages[activeQuestion] ? (\n                        <div>\n                          <img\n                            src={`data:image/png;base64,${Qimages[activeQuestion].image_data}`}\n                            alt={`QImage ${activeQuestion + 1}`}\n                          />\n                          <ul className=\"options-container\">\n                            {OPTimages.slice(\n                              activeQuestion * 4,\n                              activeQuestion * 4 + 4\n                            ).map((optImage, optIndex) => (\n                              <li key={optIndex}>\n                                <input\n                                  type=\"radio\"\n                                  name=\"index\"\n                                  checked={\n                                    selectedAnswers[activeQuestion] ===\n                                    String.fromCharCode(65 + optIndex)\n                                  }\n                                  onChange={() =>\n                                    onAnswerSelected(\n                                      String.fromCharCode(65 + optIndex)\n                                    )\n                                  }\n                                />\n                                <label className=\"alpha-index\">\n                                  <img\n                                    src={`data:image/png;base64,${optImage.image_data}`}\n                                    alt={`OPTImage ${optIndex + 2}-${\n                                      optIndex + 5\n                                    }`}\n                                  />\n                                </label>\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      ) : (\n                        <div className=\"loading-gif\">\n                          <DotSpinner size={90} speed={0.9} color=\"black\" />\n                        </div>\n                      )}\n                    </h2>\n                  </div>\n                ) : null}\n\n                <div className=\"flex-right\">\n                  <button className=\"clear-btn\" onClick={markForReview}>\n                    Mark for Review & Next\n                  </button>\n                  <button className=\"clear-btn\" onClick={clearResponse}>\n                    Clear Response\n                  </button>\n                  <button\n                    className=\"previous-btn\"\n                    onClick={goToPreviousQuestion}\n                    disabled={activeQuestion === 0}\n                  >\n                    <i className=\"fa-solid fa-angles-left\"></i> Previous\n                  </button>\n                  <button\n                    className=\"save-btn\"\n                    onClick={onClickNext}\n                    // disabled={!selectedAnswers[activeQuestion]}\n                  >\n                    {/* {activeQuestion === Qimages.length - 1\n                      ? \"Submit\"\n                      : \"Save & Next\"} */}\n                    Save & Next\n                    <i className=\"fa-solid fa-angles-right\"></i>\n                  </button>\n                </div>\n              </div>\n            </div>\n\n            {/* <div className=\"flex-right\">\n          <button className=\"clear-btn\" onClick={markForReview}>\n            Mark for Review & Next\n          </button>\n          <button className=\"clear-btn\" onClick={clearResponse}>\n            Clear Response\n          </button>\n          <button\n            className=\"previous-btn\"\n            onClick={goToPreviousQuestion}\n            disabled={activeQuestion === 0}\n          >\n            <i className=\"fa-solid fa-angles-left\"></i> Previous\n          </button>\n          <button\n            className=\"save-btn\"\n            onClick={onClickNext}\n            // disabled={!selectedAnswers[activeQuestion]}\n          >\n            {activeQuestion === Qimages.length - 1 ? \"Submit\" : \"Save & Next\"}\n            <i className=\"fa-solid fa-angles-right\"></i>\n          </button>\n        </div> */}\n          </div>\n          <div className=\"rightsidebar\">\n            <RightSidebar\n              onQuestionSelect={handleQuestionSelect}\n              questionStatus={questionStatus}\n              setQuestionStatus={setQuestionStatus}\n              answeredCount={answeredCount}\n              notAnsweredCount={notAnsweredCount}\n              answeredmarkedForReviewCount={answeredmarkedForReviewCount}\n              markedForReviewCount={markedForReviewCount}\n              VisitedCount={VisitedCount}\n            />\n            <button onClick={handleSubmit} id=\"resume_btn\">\n              Submit\n            </button>\n            {/* <Link to='/QuizHome' element={<QuizHome/>}><button id=\"resume_btn\">Resume</button></Link> */}\n          </div>\n        </div>\n      ) : (\n        <div className=\"result\">\n          <h3 id=\"result_header\">Result</h3>\n          <div className=\"result_page_links\">\n            <Link id=\"result_btn\" to=\"/QuizHome\" element={<QuizHome />}>\n              Back\n            </Link>\n            <br />\n            {/* <Link to='/writtenTestPaper' element={<writtenTestPaper/>}>Review Your TestPaper</Link> */}\n            {/* <br /> */}\n            <Link\n              id=\"result_btn\"\n              to=\"/DownloadQuizPage\"\n              element={<DownloadQuizPage />}\n            >\n              Download QuestionPaper\n            </Link>\n          </div>\n          <div className=\"result_contents\">\n            <div className=\"section_1\"></div>\n            <div className=\"section_2\"></div>\n            <div className=\"section_3\"></div>\n            <p>\n              Total Questions: <span>{Qimages.length}</span>\n            </p>\n            <p>\n              Total Score:<span> {result.score}</span>\n            </p>\n            <p>\n              Correct Answers:<span> {result.correctAnswers}</span>\n            </p>\n            <p>\n              Wrong Answers:<span> {result.wrongAnswers}</span>\n            </p>\n            <p>\n              Accuracy:<span> {accuracy}%</span>\n            </p>\n            <p>\n              Average Score:<span> {averageScore}</span>\n            </p>\n            <p>\n              Top Score:<span> {topScore}</span>\n            </p>\n            <p>\n              Live Rank:<span> {liveRank}</span>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Paper;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","/home/user/Documents/egate_Quiz_project/src/Components/LeftSidebar/LeftSidebar.jsx",[],[],"/home/user/Documents/egate_Quiz_project/src/Components/PaperHeader/PaperHeader.jsx",[],[],"/home/user/Documents/egate_Quiz_project/src/Pages/RightSidebar/RightSidebar.jsx",["178","179","180","181","182","183","184","185"],[],"// import React, { useState } from 'react'\n\n// import './RightSidebar.css'\n\n// const buttons = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n\n// // const renderList = buttons.map((item, index) =>\n// //     <div key={index}><button className='quesAns-btn'>{item}</button></div>\n// // )\n\n// const RightSidebar = ({ onQuestionSelect, questionStatus }) => {\n\n//     const [answeredQuestions, setAnsweredQuestions] = useState([]);\n\n//     const handleButtonClick = (questionNumber)=> {\n//         onQuestionSelect(questionNumber);\n//         setAnsweredQuestions([...answeredQuestions, questionNumber])\n//     }\n\n//     const renderList = buttons.map((item, index) => {\n//          let className = 'quesAns-btn';\n//          if(questionStatus && questionStatus[index] === 'answered'){\n//             className += 'answered';\n//          }\n//         return(\n//             <div>\n//                 <button className={className} onClick={() => handleButtonClick(item)}>{item}</button>\n//             </div>\n//         )\n\n//     })\n\n//     // const buttonClass = isAnswered ? 'quesAns-btn-green' : 'quesAns-btn';\n\n//     // const renderList = buttons.map((item) => {\n\n//     //     return (\n//     //         <div>\n//     //             <button className='quesAns-btn' onClick={() => handleButtonClick(item)}>{item}</button>\n//     //         </div>\n//     //     )\n//     // })\n\n//     // const renderList = buttons.map((item) =>\n//     //     <div>\n//     //         <button className='quesAns-btn' onClick={() => handleButtonClick(item)}>{item}</button>\n//     //     </div>\n//     // )\n\n//     // const renderList = buttons.map((item) => {\n\n//     //     const isAnswered = answeredQuestions.includes(item);\n//     //     const buttonClass = isAnswered ? 'quesAns-btn-green' : 'quesAns-btn';\n//     //     return(\n//     //         <div>\n//     //             <button className={buttonClass} onClick={() => handleButtonClick(item)}>{item}</button>\n//     //         </div>\n//     //     )\n//     // })\n\n//     return (\n\n//         <div className='right-side-bar'>\n//             <div className='rightSidebar-topHeader'><p>Name of the person</p>\n//             <p>Remaining Time: 1:10:30</p>\n//             </div>\n//             <div className='sidebar-header'>\n//                 <p className='header-para'>You are viewing <span className='subject'>Mathematics</span> Section Question Palette</p>\n//             </div>\n\n//             <div className='ques-btn'>\n//                 <ul className='btn-ul'>{renderList}</ul>\n//             </div>\n\n//             {/* <div key={index}>\n//                 <button className='quesAns-btn'>{item}</button>\n//             </div> */}\n\n//             <div className='sidebar-footer'>\n//                 <h4 className='sidebar-footer-header'>Legend</h4>\n//                 <div className='footer-btns'>\n//                     <div className='inst-btns'><button className='instruction-btn1'>0</button><p>Answerd</p><br /></div><br />\n//                     <div className='inst-btns'><button className='instruction-btn2'>0</button><p>Not Answered</p><br /></div><br />\n//                     <div className='inst-btns'><button className='instruction-btn3'>0</button><p>Marked</p><br /></div><br />\n//                     <div className='inst-btns'><button className='instruction-btn4'>0</button><p>Not Visited</p></div>\n//                 </div>\n//             </div>\n\n//         </div>\n//     )\n\n// }\n\n// export default RightSidebar\n\nimport React, { useEffect, useRef, useState } from \"react\";\n\nimport \"./RightSidebar.css\";\n\nimport PropTypes from \"prop-types\";\n\nconst buttons = [\n  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n  23, 24, 25, 26, 27, 28, 29, 30,\n];\n\n// const renderList = buttons.map((item, index) =>\n//     <div key={index}><button className='quesAns-btn'>{item}</button></div>\n// )\n\nconst RightSidebar = ({\n  onQuestionSelect,\n  questionStatus,\n  seconds,\n  setQuestionStatus,\n  answeredCount,\n  notAnsweredCount,\n  answeredmarkedForReviewCount,\n  markedForReviewCount,\n  VisitedCount,\n}) => {\n  const [activeQuestion, setActiveQuestion] = useState(0);\n  const [answeredQuestions, setAnsweredQuestions] = useState([]);\n  const [isPaused, setIsPaused] = useState(false);\n\n  const handleButtonClick = (questionNumber) => {\n    onQuestionSelect(questionNumber);\n    setAnsweredQuestions([...answeredQuestions, questionNumber]);\n    setIsPaused(false);\n\n    const isVisitedButNotAnswered =\n      questionStatus[questionNumber - 1] === \"notVisited\";\n    if (isVisitedButNotAnswered) {\n      // Mark the question as \"not answered\"\n      const updatedQuestionStatus = [...questionStatus];\n      updatedQuestionStatus[questionNumber - 1] = \"notAnswered\";\n      setQuestionStatus(updatedQuestionStatus);\n    } else if (questionStatus[questionNumber - 1] === \"marked\") {\n      // Mark the question as \"Marked for review\" by default if not visited\n      const updatedQuestionStatus = [...questionStatus];\n      updatedQuestionStatus[questionNumber - 1] = \"markedForReview\";\n      setQuestionStatus(updatedQuestionStatus);\n    }\n  };\n\n  RightSidebar.propTypes = {\n    onQuestionSelect: PropTypes.func.isRequired,\n    questionStatus: PropTypes.arrayOf(PropTypes.string),\n    onResumeTimer: PropTypes.func.isRequired, // Define the prop type for onResumeTimer\n  };\n\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [timers, setTimers] = useState(new Array().fill(0));\n  const [timer, setTimer] = useState(0);\n\n  useEffect(() => {\n    // Set the timer to the saved value for the current question\n    setTimer(timers[currentQuestionIndex] || 0);\n\n    let interval;\n    // interval = setInterval(() => {\n    //     setTimer(prevTimer => prevTimer + 1);\n    // }, 1000);\n\n    if (!isPaused) {\n      interval = setInterval(() => {\n        setTimer((prevTimer) => prevTimer + 1);\n      }, 1000);\n    }\n\n    // Clear the interval when the component unmounts or when the user moves to the next question\n    return () => {\n      clearInterval(interval);\n    };\n  }, [currentQuestionIndex, timers, isPaused]);\n\n  const visted = () => {\n    setQuestionStatus(Array(1).fill(\"Visited\"));\n  };\n  const renderList = buttons.map((item, index) => {\n    let className = \"quesAns-btn \";\n    if (questionStatus && questionStatus[index] === \"answered\") {\n      className += \" instruction-btn1\";\n    } else if (questionStatus && questionStatus[index] === \"notAnswered\") {\n      className += \" instruction-btn2\";\n    } else if (questionStatus && questionStatus[index] === \"marked\") {\n      className += \" instruction-btn3\";\n    } else if (\n      questionStatus &&\n      questionStatus[index] === \"Answered but marked for review\"\n    ) {\n      className += \" instruction-btn4\";\n    } else if (questionStatus && questionStatus[index] === \"Visited\") {\n      className += \" instruction-btn6\";\n    }\n    return (\n      <div key={item}>\n        <button className={className} onClick={() => handleButtonClick(item)}>\n          {item}\n        </button>\n      </div>\n    );\n  });\n\n  // const buttonClass = isAnswered ? 'quesAns-btn-green' : 'quesAns-btn';\n\n  // const renderList = buttons.map((item) => {\n\n  //     return (\n  //         <div>\n  //             <button className='quesAns-btn' onClick={() => handleButtonClick(item)}>{item}</button>\n  //         </div>\n  //     )\n  // })\n\n  // const renderList = buttons.map((item) =>\n  //     <div>\n  //         <button className='quesAns-btn' onClick={() => handleButtonClick(item)}>{item}</button>\n  //     </div>\n  // )\n\n  // const renderList = buttons.map((item) => {\n\n  //     const isAnswered = answeredQuestions.includes(item);\n  //     const buttonClass = isAnswered ? 'quesAns-btn-green' : 'quesAns-btn';\n  //     return(\n  //         <div>\n  //             <button className={buttonClass} onClick={() => handleButtonClick(item)}>{item}</button>\n  //         </div>\n  //     )\n  // })\n\n  const totalTime = 180 * 60; // 180 minutes in seconds\n  const [wtimer, setWTimer] = useState(totalTime);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setWTimer((prevTimer) => prevTimer - 1);\n    }, 1000);\n\n    // Clear the interval and handle time-up logic when timer reaches 0\n    if (wtimer <= 0) {\n      clearInterval(interval);\n      // Handle time-up logic here (e.g., navigate to a different component)\n    }\n\n    // Clean up the interval on component unmount or when navigating away\n    return () => {\n      clearInterval(interval);\n    };\n  }, [wtimer]);\n\n  const WformatTime = (seconds) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const remainingSeconds = seconds % 60;\n    return `${hours > 9 ? hours : \"0\" + hours}:${\n      minutes > 9 ? minutes : \"0\" + minutes\n    }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n  };\n\n  return (\n    <div className=\"right-side-bar\">\n      <div className=\"rightSidebar-topHeader\">\n        <p>Name of the person</p>\n        <p>Time Left: {WformatTime(wtimer)}</p>\n      </div>\n      <div className=\"sidebar-header\">\n        <p className=\"header-para\">\n          You are viewing <span className=\"subject\">Mathematics</span> Section\n          Question Palette\n        </p>\n      </div>\n\n      <div className=\"ques-btn\">\n        <ul className=\"btn-ul\">{renderList}</ul>\n      </div>\n\n      {/* <div key={index}>\n                <button className='quesAns-btn'>{item}</button>\n            </div> */}\n\n      <div className=\"sidebar-footer\">\n        <h4 className=\"sidebar-footer-header\">Legend</h4>\n        <div className=\"footer-btns\">\n          <div className=\"inst-btns\">\n            <button className=\"instruction-btn1\">{answeredCount}</button>\n            <p>Answerd</p>\n            <br />\n          </div>\n          <br />\n          <div className=\"inst-btns\">\n            <button className=\"instruction-btn2\">{notAnsweredCount}</button>\n            <p>Not Answered</p>\n            <br />\n          </div>\n          <br />\n          <div className=\"inst-btns\">\n            <button className=\"instruction-btn3\">\n              {answeredmarkedForReviewCount}\n            </button>\n            <p>Marked</p>\n            <br />\n          </div>\n          <br />\n          <div className=\"inst-btns\">\n            <button className=\"instruction-btn4\">{markedForReviewCount}</button>\n            <p>Answered but marked for review</p>\n          </div>\n          <br />\n          <div className=\"inst-btns\">\n            <button className=\"instruction-btn5\">{VisitedCount}</button>\n            <p>Not Visited</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RightSidebar;\n","/home/user/Documents/egate_Quiz_project/src/Pages/MainQuizFunctionality/QuestionsFunctionality.jsx",["186","187","188","189","190","191","192","193","194","195","196","197","198"],[],"/home/user/Documents/egate_Quiz_project/src/Pages/MainQuizFunctionality/ButtonsFunctionality.jsx",["199","200","201","202","203","204","205","206","207","208","209","210","211"],[],"\nimport React, { createContext, useContext,useEffect, useRef, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport \"../RightSidebar/RightSidebar.css\";\n\nimport PropTypes from \"prop-types\";\n\n// const buttons = [\n//   1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n//   23, 24, 25, 26, 27, 28, 29, 30,\n// ];\n\n\n\nconst ButtonsFunctionality = ({\n    onQuestionSelect,\n    questionStatus,\n    seconds,\n    setQuestionStatus,\n    answeredCount,\n    notAnsweredCount,\n    answeredmarkedForReviewCount,\n    markedForReviewCount,\n    VisitedCount,\n    selectedSubject,\n    updateButtonStatus,\n    data\n}) => {\n\n\n\n    const sections = [\n        // Your section data here (adjust based on your actual data structure)\n        { sectionId: 1, sectionName: 'Mathematics', subject: 'Mathematics' },\n        { sectionId: 2, sectionName: 'Chemistry', subject: 'Chemistry' },\n        { sectionId: 3, sectionName: 'Physics', subject: 'Physics' },\n        { sectionId: 4, sectionName: 'Biology', subject: 'Biology' },\n\n    ];\n\n    const renderQuestionButtons = Array.isArray(data.questions) \n    ? data.questions.map((question, index) => {\n\n        let className = \"right_bar_Buttons \";\n        if (questionStatus && questionStatus[index] === \"answered\") {\n          className += \" instruction-btn1\";\n        } else if (questionStatus && questionStatus[index] === \"notAnswered\") {\n          className += \" instruction-btn2\";\n        } else if (questionStatus && questionStatus[index] === \"marked\") {\n          className += \" instruction-btn3\";\n        } else if (\n          questionStatus &&\n          questionStatus[index] === \"Answered but marked for review\"\n        ) {\n          className += \" instruction-btn4\";\n        } else if (questionStatus && questionStatus[index] === \"Visited\") {\n          className += \" instruction-btn6\";\n        }\n\n        return (\n\n            \n            <li key={question}>\n                {/* Add your logic for rendering question buttons here */}\n                <button onClick={() => handleButtonClick(index + 1)}\n                className={className}\n                // className=\"right_bar_Buttons\"\n                >\n                    {index + 1}\n                </button>\n            </li>\n        );\n    })\n    : null;\n\n\n    const renderSectionButtons = () => {\n        // Filter sections based on the selected subject\n        const filteredSections = sections.filter(\n            (section) => section.subject === selectedSubject\n        );\n\n\n        console.log(\"Filtered Sections:\", filteredSections);\n        console.log(\"Question Data:\", data.questions);\n        // Render buttons for filteredSections\n        return filteredSections.map((section, index) => (\n            <li key={index}>\n                <p className=\"section-btn\" onClick={() => handleButtonClick(section.sectionId)}>\n                    You are viewing<span className=\"subject\"> {section.sectionName} </span>Section\n                    Question Palette\n                </p>\n            </li>\n        ));\n    };\n\n\n\n\n\n    const [activeQuestion, setActiveQuestion] = useState(0);\n    const [answeredQuestions, setAnsweredQuestions] = useState([]);\n    const [isPaused, setIsPaused] = useState(false);\n\n\n    \n    const handleButtonClick = (questionNumber) => {\n    \n            // Check if the question is already answered, and return early if true\n            if (questionStatus[questionNumber - 1] === \"answered\") {\n                // Navigate to the selected question when it's already answered\n                onQuestionSelect(questionNumber);\n                return;\n              }\n    \n        onQuestionSelect(questionNumber);\n        setAnsweredQuestions((prevAnsweredQuestions) => [...prevAnsweredQuestions, questionNumber]);\n        setIsPaused(false);\n\n    \n        setQuestionStatus((prevQuestionStatus) => {\n            const currentStatus = prevQuestionStatus[questionNumber - 1];\n    \n            if (currentStatus === \"notVisited\") {\n                return [\n                    ...prevQuestionStatus.slice(0, questionNumber - 1),\n                    \"notAnswered\",\n                    ...prevQuestionStatus.slice(questionNumber),\n                ];\n            }\n            // If none of the conditions are met, return the current state\n            return prevQuestionStatus;\n        });\n    \n        // Add any other logic or state updates you need\n    };\n\n    ButtonsFunctionality.propTypes = {\n        onQuestionSelect: PropTypes.func.isRequired,\n        questionStatus: PropTypes.arrayOf(PropTypes.string),\n        onResumeTimer: PropTypes.func.isRequired, // Define the prop type for onResumeTimer\n        questionData: PropTypes.array.isRequired, \n        setQuestionStatus: PropTypes.func.isRequired,\n    };\n\n\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [timers, setTimers] = useState(new Array().fill(0));\n    const [timer, setTimer] = useState(0);\n\n    useEffect(() => {\n\n\n\n        // Set the timer to the saved value for the current question\n        setTimer(timers[currentQuestionIndex] || 0);\n\n        let interval;\n        // interval = setInterval(() => {\n        //     setTimer(prevTimer => prevTimer + 1);\n        // }, 1000);\n\n        if (!isPaused) {\n            interval = setInterval(() => {\n                setTimer((prevTimer) => prevTimer + 1);\n            }, 1000);\n        }\n\n        // Clear the interval when the component unmounts or when the user moves to the next question\n        return () => {\n            clearInterval(interval);\n        };\n    }, [currentQuestionIndex, timers, isPaused]);\n\n    const visted = () => {\n        setQuestionStatus(Array(1).fill(\"Visited\"));\n    };\n\n\n\n    const totalTime = 180 * 60; // 180 minutes in seconds\n    const [wtimer, setWTimer] = useState(totalTime);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setWTimer((prevTimer) => prevTimer - 1);\n        }, 1000);\n\n        // Clear the interval and handle time-up logic when timer reaches 0\n        if (wtimer <= 0) {\n            clearInterval(interval);\n            // Handle time-up logic here (e.g., navigate to a different component)\n        }\n\n        // Clean up the interval on component unmount or when navigating away\n        return () => {\n            clearInterval(interval);\n        };\n    }, [wtimer]);\n\n\n    const WformatTime = (seconds) => {\n        const hours = Math.floor(seconds / 3600);\n        const minutes = Math.floor((seconds % 3600) / 60);\n        const remainingSeconds = seconds % 60;\n        return `${hours > 9 ? hours : \"0\" + hours}:${minutes > 9 ? minutes : \"0\" + minutes\n            }:${remainingSeconds > 9 ? remainingSeconds : \"0\" + remainingSeconds}`;\n    };\n\n\n\n    return (\n        <div className=\"right-side-bar\">\n            <div className=\"rightSidebar-topHeader\">\n                <p>Name of the person</p>\n                <p>Time Left: {WformatTime(wtimer)}</p>\n            </div>\n            <div className=\"sidebar-header\">\n                <p className=\"header-para\">{renderSectionButtons()}</p>\n            </div>\n\n            <div className=\"ques-btn\">\n                <ul className=\"btn-ul quesAns-btn \">{renderQuestionButtons}</ul>\n            </div>\n\n            {/* <div key={index}>\n                <button className='quesAns-btn'>{item}</button>\n            </div> */}\n\n            <div className=\"sidebar-footer\">\n                <h4 className=\"sidebar-footer-header\">Legend</h4>\n                <div className=\"footer-btns\">\n                    <div className=\"inst-btns\">\n                        <button className=\"instruction-btn1\">{answeredCount}</button>\n                        <p>Answerd</p>\n                        <br />\n                    </div>\n                    <br />\n                    <div className=\"inst-btns\">\n                        <button className=\"instruction-btn2\">{notAnsweredCount}</button>\n                        <p>Not Answered</p>\n                        <br />\n                    </div>\n                    <br />\n                    <div className=\"inst-btns\">\n                        <button className=\"instruction-btn3\">\n                            {answeredmarkedForReviewCount}\n                        </button>\n                        <p>Marked</p>\n                        <br />\n                    </div>\n                    <br />\n                    <div className=\"inst-btns\">\n                        <button className=\"instruction-btn4\">{markedForReviewCount}</button>\n                        <p>Answered but marked for review</p>\n                    </div>\n                    <br />\n                    <div className=\"inst-btns\">\n                        <button className=\"instruction-btn5\">{VisitedCount}</button>\n                        <p>Not Visited</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ButtonsFunctionality;","/home/user/Documents/egate_Quiz_project/src/Pages/MainQuizFunctionality/TestResultsPage.jsx",[],[],"/home/user/Documents/egate_Quiz_project/src/Pages/Paper/Radius.jsx",[],[],{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","severity":1,"message":"215","line":8,"column":8,"nodeType":"216","messageId":"217","endLine":8,"endColumn":14},{"ruleId":"214","severity":1,"message":"218","line":17,"column":8,"nodeType":"216","messageId":"217","endLine":17,"endColumn":24},{"ruleId":"214","severity":1,"message":"219","line":19,"column":8,"nodeType":"216","messageId":"217","endLine":19,"endColumn":26},{"ruleId":"214","severity":1,"message":"220","line":22,"column":8,"nodeType":"216","messageId":"217","endLine":22,"endColumn":14},{"ruleId":"221","severity":1,"message":"222","line":54,"column":79,"nodeType":"223","messageId":"224","endLine":54,"endColumn":106},{"ruleId":"214","severity":1,"message":"225","line":75,"column":8,"nodeType":"216","messageId":"217","endLine":75,"endColumn":18},{"ruleId":"214","severity":1,"message":"226","line":80,"column":10,"nodeType":"216","messageId":"217","endLine":80,"endColumn":18},{"ruleId":"214","severity":1,"message":"227","line":3,"column":8,"nodeType":"216","messageId":"217","endLine":3,"endColumn":12},{"ruleId":"214","severity":1,"message":"228","line":6,"column":16,"nodeType":"216","messageId":"217","endLine":6,"endColumn":25},{"ruleId":"214","severity":1,"message":"229","line":30,"column":10,"nodeType":"216","messageId":"217","endLine":30,"endColumn":17},{"ruleId":"221","severity":1,"message":"230","line":70,"column":7,"nodeType":"223","messageId":"224","endLine":70,"endColumn":23},{"ruleId":"221","severity":1,"message":"231","line":71,"column":7,"nodeType":"223","messageId":"224","endLine":71,"endColumn":23},{"ruleId":"232","severity":1,"message":"233","line":199,"column":31,"nodeType":"223","endLine":199,"endColumn":42},{"ruleId":"214","severity":1,"message":"234","line":327,"column":10,"nodeType":"216","messageId":"217","endLine":327,"endColumn":19},{"ruleId":"214","severity":1,"message":"235","line":328,"column":10,"nodeType":"216","messageId":"217","endLine":328,"endColumn":20},{"ruleId":"214","severity":1,"message":"236","line":329,"column":10,"nodeType":"216","messageId":"217","endLine":329,"endColumn":19},{"ruleId":"237","severity":1,"message":"238","line":341,"column":6,"nodeType":"239","endLine":341,"endColumn":8,"suggestions":"240"},{"ruleId":"237","severity":1,"message":"238","line":353,"column":6,"nodeType":"239","endLine":353,"endColumn":8,"suggestions":"241"},{"ruleId":"237","severity":1,"message":"238","line":365,"column":6,"nodeType":"239","endLine":365,"endColumn":8,"suggestions":"242"},{"ruleId":"237","severity":1,"message":"238","line":377,"column":6,"nodeType":"239","endLine":377,"endColumn":8,"suggestions":"243"},{"ruleId":"214","severity":1,"message":"244","line":379,"column":10,"nodeType":"216","messageId":"217","endLine":379,"endColumn":17},{"ruleId":"214","severity":1,"message":"245","line":380,"column":10,"nodeType":"216","messageId":"217","endLine":380,"endColumn":17},{"ruleId":"214","severity":1,"message":"246","line":381,"column":10,"nodeType":"216","messageId":"217","endLine":381,"endColumn":18},{"ruleId":"214","severity":1,"message":"247","line":382,"column":10,"nodeType":"216","messageId":"217","endLine":382,"endColumn":17},{"ruleId":"214","severity":1,"message":"248","line":430,"column":10,"nodeType":"216","messageId":"217","endLine":430,"endColumn":19},{"ruleId":"214","severity":1,"message":"249","line":431,"column":10,"nodeType":"216","messageId":"217","endLine":431,"endColumn":19},{"ruleId":"214","severity":1,"message":"250","line":432,"column":10,"nodeType":"216","messageId":"217","endLine":432,"endColumn":19},{"ruleId":"214","severity":1,"message":"251","line":433,"column":10,"nodeType":"216","messageId":"217","endLine":433,"endColumn":19},{"ruleId":"214","severity":1,"message":"252","line":434,"column":10,"nodeType":"216","messageId":"217","endLine":434,"endColumn":25},{"ruleId":"214","severity":1,"message":"253","line":435,"column":10,"nodeType":"216","messageId":"217","endLine":435,"endColumn":25},{"ruleId":"214","severity":1,"message":"254","line":436,"column":10,"nodeType":"216","messageId":"217","endLine":436,"endColumn":25},{"ruleId":"214","severity":1,"message":"255","line":437,"column":10,"nodeType":"216","messageId":"217","endLine":437,"endColumn":25},{"ruleId":"214","severity":1,"message":"256","line":439,"column":9,"nodeType":"216","messageId":"217","endLine":439,"endColumn":23},{"ruleId":"214","severity":1,"message":"257","line":450,"column":9,"nodeType":"216","messageId":"217","endLine":450,"endColumn":23},{"ruleId":"214","severity":1,"message":"258","line":460,"column":9,"nodeType":"216","messageId":"217","endLine":460,"endColumn":24},{"ruleId":"214","severity":1,"message":"259","line":470,"column":9,"nodeType":"216","messageId":"217","endLine":470,"endColumn":23},{"ruleId":"214","severity":1,"message":"260","line":1299,"column":32,"nodeType":"216","messageId":"217","endLine":1299,"endColumn":41},{"ruleId":"214","severity":1,"message":"261","line":1379,"column":10,"nodeType":"216","messageId":"217","endLine":1379,"endColumn":24},{"ruleId":"237","severity":1,"message":"262","line":19,"column":6,"nodeType":"239","endLine":19,"endColumn":8,"suggestions":"263"},{"ruleId":"214","severity":1,"message":"264","line":3,"column":5,"nodeType":"216","messageId":"217","endLine":3,"endColumn":37},{"ruleId":"214","severity":1,"message":"265","line":7,"column":8,"nodeType":"216","messageId":"217","endLine":7,"endColumn":13},{"ruleId":"214","severity":1,"message":"266","line":9,"column":8,"nodeType":"216","messageId":"217","endLine":9,"endColumn":13},{"ruleId":"221","severity":1,"message":"267","line":17,"column":13,"nodeType":"223","messageId":"224","endLine":17,"endColumn":48},{"ruleId":"221","severity":1,"message":"268","line":18,"column":13,"nodeType":"223","messageId":"224","endLine":18,"endColumn":65},{"ruleId":"214","severity":1,"message":"269","line":56,"column":15,"nodeType":"216","messageId":"217","endLine":56,"endColumn":29},{"ruleId":"214","severity":1,"message":"260","line":87,"column":8,"nodeType":"216","messageId":"217","endLine":87,"endColumn":17},{"ruleId":"214","severity":1,"message":"270","line":88,"column":15,"nodeType":"216","messageId":"217","endLine":88,"endColumn":30},{"ruleId":"221","severity":1,"message":"271","line":149,"column":13,"nodeType":"223","messageId":"224","endLine":149,"endColumn":32},{"ruleId":"237","severity":1,"message":"272","line":1332,"column":6,"nodeType":"239","endLine":1332,"endColumn":22,"suggestions":"273"},{"ruleId":"214","severity":1,"message":"274","line":1567,"column":9,"nodeType":"216","messageId":"217","endLine":1567,"endColumn":25},{"ruleId":"214","severity":1,"message":"275","line":96,"column":28,"nodeType":"216","messageId":"217","endLine":96,"endColumn":34},{"ruleId":"214","severity":1,"message":"261","line":122,"column":10,"nodeType":"216","messageId":"217","endLine":122,"endColumn":24},{"ruleId":"214","severity":1,"message":"276","line":122,"column":26,"nodeType":"216","messageId":"217","endLine":122,"endColumn":43},{"ruleId":"214","severity":1,"message":"277","line":152,"column":32,"nodeType":"216","messageId":"217","endLine":152,"endColumn":55},{"ruleId":"214","severity":1,"message":"278","line":153,"column":18,"nodeType":"216","messageId":"217","endLine":153,"endColumn":27},{"ruleId":"279","severity":1,"message":"280","line":153,"column":40,"nodeType":"281","messageId":"282","endLine":153,"endColumn":51},{"ruleId":"214","severity":1,"message":"283","line":154,"column":10,"nodeType":"216","messageId":"217","endLine":154,"endColumn":15},{"ruleId":"214","severity":1,"message":"284","line":177,"column":9,"nodeType":"216","messageId":"217","endLine":177,"endColumn":15},{"ruleId":"214","severity":1,"message":"285","line":572,"column":21,"nodeType":"216","messageId":"217","endLine":572,"endColumn":25},{"ruleId":"214","severity":1,"message":"286","line":574,"column":8,"nodeType":"216","messageId":"217","endLine":574,"endColumn":23},{"ruleId":"214","severity":1,"message":"287","line":588,"column":27,"nodeType":"216","messageId":"217","endLine":588,"endColumn":43},{"ruleId":"214","severity":1,"message":"288","line":589,"column":30,"nodeType":"216","messageId":"217","endLine":589,"endColumn":49},{"ruleId":"214","severity":1,"message":"289","line":590,"column":42,"nodeType":"216","messageId":"217","endLine":590,"endColumn":73},{"ruleId":"214","severity":1,"message":"290","line":592,"column":34,"nodeType":"216","messageId":"217","endLine":592,"endColumn":57},{"ruleId":"214","severity":1,"message":"291","line":593,"column":26,"nodeType":"216","messageId":"217","endLine":593,"endColumn":41},{"ruleId":"214","severity":1,"message":"261","line":596,"column":12,"nodeType":"216","messageId":"217","endLine":596,"endColumn":26},{"ruleId":"214","severity":1,"message":"292","line":721,"column":23,"nodeType":"216","messageId":"217","endLine":721,"endColumn":30},{"ruleId":"237","severity":1,"message":"293","line":729,"column":8,"nodeType":"239","endLine":729,"endColumn":40,"suggestions":"294"},{"ruleId":"214","severity":1,"message":"295","line":753,"column":12,"nodeType":"216","messageId":"217","endLine":753,"endColumn":30},{"ruleId":"214","severity":1,"message":"296","line":754,"column":12,"nodeType":"216","messageId":"217","endLine":754,"endColumn":27},{"ruleId":"214","severity":1,"message":"278","line":814,"column":20,"nodeType":"216","messageId":"217","endLine":814,"endColumn":29},{"ruleId":"214","severity":1,"message":"297","line":2,"column":17,"nodeType":"216","messageId":"217","endLine":2,"endColumn":30},{"ruleId":"214","severity":1,"message":"298","line":2,"column":32,"nodeType":"216","messageId":"217","endLine":2,"endColumn":42},{"ruleId":"214","severity":1,"message":"275","line":2,"column":54,"nodeType":"216","messageId":"217","endLine":2,"endColumn":60},{"ruleId":"214","severity":1,"message":"285","line":3,"column":10,"nodeType":"216","messageId":"217","endLine":3,"endColumn":14},{"ruleId":"214","severity":1,"message":"228","line":3,"column":16,"nodeType":"216","messageId":"217","endLine":3,"endColumn":25},{"ruleId":"214","severity":1,"message":"261","line":101,"column":12,"nodeType":"216","messageId":"217","endLine":101,"endColumn":26},{"ruleId":"214","severity":1,"message":"276","line":101,"column":28,"nodeType":"216","messageId":"217","endLine":101,"endColumn":45},{"ruleId":"214","severity":1,"message":"299","line":102,"column":12,"nodeType":"216","messageId":"217","endLine":102,"endColumn":29},{"ruleId":"214","severity":1,"message":"277","line":147,"column":34,"nodeType":"216","messageId":"217","endLine":147,"endColumn":57},{"ruleId":"214","severity":1,"message":"278","line":148,"column":20,"nodeType":"216","messageId":"217","endLine":148,"endColumn":29},{"ruleId":"279","severity":1,"message":"280","line":148,"column":42,"nodeType":"281","messageId":"282","endLine":148,"endColumn":53},{"ruleId":"214","severity":1,"message":"283","line":149,"column":12,"nodeType":"216","messageId":"217","endLine":149,"endColumn":17},{"ruleId":"214","severity":1,"message":"284","line":175,"column":11,"nodeType":"216","messageId":"217","endLine":175,"endColumn":17},"no-new-object",["300"],"no-unused-vars","'Paper1' is defined but never used.","Identifier","unusedVar","'DownloadQuizPage' is defined but never used.","'Document_ImageInfo' is defined but never used.","'Radius' is defined but never used.","react/jsx-pascal-case","Imported JSX component General_intructions_page must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","'PhoneInput' is defined but never used.","'testCard' is assigned a value but never used.","'neet' is defined but never used.","'useParams' is defined but never used.","'courses' is assigned a value but never used.","Imported JSX component Home_section must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Quiz_Courses must be in PascalCase or SCREAMING_SNAKE_CASE","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'coursespg' is assigned a value but never used.","'coursesmba' is assigned a value but never used.","'coursesca' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'coursesug'. Either include it or remove the dependency array.","ArrayExpression",["301"],["302"],["303"],["304"],"'examsug' is assigned a value but never used.","'examspg' is assigned a value but never used.","'examsmba' is assigned a value but never used.","'examsca' is assigned a value but never used.","'showcard1' is assigned a value but never used.","'showcard2' is assigned a value but never used.","'showcard3' is assigned a value but never used.","'showcard4' is assigned a value but never used.","'showcardactive1' is assigned a value but never used.","'showcardactive2' is assigned a value but never used.","'showcardactive3' is assigned a value but never used.","'showcardactive4' is assigned a value but never used.","'displayexamsug' is assigned a value but never used.","'displayexamspg' is assigned a value but never used.","'displayexamsmba' is assigned a value but never used.","'displayexamsca' is assigned a value but never used.","'subjectId' is assigned a value but never used.","'activeQuestion' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'subjectId' and 'testCreationTableId'. Either include them or remove the dependency array.",["305"],"'General_intructions_page_content' is defined but never used.","'axios' is defined but never used.","'Paper' is defined but never used.","Imported JSX component General_intructions_page_header must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component General_intructions_page_container must be in PascalCase or SCREAMING_SNAKE_CASE","'startCountdown' is assigned a value but never used.","'handlePaperData' is assigned a value but never used.","Imported JSX component Intro_container must be in PascalCase or SCREAMING_SNAKE_CASE","React Hook useEffect has a missing dependency: 'updateCounters'. Either include it or remove the dependency array.",["306"],"'questionImageSrc' is assigned a value but never used.","'useRef' is defined but never used.","'setActiveQuestion' is assigned a value but never used.","'setCurrentQuestionIndex' is assigned a value but never used.","'setTimers' is assigned a value but never used.","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","'timer' is assigned a value but never used.","'visted' is assigned a value but never used.","'Link' is defined but never used.","'TestResultsPage' is defined but never used.","'setAnsweredCount' is assigned a value but never used.","'setNotAnsweredCount' is assigned a value but never used.","'setAnsweredmarkedForReviewCount' is assigned a value but never used.","'setMarkedForReviewCount' is assigned a value but never used.","'setVisitedCount' is assigned a value but never used.","'linkUrl' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'data.subjectId'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSelectedAnswers' needs the current value of 'data.subjectId'.",["307"],"'selectedAnswersMap' is assigned a value but never used.","'markedQuestions' is assigned a value but never used.","'createContext' is defined but never used.","'useContext' is defined but never used.","'answeredQuestions' is assigned a value but never used.","no-object-constructor",{"desc":"308","fix":"309"},{"desc":"308","fix":"310"},{"desc":"308","fix":"311"},{"desc":"308","fix":"312"},{"desc":"313","fix":"314"},{"desc":"315","fix":"316"},{"desc":"317","fix":"318"},"Update the dependencies array to be: [coursesug]",{"range":"319","text":"320"},{"range":"321","text":"320"},{"range":"322","text":"320"},{"range":"323","text":"320"},"Update the dependencies array to be: [subjectId, testCreationTableId]",{"range":"324","text":"325"},"Update the dependencies array to be: [questionStatus, updateCounters]",{"range":"326","text":"327"},"Update the dependencies array to be: [testCreationTableId, subjectId, data.subjectId]",{"range":"328","text":"329"},[11424,11426],"[coursesug]",[11697,11699],[11972,11974],[12245,12247],[598,600],"[subjectId, testCreationTableId]",[59443,59459],"[questionStatus, updateCounters]",[24930,24962],"[testCreationTableId, subjectId, data.subjectId]"]